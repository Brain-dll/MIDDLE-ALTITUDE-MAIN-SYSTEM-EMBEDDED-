
MAIN_AVIONIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d07c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800d210  0800d210  0001d210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5b8  0800d5b8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5b8  0800d5b8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5b8  0800d5b8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b8  0800d5b8  0001d5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5bc  0800d5bc  0001d5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  200001f8  0800d7b8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800d7b8  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144b7  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027e7  00000000  00000000  000346df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  00036ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00037fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc57  00000000  00000000  00038ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f12d  00000000  00000000  00055c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a87ce  00000000  00000000  00064d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005704  00000000  00000000  0010d5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1f4 	.word	0x0800d1f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d1f4 	.word	0x0800d1f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <BME280_Init>:
//float BASE_P[9] = {0}, BASE = 0;
float BASE_P[3] = {0}, BASE = 0;
float P0 = 1013.25;

void BME280_Init()
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, BME280_DEVICE_WRITE_ADRESS, 1, 100) != HAL_OK)
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	2201      	movs	r2, #1
 8000c92:	21ec      	movs	r1, #236	; 0xec
 8000c94:	4819      	ldr	r0, [pc, #100]	; (8000cfc <BME280_Init+0x74>)
 8000c96:	f004 f9d9 	bl	800504c <HAL_I2C_IsDeviceReady>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <BME280_Init+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <BME280_Init+0x78>)
 8000ca8:	f003 fee0 	bl	8004a6c <HAL_GPIO_WritePin>
	}

	BME280_GetCalibration_Value();
 8000cac:	f000 f82e 	bl	8000d0c <BME280_GetCalibration_Value>
	BME280_SetCalibration();
 8000cb0:	f000 f97a 	bl	8000fa8 <BME280_SetCalibration>

	BASE = 0;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <BME280_Init+0x7c>)
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(BASE_P) / sizeof(BASE_P[0]); i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	e00c      	b.n	8000cdc <BME280_Init+0x54>
		//BASE_P[i] = BME280_Get_Altitude();
		BASE_P[i] = BME280_ALT_MEDIANFILTER();
 8000cc2:	79fc      	ldrb	r4, [r7, #7]
 8000cc4:	f000 fbd0 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8000cc8:	eef0 7a40 	vmov.f32	s15, s0
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <BME280_Init+0x80>)
 8000cce:	00a3      	lsls	r3, r4, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < sizeof(BASE_P) / sizeof(BASE_P[0]); i++) {
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d9ef      	bls.n	8000cc2 <BME280_Init+0x3a>
	}
	BASE = Array_sort_BME(BASE_P, sizeof(BASE_P) / sizeof(BASE_P[0]));
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <BME280_Init+0x80>)
 8000ce6:	f000 fb63 	bl	80013b0 <Array_sort_BME>
 8000cea:	eef0 7a40 	vmov.f32	s15, s0
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <BME280_Init+0x7c>)
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	20000414 	.word	0x20000414
 8000d00:	48000800 	.word	0x48000800
 8000d04:	20000220 	.word	0x20000220
 8000d08:	20000214 	.word	0x20000214

08000d0c <BME280_GetCalibration_Value>:

void BME280_GetCalibration_Value()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af04      	add	r7, sp, #16
	uint8_t a = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	77fb      	strb	r3, [r7, #31]
	uint8_t Cal_Buff[BME280_DEVICE_CALIBRATION_WORDS_LENGHT] = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]

	HAL_I2C_Mem_Read(&hi2c2, BME280_DEVICE_READ_ADRESS, BME280_CALIBRATION_START_ADDRESS, 1,
 8000d26:	2364      	movs	r3, #100	; 0x64
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2318      	movs	r3, #24
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	2288      	movs	r2, #136	; 0x88
 8000d36:	21ed      	movs	r1, #237	; 0xed
 8000d38:	488e      	ldr	r0, [pc, #568]	; (8000f74 <BME280_GetCalibration_Value+0x268>)
 8000d3a:	f004 f86d 	bl	8004e18 <HAL_I2C_Mem_Read>
			Cal_Buff, BME280_DEVICE_CALIBRATION_WORDS_LENGHT, 100);

	dig_T1 = (uint16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000d3e:	7ffb      	ldrb	r3, [r7, #31]
 8000d40:	3301      	adds	r3, #1
 8000d42:	f107 0220 	add.w	r2, r7, #32
 8000d46:	4413      	add	r3, r2
 8000d48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	7ffb      	ldrb	r3, [r7, #31]
 8000d52:	f107 0120 	add.w	r1, r7, #32
 8000d56:	440b      	add	r3, r1
 8000d58:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <BME280_GetCalibration_Value+0x26c>)
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	7ffb      	ldrb	r3, [r7, #31]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	77fb      	strb	r3, [r7, #31]
	dig_T2 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000d6e:	7ffb      	ldrb	r3, [r7, #31]
 8000d70:	3301      	adds	r3, #1
 8000d72:	f107 0220 	add.w	r2, r7, #32
 8000d76:	4413      	add	r3, r2
 8000d78:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	7ffb      	ldrb	r3, [r7, #31]
 8000d82:	f107 0120 	add.w	r1, r7, #32
 8000d86:	440b      	add	r3, r1
 8000d88:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	4b7a      	ldr	r3, [pc, #488]	; (8000f7c <BME280_GetCalibration_Value+0x270>)
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	7ffb      	ldrb	r3, [r7, #31]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	77fb      	strb	r3, [r7, #31]
	dig_T3 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000d9c:	7ffb      	ldrb	r3, [r7, #31]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f107 0220 	add.w	r2, r7, #32
 8000da4:	4413      	add	r3, r2
 8000da6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	7ffb      	ldrb	r3, [r7, #31]
 8000db0:	f107 0120 	add.w	r1, r7, #32
 8000db4:	440b      	add	r3, r1
 8000db6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	4b6f      	ldr	r3, [pc, #444]	; (8000f80 <BME280_GetCalibration_Value+0x274>)
 8000dc2:	801a      	strh	r2, [r3, #0]
 8000dc4:	7ffb      	ldrb	r3, [r7, #31]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	77fb      	strb	r3, [r7, #31]

	dig_P1 = (uint16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000dca:	7ffb      	ldrb	r3, [r7, #31]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	f107 0220 	add.w	r2, r7, #32
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	7ffb      	ldrb	r3, [r7, #31]
 8000dde:	f107 0120 	add.w	r1, r7, #32
 8000de2:	440b      	add	r3, r1
 8000de4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b64      	ldr	r3, [pc, #400]	; (8000f84 <BME280_GetCalibration_Value+0x278>)
 8000df2:	801a      	strh	r2, [r3, #0]
 8000df4:	7ffb      	ldrb	r3, [r7, #31]
 8000df6:	3302      	adds	r3, #2
 8000df8:	77fb      	strb	r3, [r7, #31]
	dig_P2 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000dfa:	7ffb      	ldrb	r3, [r7, #31]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f107 0220 	add.w	r2, r7, #32
 8000e02:	4413      	add	r3, r2
 8000e04:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	7ffb      	ldrb	r3, [r7, #31]
 8000e0e:	f107 0120 	add.w	r1, r7, #32
 8000e12:	440b      	add	r3, r1
 8000e14:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <BME280_GetCalibration_Value+0x27c>)
 8000e20:	801a      	strh	r2, [r3, #0]
 8000e22:	7ffb      	ldrb	r3, [r7, #31]
 8000e24:	3302      	adds	r3, #2
 8000e26:	77fb      	strb	r3, [r7, #31]
	dig_P3 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f107 0220 	add.w	r2, r7, #32
 8000e30:	4413      	add	r3, r2
 8000e32:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	7ffb      	ldrb	r3, [r7, #31]
 8000e3c:	f107 0120 	add.w	r1, r7, #32
 8000e40:	440b      	add	r3, r1
 8000e42:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <BME280_GetCalibration_Value+0x280>)
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	7ffb      	ldrb	r3, [r7, #31]
 8000e52:	3302      	adds	r3, #2
 8000e54:	77fb      	strb	r3, [r7, #31]
	dig_P4 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000e56:	7ffb      	ldrb	r3, [r7, #31]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f107 0220 	add.w	r2, r7, #32
 8000e5e:	4413      	add	r3, r2
 8000e60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	7ffb      	ldrb	r3, [r7, #31]
 8000e6a:	f107 0120 	add.w	r1, r7, #32
 8000e6e:	440b      	add	r3, r1
 8000e70:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <BME280_GetCalibration_Value+0x284>)
 8000e7c:	801a      	strh	r2, [r3, #0]
 8000e7e:	7ffb      	ldrb	r3, [r7, #31]
 8000e80:	3302      	adds	r3, #2
 8000e82:	77fb      	strb	r3, [r7, #31]
	dig_P5 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000e84:	7ffb      	ldrb	r3, [r7, #31]
 8000e86:	3301      	adds	r3, #1
 8000e88:	f107 0220 	add.w	r2, r7, #32
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	7ffb      	ldrb	r3, [r7, #31]
 8000e98:	f107 0120 	add.w	r1, r7, #32
 8000e9c:	440b      	add	r3, r1
 8000e9e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <BME280_GetCalibration_Value+0x288>)
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	77fb      	strb	r3, [r7, #31]
	dig_P6 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000eb2:	7ffb      	ldrb	r3, [r7, #31]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f107 0220 	add.w	r2, r7, #32
 8000eba:	4413      	add	r3, r2
 8000ebc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7ffb      	ldrb	r3, [r7, #31]
 8000ec6:	f107 0120 	add.w	r1, r7, #32
 8000eca:	440b      	add	r3, r1
 8000ecc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <BME280_GetCalibration_Value+0x28c>)
 8000ed8:	801a      	strh	r2, [r3, #0]
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	3302      	adds	r3, #2
 8000ede:	77fb      	strb	r3, [r7, #31]
	dig_P7 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	f107 0220 	add.w	r2, r7, #32
 8000ee8:	4413      	add	r3, r2
 8000eea:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	f107 0120 	add.w	r1, r7, #32
 8000ef8:	440b      	add	r3, r1
 8000efa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <BME280_GetCalibration_Value+0x290>)
 8000f06:	801a      	strh	r2, [r3, #0]
 8000f08:	7ffb      	ldrb	r3, [r7, #31]
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	77fb      	strb	r3, [r7, #31]
	dig_P8 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000f0e:	7ffb      	ldrb	r3, [r7, #31]
 8000f10:	3301      	adds	r3, #1
 8000f12:	f107 0220 	add.w	r2, r7, #32
 8000f16:	4413      	add	r3, r2
 8000f18:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	f107 0120 	add.w	r1, r7, #32
 8000f26:	440b      	add	r3, r1
 8000f28:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <BME280_GetCalibration_Value+0x294>)
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	7ffb      	ldrb	r3, [r7, #31]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	77fb      	strb	r3, [r7, #31]
	dig_P9 = (int16_t)((Cal_Buff[a+1] << 8) | Cal_Buff [a]); a+=2;
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f107 0220 	add.w	r2, r7, #32
 8000f44:	4413      	add	r3, r2
 8000f46:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	7ffb      	ldrb	r3, [r7, #31]
 8000f50:	f107 0120 	add.w	r1, r7, #32
 8000f54:	440b      	add	r3, r1
 8000f56:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <BME280_GetCalibration_Value+0x298>)
 8000f62:	801a      	strh	r2, [r3, #0]
 8000f64:	7ffb      	ldrb	r3, [r7, #31]
 8000f66:	3302      	adds	r3, #2
 8000f68:	77fb      	strb	r3, [r7, #31]
}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000414 	.word	0x20000414
 8000f78:	200002ea 	.word	0x200002ea
 8000f7c:	200002ec 	.word	0x200002ec
 8000f80:	2000030e 	.word	0x2000030e
 8000f84:	20000300 	.word	0x20000300
 8000f88:	200002ee 	.word	0x200002ee
 8000f8c:	20000302 	.word	0x20000302
 8000f90:	200002f0 	.word	0x200002f0
 8000f94:	200002f8 	.word	0x200002f8
 8000f98:	20000310 	.word	0x20000310
 8000f9c:	200002e4 	.word	0x200002e4
 8000fa0:	20000304 	.word	0x20000304
 8000fa4:	2000030c 	.word	0x2000030c

08000fa8 <BME280_SetCalibration>:

void BME280_SetCalibration(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af04      	add	r7, sp, #16
	//WData[0] = 0x30; /*0xF0;*/   //  62.5ms t(standby)  IIR filter off
	//WData[1] = 0xB7;  // X16 sample rate of temperature and pressure measurement
	WData[0] = 0x08;	// 0.5ms t(standby)  X2 IIR filter coefficient
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <BME280_SetCalibration+0x54>)
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	701a      	strb	r2, [r3, #0]
	WData[1] = 0x77;	// X4 sample rate of temperature measurement, X16 sample rate of pressure measurement
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <BME280_SetCalibration+0x54>)
 8000fb6:	2277      	movs	r2, #119	; 0x77
 8000fb8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Write(&hi2c2, BME280_DEVICE_WRITE_ADRESS, 0xF5, 1, &WData[0], 1, 100);
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <BME280_SetCalibration+0x54>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	22f5      	movs	r2, #245	; 0xf5
 8000fca:	21ec      	movs	r1, #236	; 0xec
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <BME280_SetCalibration+0x58>)
 8000fce:	f003 fe0f 	bl	8004bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8000fd2:	2014      	movs	r0, #20
 8000fd4:	f003 f896 	bl	8004104 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c2, BME280_DEVICE_WRITE_ADRESS, 0xF4, 1, &WData[1], 1, 100);
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <BME280_SetCalibration+0x5c>)
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	22f4      	movs	r2, #244	; 0xf4
 8000fe8:	21ec      	movs	r1, #236	; 0xec
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <BME280_SetCalibration+0x58>)
 8000fec:	f003 fe00 	bl	8004bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8000ff0:	2014      	movs	r0, #20
 8000ff2:	f003 f887 	bl	8004104 <HAL_Delay>
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200002e8 	.word	0x200002e8
 8001000:	20000414 	.word	0x20000414
 8001004:	200002e9 	.word	0x200002e9

08001008 <BME280_Get_Uncompansated_Temperature>:

int32_t BME280_Get_Uncompansated_Temperature(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
	uint8_t tData[3] = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2100      	movs	r1, #0
 8001012:	460a      	mov	r2, r1
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	460a      	mov	r2, r1
 8001018:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Mem_Read(&hi2c2, BME280_DEVICE_READ_ADRESS, 0xFA, 1, tData, 3, 100);
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2303      	movs	r3, #3
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	22fa      	movs	r2, #250	; 0xfa
 800102a:	21ed      	movs	r1, #237	; 0xed
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <BME280_Get_Uncompansated_Temperature+0x4c>)
 800102e:	f003 fef3 	bl	8004e18 <HAL_I2C_Mem_Read>

	unCompTemperature = (uint32_t)((tData[0] << 12) | (tData[1] << 4) | (tData[2] >> 4));
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	031a      	lsls	r2, r3, #12
 8001036:	797b      	ldrb	r3, [r7, #5]
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4313      	orrs	r3, r2
 800103c:	79ba      	ldrb	r2, [r7, #6]
 800103e:	0912      	lsrs	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	4313      	orrs	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <BME280_Get_Uncompansated_Temperature+0x50>)
 8001046:	6013      	str	r3, [r2, #0]

	return (int32_t)unCompTemperature;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <BME280_Get_Uncompansated_Temperature+0x50>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000414 	.word	0x20000414
 8001058:	20000308 	.word	0x20000308

0800105c <BME280_Get_Temperature>:

float BME280_Get_Temperature(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	int32_t adc_T = BME280_Get_Uncompansated_Temperature();
 8001062:	f7ff ffd1 	bl	8001008 <BME280_Get_Uncompansated_Temperature>
 8001066:	60f8      	str	r0, [r7, #12]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	10da      	asrs	r2, r3, #3
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <BME280_Get_Temperature+0x88>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <BME280_Get_Temperature+0x8c>)
 8001076:	f9b2 2000 	ldrsh.w	r2, [r2]
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	12db      	asrs	r3, r3, #11
 8001080:	60bb      	str	r3, [r7, #8]
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	111b      	asrs	r3, r3, #4
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <BME280_Get_Temperature+0x88>)
 8001088:	8812      	ldrh	r2, [r2, #0]
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	1112      	asrs	r2, r2, #4
 8001090:	4914      	ldr	r1, [pc, #80]	; (80010e4 <BME280_Get_Temperature+0x88>)
 8001092:	8809      	ldrh	r1, [r1, #0]
 8001094:	1a52      	subs	r2, r2, r1
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	131b      	asrs	r3, r3, #12
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <BME280_Get_Temperature+0x90>)
 800109e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	139b      	asrs	r3, r3, #14
 80010a8:	607b      	str	r3, [r7, #4]
	t_fine = (var1 + var2);
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <BME280_Get_Temperature+0x94>)
 80010b2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <BME280_Get_Temperature+0x94>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3380      	adds	r3, #128	; 0x80
 80010c0:	121b      	asrs	r3, r3, #8
 80010c2:	603b      	str	r3, [r7, #0]
	return ((float)T) / 100.0;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010f4 <BME280_Get_Temperature+0x98>
 80010d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200002ea 	.word	0x200002ea
 80010e8:	200002ec 	.word	0x200002ec
 80010ec:	2000030e 	.word	0x2000030e
 80010f0:	20000314 	.word	0x20000314
 80010f4:	42c80000 	.word	0x42c80000

080010f8 <BME280_Get_Uncompansated_Pressure>:

uint32_t BME280_Get_Uncompansated_Pressure(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
	uint8_t PData[3] = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2100      	movs	r1, #0
 8001102:	460a      	mov	r2, r1
 8001104:	801a      	strh	r2, [r3, #0]
 8001106:	460a      	mov	r2, r1
 8001108:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Mem_Read(&hi2c2, BME280_DEVICE_READ_ADRESS, 0xF7, 1, PData, 3, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2303      	movs	r3, #3
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	22f7      	movs	r2, #247	; 0xf7
 800111a:	21ed      	movs	r1, #237	; 0xed
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <BME280_Get_Uncompansated_Pressure+0x4c>)
 800111e:	f003 fe7b 	bl	8004e18 <HAL_I2C_Mem_Read>

	unCompPressure = (uint32_t)((PData[0] << 12) | (PData[1] << 4) | (PData[2] >> 4));
 8001122:	793b      	ldrb	r3, [r7, #4]
 8001124:	031a      	lsls	r2, r3, #12
 8001126:	797b      	ldrb	r3, [r7, #5]
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4313      	orrs	r3, r2
 800112c:	79ba      	ldrb	r2, [r7, #6]
 800112e:	0912      	lsrs	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	4313      	orrs	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <BME280_Get_Uncompansated_Pressure+0x50>)
 8001136:	6013      	str	r3, [r2, #0]

	return unCompPressure;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <BME280_Get_Uncompansated_Pressure+0x50>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000414 	.word	0x20000414
 8001148:	200002fc 	.word	0x200002fc

0800114c <BME280_Get_Pressure>:

float BME280_Get_Pressure(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
	int32_t adc_P = BME280_Get_Uncompansated_Pressure();
 8001152:	f7ff ffd1 	bl	80010f8 <BME280_Get_Uncompansated_Pressure>
 8001156:	4603      	mov	r3, r0
 8001158:	60bb      	str	r3, [r7, #8]
	int32_t varp1 = 0,varp2 = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
	uint32_t p;
	varp1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
 8001162:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <BME280_Get_Pressure+0x158>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	105b      	asrs	r3, r3, #1
 8001168:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800116c:	607b      	str	r3, [r7, #4]
	varp2 = (((varp1 >> 2) * (varp1 >> 2)) >> 11) * ((int32_t)dig_P6);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	109b      	asrs	r3, r3, #2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	1092      	asrs	r2, r2, #2
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	12db      	asrs	r3, r3, #11
 800117c:	4a4a      	ldr	r2, [pc, #296]	; (80012a8 <BME280_Get_Pressure+0x15c>)
 800117e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	603b      	str	r3, [r7, #0]
	varp2 = varp2 + ((varp1 * ((int32_t)dig_P5)) << 1);
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <BME280_Get_Pressure+0x160>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	fb03 f302 	mul.w	r3, r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	603b      	str	r3, [r7, #0]
	varp2 = (varp2 >> 2) + (((int32_t)dig_P4) << 16);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	109a      	asrs	r2, r3, #2
 80011a2:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <BME280_Get_Pressure+0x164>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	4413      	add	r3, r2
 80011ac:	603b      	str	r3, [r7, #0]
	varp1 = (((dig_P3 * (((varp1 >> 2) * (varp1 >> 2)) >> 13)) >> 3) + ((((int32_t)dig_P2) * varp1) >> 1)) >> 18;
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <BME280_Get_Pressure+0x168>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	4619      	mov	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	109b      	asrs	r3, r3, #2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	1092      	asrs	r2, r2, #2
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	135b      	asrs	r3, r3, #13
 80011c4:	fb03 f301 	mul.w	r3, r3, r1
 80011c8:	10da      	asrs	r2, r3, #3
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <BME280_Get_Pressure+0x16c>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	4619      	mov	r1, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	fb03 f301 	mul.w	r3, r3, r1
 80011d8:	105b      	asrs	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	149b      	asrs	r3, r3, #18
 80011de:	607b      	str	r3, [r7, #4]
	varp1 = ((((32768 + varp1)) * ((int32_t)dig_P1)) >> 15);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011e6:	4a35      	ldr	r2, [pc, #212]	; (80012bc <BME280_Get_Pressure+0x170>)
 80011e8:	8812      	ldrh	r2, [r2, #0]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	13db      	asrs	r3, r3, #15
 80011f0:	607b      	str	r3, [r7, #4]
	if (varp1 == 0)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <BME280_Get_Pressure+0xb2>
		return 0;
 80011f8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80012c0 <BME280_Get_Pressure+0x174>
 80011fc:	e04a      	b.n	8001294 <BME280_Get_Pressure+0x148>

	p = (((uint32_t)(((int32_t)1048576) - adc_P) - (varp2 >> 12))) * 3125;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	425b      	negs	r3, r3
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	1312      	asrs	r2, r2, #12
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	f640 4235 	movw	r2, #3125	; 0xc35
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001214:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001218:	60fb      	str	r3, [r7, #12]
	if (p < 0x80000000)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db06      	blt.n	800122e <BME280_Get_Pressure+0xe2>
		p = (p << 1) / ((uint32_t)varp1);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	005a      	lsls	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e005      	b.n	800123a <BME280_Get_Pressure+0xee>
	else
		p = (p / (uint32_t)varp1) * 2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	60fb      	str	r3, [r7, #12]

	varp1 = (((int32_t)dig_P9) * ((int32_t)(((p >> 3) * (p >> 3)) >> 13))) >>12;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <BME280_Get_Pressure+0x178>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	4619      	mov	r1, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	08d2      	lsrs	r2, r2, #3
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	0b5b      	lsrs	r3, r3, #13
 8001250:	fb03 f301 	mul.w	r3, r3, r1
 8001254:	131b      	asrs	r3, r3, #12
 8001256:	607b      	str	r3, [r7, #4]
	varp2 = (((int32_t)(p >> 2)) * ((int32_t)dig_P8)) >> 13;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <BME280_Get_Pressure+0x17c>)
 8001260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001264:	fb03 f302 	mul.w	r3, r3, r2
 8001268:	135b      	asrs	r3, r3, #13
 800126a:	603b      	str	r3, [r7, #0]
	p = (uint32_t)((int32_t)p + ((varp1 + varp2 + dig_P7) >> 4));
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <BME280_Get_Pressure+0x180>)
 8001274:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001278:	4413      	add	r3, r2
 800127a:	111a      	asrs	r2, r3, #4
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
	return (float)p / 100.0;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80012d0 <BME280_Get_Pressure+0x184>
 8001290:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001294:	eef0 7a47 	vmov.f32	s15, s14
}
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000314 	.word	0x20000314
 80012a8:	20000310 	.word	0x20000310
 80012ac:	200002f8 	.word	0x200002f8
 80012b0:	200002f0 	.word	0x200002f0
 80012b4:	20000302 	.word	0x20000302
 80012b8:	200002ee 	.word	0x200002ee
 80012bc:	20000300 	.word	0x20000300
 80012c0:	00000000 	.word	0x00000000
 80012c4:	2000030c 	.word	0x2000030c
 80012c8:	20000304 	.word	0x20000304
 80012cc:	200002e4 	.word	0x200002e4
 80012d0:	42c80000 	.word	0x42c80000
 80012d4:	00000000 	.word	0x00000000

080012d8 <BME280_Get_Altitude>:

float BME280_Get_Altitude()
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	float BPressure = BME280_Get_Pressure();
 80012de:	f7ff ff35 	bl	800114c <BME280_Get_Pressure>
 80012e2:	ed87 0a01 	vstr	s0, [r7, #4]
	float temperature = BME280_Get_Temperature();
 80012e6:	f7ff feb9 	bl	800105c <BME280_Get_Temperature>
 80012ea:	ed87 0a00 	vstr	s0, [r7]
	//Altitude = 44330 * (1 - pow((BPressure / 1013.25),(1/5.255)));
	Altitude = ((pow((P0/BPressure), (1/5.257))-1) * (temperature + 273.15)) / 0.0065;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <BME280_Get_Altitude+0xc8>)
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012fc:	ee16 0a90 	vmov	r0, s13
 8001300:	f7ff f922 	bl	8000548 <__aeabi_f2d>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001388 <BME280_Get_Altitude+0xb0>
 800130c:	ec44 3b10 	vmov	d0, r3, r4
 8001310:	f00a fecc 	bl	800c0ac <pow>
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <BME280_Get_Altitude+0xcc>)
 800131e:	f7fe ffb3 	bl	8000288 <__aeabi_dsub>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4625      	mov	r5, r4
 8001328:	461c      	mov	r4, r3
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7ff f90c 	bl	8000548 <__aeabi_f2d>
 8001330:	a317      	add	r3, pc, #92	; (adr r3, 8001390 <BME280_Get_Altitude+0xb8>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ffa9 	bl	800028c <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4620      	mov	r0, r4
 8001340:	4629      	mov	r1, r5
 8001342:	f7ff f959 	bl	80005f8 <__aeabi_dmul>
 8001346:	4603      	mov	r3, r0
 8001348:	460c      	mov	r4, r1
 800134a:	4618      	mov	r0, r3
 800134c:	4621      	mov	r1, r4
 800134e:	a312      	add	r3, pc, #72	; (adr r3, 8001398 <BME280_Get_Altitude+0xc0>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff fa7a 	bl	800084c <__aeabi_ddiv>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4618      	mov	r0, r3
 800135e:	4621      	mov	r1, r4
 8001360:	f7ff fc42 	bl	8000be8 <__aeabi_d2f>
 8001364:	4602      	mov	r2, r0
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <BME280_Get_Altitude+0xd0>)
 8001368:	601a      	str	r2, [r3, #0]
	return (Altitude - BASE);
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <BME280_Get_Altitude+0xd0>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <BME280_Get_Altitude+0xd4>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	7dee2d4a 	.word	0x7dee2d4a
 800138c:	3fc85936 	.word	0x3fc85936
 8001390:	66666666 	.word	0x66666666
 8001394:	40711266 	.word	0x40711266
 8001398:	76c8b439 	.word	0x76c8b439
 800139c:	3f7a9fbe 	.word	0x3f7a9fbe
 80013a0:	20000000 	.word	0x20000000
 80013a4:	3ff00000 	.word	0x3ff00000
 80013a8:	200002f4 	.word	0x200002f4
 80013ac:	20000220 	.word	0x20000220

080013b0 <Array_sort_BME>:

float Array_sort_BME(float *array, int n) {
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e037      	b.n	800143e <Array_sort_BME+0x8e>
		for (j = 0; j < n - 1; j++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	e02c      	b.n	800142e <Array_sort_BME+0x7e>
			if (array[j] > array[j + 1]) {
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	3301      	adds	r3, #1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dd17      	ble.n	8001428 <Array_sort_BME+0x78>
				temp = array[j];
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	3301      	adds	r3, #1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	441a      	add	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	440b      	add	r3, r1
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	3301      	adds	r3, #1
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3b01      	subs	r3, #1
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbcd      	blt.n	80013d4 <Array_sort_BME+0x24>
	for (i = 0; i < n; i++) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbc3      	blt.n	80013ce <Array_sort_BME+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	0fda      	lsrs	r2, r3, #31
 800144a:	4413      	add	r3, r2
 800144c:	105b      	asrs	r3, r3, #1
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ee07 3a90 	vmov	s15, r3
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <BME280_ALT_MEDIANFILTER>:

float BME280_ALT_MEDIANFILTER(void)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b0a1      	sub	sp, #132	; 0x84
 800146c:	af00      	add	r7, sp, #0
	float AL[filter_number] = {0}, result = 0.0;
 800146e:	463b      	mov	r3, r7
 8001470:	2278      	movs	r2, #120	; 0x78
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f007 f9a7 	bl	80087c8 <memset>
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	67bb      	str	r3, [r7, #120]	; 0x78
	for (uint8_t i = 0 ; i < sizeof(AL) / sizeof(AL[0]) ; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001486:	e011      	b.n	80014ac <BME280_ALT_MEDIANFILTER+0x44>
		AL[i] = BME280_Get_Altitude();
 8001488:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 800148c:	f7ff ff24 	bl	80012d8 <BME280_Get_Altitude>
 8001490:	eef0 7a40 	vmov.f32	s15, s0
 8001494:	00a3      	lsls	r3, r4, #2
 8001496:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800149a:	4413      	add	r3, r2
 800149c:	3b80      	subs	r3, #128	; 0x80
 800149e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0 ; i < sizeof(AL) / sizeof(AL[0]) ; i++)
 80014a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80014a6:	3301      	adds	r3, #1
 80014a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80014ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80014b0:	2b1d      	cmp	r3, #29
 80014b2:	d9e9      	bls.n	8001488 <BME280_ALT_MEDIANFILTER+0x20>
	result = Array_sort_BME(AL,sizeof(AL) / sizeof(AL[0]));
 80014b4:	463b      	mov	r3, r7
 80014b6:	211e      	movs	r1, #30
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff79 	bl	80013b0 <Array_sort_BME>
 80014be:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	return result;
 80014c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014c4:	ee07 3a90 	vmov	s15, r3
}
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	3784      	adds	r7, #132	; 0x84
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
	...

080014d4 <MPU6050_Init>:

float AcceErrorX = .0, AcceErrorY = .0, GyroErrorX = .0, GyroErrorY = .0, GyroErrorZ = .0;


void MPU6050_Init()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, MPU_6050_WRITE_ADRESS, 1, MPU_6050_TIMEOUT) != HAL_OK)
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	2201      	movs	r2, #1
 80014dc:	21d0      	movs	r1, #208	; 0xd0
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <MPU6050_Init+0x2c>)
 80014e0:	f003 fdb4 	bl	800504c <HAL_I2C_IsDeviceReady>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <MPU6050_Init+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MPU6050_Init+0x30>)
 80014f2:	f003 fabb 	bl	8004a6c <HAL_GPIO_WritePin>
	}

	MPU6050_SetCalibration();
 80014f6:	f000 f807 	bl	8001508 <MPU6050_SetCalibration>
	//CalculateError();
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000414 	.word	0x20000414
 8001504:	48000800 	.word	0x48000800

08001508 <MPU6050_SetCalibration>:

void MPU6050_SetCalibration()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af04      	add	r7, sp, #16
	// This register allows the user to configure the power mode and clock source.
	HAL_I2C_Mem_Write(&hi2c2, MPU_6050_WRITE_ADRESS, PWR_MGMT_1, 1, &PWR_MGMT_1_RATE, 1, MPU_6050_TIMEOUT);
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MPU6050_SetCalibration+0x84>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29a      	uxth	r2, r3
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	2301      	movs	r3, #1
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MPU6050_SetCalibration+0x88>)
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	21d0      	movs	r1, #208	; 0xd0
 8001524:	481b      	ldr	r0, [pc, #108]	; (8001594 <MPU6050_SetCalibration+0x8c>)
 8001526:	f003 fb63 	bl	8004bf0 <HAL_I2C_Mem_Write>

	// The Sample Rate is determined by dividing the gyroscope output rate by this value.
	HAL_I2C_Mem_Write(&hi2c2, MPU_6050_WRITE_ADRESS, SMPRT_DIV, 1, &SMPRT_DIV_RATE, 1, MPU_6050_TIMEOUT);
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MPU6050_SetCalibration+0x90>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b29a      	uxth	r2, r3
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MPU6050_SetCalibration+0x94>)
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	21d0      	movs	r1, #208	; 0xd0
 8001540:	4814      	ldr	r0, [pc, #80]	; (8001594 <MPU6050_SetCalibration+0x8c>)
 8001542:	f003 fb55 	bl	8004bf0 <HAL_I2C_Mem_Write>

	// This register is used to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
	HAL_I2C_Mem_Write(&hi2c2, MPU_6050_WRITE_ADRESS, GYRO_CONFIG, 1, &GYRO_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MPU6050_SetCalibration+0x98>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2301      	movs	r3, #1
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MPU6050_SetCalibration+0x9c>)
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	21d0      	movs	r1, #208	; 0xd0
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <MPU6050_SetCalibration+0x8c>)
 800155e:	f003 fb47 	bl	8004bf0 <HAL_I2C_Mem_Write>

	// This register is used to trigger accelerometer self test and configure the accelerometer full scale range.
	HAL_I2C_Mem_Write(&hi2c2, MPU_6050_WRITE_ADRESS, ACCEL_CONFIG, 1, &ACCEL_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MPU6050_SetCalibration+0xa0>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b29a      	uxth	r2, r3
 8001568:	2364      	movs	r3, #100	; 0x64
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MPU6050_SetCalibration+0xa4>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	21d0      	movs	r1, #208	; 0xd0
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <MPU6050_SetCalibration+0x8c>)
 800157a:	f003 fb39 	bl	8004bf0 <HAL_I2C_Mem_Write>

	HAL_Delay(50);
 800157e:	2032      	movs	r0, #50	; 0x32
 8001580:	f002 fdc0 	bl	8004104 <HAL_Delay>

}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000007 	.word	0x20000007
 8001590:	20000233 	.word	0x20000233
 8001594:	20000414 	.word	0x20000414
 8001598:	20000004 	.word	0x20000004
 800159c:	2000000a 	.word	0x2000000a
 80015a0:	20000005 	.word	0x20000005
 80015a4:	2000000b 	.word	0x2000000b
 80015a8:	20000006 	.word	0x20000006
 80015ac:	2000000c 	.word	0x2000000c

080015b0 <MPU6050_Read_Accelarition>:

void MPU6050_Read_Accelarition()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, MPU_6050_READ_ADRESS, MPU_6050_ACCELERATION_REG, 1, Acc, MPU_6050_ACCELERATION_LENGTH, MPU_6050_TIMEOUT);
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MPU6050_Read_Accelarition+0xb8>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	2364      	movs	r3, #100	; 0x64
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2306      	movs	r3, #6
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	21d1      	movs	r1, #209	; 0xd1
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <MPU6050_Read_Accelarition+0xc0>)
 80015ce:	f003 fc23 	bl	8004e18 <HAL_I2C_Mem_Read>
	//HAL_Delay(20);
	//HAL_Delay(12);
	Accx = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4921      	ldr	r1, [pc, #132]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MPU6050_Read_Accelarition+0xc8>)
 80015f2:	801a      	strh	r2, [r3, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3302      	adds	r3, #2
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 80015fe:	701a      	strb	r2, [r3, #0]
	Accy = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 8001608:	5c9b      	ldrb	r3, [r3, r2]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	4915      	ldr	r1, [pc, #84]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MPU6050_Read_Accelarition+0xcc>)
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3302      	adds	r3, #2
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 800162c:	701a      	strb	r2, [r3, #0]
	Accz = (int16_t)((Acc[count] << 8) | (Acc[count + 1])); count +=2;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 8001636:	5c9b      	ldrb	r3, [r3, r2]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <MPU6050_Read_Accelarition+0xbc>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21a      	sxth	r2, r3
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MPU6050_Read_Accelarition+0xd0>)
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 800165a:	701a      	strb	r2, [r3, #0]
	count = 0;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <MPU6050_Read_Accelarition+0xc4>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000008 	.word	0x20000008
 800166c:	20000224 	.word	0x20000224
 8001670:	20000414 	.word	0x20000414
 8001674:	20000232 	.word	0x20000232
 8001678:	2000031a 	.word	0x2000031a
 800167c:	20000318 	.word	0x20000318
 8001680:	2000031e 	.word	0x2000031e

08001684 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, MPU_6050_READ_ADRESS, MPU_6050_GYRO_REG, 1, Gyro, MPU_6050_GYRO_LENGTH, MPU_6050_TIMEOUT);
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <MPU6050_Read_Gyro+0xb8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b29a      	uxth	r2, r3
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2306      	movs	r3, #6
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	21d1      	movs	r1, #209	; 0xd1
 80016a0:	4828      	ldr	r0, [pc, #160]	; (8001744 <MPU6050_Read_Gyro+0xc0>)
 80016a2:	f003 fbb9 	bl	8004e18 <HAL_I2C_Mem_Read>
	//HAL_Delay(20);
	//HAL_Delay(20);
	Gyrox = (int16_t)((Gyro[count] << 8) | (Gyro[count + 1])); count +=2;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4921      	ldr	r1, [pc, #132]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 80016bc:	5ccb      	ldrb	r3, [r1, r3]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <MPU6050_Read_Gyro+0xc8>)
 80016c6:	801a      	strh	r2, [r3, #0]
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	3302      	adds	r3, #2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016d2:	701a      	strb	r2, [r3, #0]
	Gyroy = (int16_t)((Gyro[count] << 8) | (Gyro[count + 1])); count +=2;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4915      	ldr	r1, [pc, #84]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MPU6050_Read_Gyro+0xcc>)
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3302      	adds	r3, #2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 8001700:	701a      	strb	r2, [r3, #0]
	Gyroz = (int16_t)((Gyro[count] << 8) | (Gyro[count + 1])); count +=2;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21a      	sxth	r2, r3
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <MPU6050_Read_Gyro+0xbc>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21a      	sxth	r2, r3
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MPU6050_Read_Gyro+0xd0>)
 8001722:	801a      	strh	r2, [r3, #0]
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3302      	adds	r3, #2
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 800172e:	701a      	strb	r2, [r3, #0]
	count = 0;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <MPU6050_Read_Gyro+0xc4>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000009 	.word	0x20000009
 8001740:	2000022c 	.word	0x2000022c
 8001744:	20000414 	.word	0x20000414
 8001748:	20000232 	.word	0x20000232
 800174c:	2000031c 	.word	0x2000031c
 8001750:	20000322 	.word	0x20000322
 8001754:	20000320 	.word	0x20000320

08001758 <MPU6050_AccX>:

float MPU6050_AccX()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 800175c:	f7ff ff28 	bl	80015b0 <MPU6050_Read_Accelarition>
	return (float)Accx / 4096.0;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <MPU6050_AccX+0x28>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001784 <MPU6050_AccX+0x2c>
 8001772:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001776:	eef0 7a66 	vmov.f32	s15, s13
}
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000031a 	.word	0x2000031a
 8001784:	45800000 	.word	0x45800000

08001788 <MPU6050_AccY>:
float MPU6050_AccY()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 800178c:	f7ff ff10 	bl	80015b0 <MPU6050_Read_Accelarition>
	return (float)Accy / 4096.0;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MPU6050_AccY+0x28>)
 8001792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017b4 <MPU6050_AccY+0x2c>
 80017a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017a6:	eef0 7a66 	vmov.f32	s15, s13
}
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000318 	.word	0x20000318
 80017b4:	45800000 	.word	0x45800000

080017b8 <MPU6050_AccZ>:
float MPU6050_AccZ()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	MPU6050_Read_Accelarition();
 80017bc:	f7ff fef8 	bl	80015b0 <MPU6050_Read_Accelarition>
	return (float)Accz / 4096.0;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MPU6050_AccZ+0x28>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017e4 <MPU6050_AccZ+0x2c>
 80017d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000031e 	.word	0x2000031e
 80017e4:	45800000 	.word	0x45800000

080017e8 <MPU6050_GyroX>:
float MPU6050_GyroX()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	MPU6050_Read_Gyro();
 80017ec:	f7ff ff4a 	bl	8001684 <MPU6050_Read_Gyro>
	return (float)Gyrox / 65.5;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MPU6050_GyroX+0x28>)
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001814 <MPU6050_GyroX+0x2c>
 8001802:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001806:	eef0 7a66 	vmov.f32	s15, s13
}
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000031c 	.word	0x2000031c
 8001814:	42830000 	.word	0x42830000

08001818 <MPU6050_GyroY>:
float MPU6050_GyroY()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	MPU6050_Read_Gyro();
 800181c:	f7ff ff32 	bl	8001684 <MPU6050_Read_Gyro>
	return (float)Gyroy / 65.5;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MPU6050_GyroY+0x28>)
 8001822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001844 <MPU6050_GyroY+0x2c>
 8001832:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001836:	eef0 7a66 	vmov.f32	s15, s13
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000322 	.word	0x20000322
 8001844:	42830000 	.word	0x42830000

08001848 <MPU6050_GyroZ>:
float MPU6050_GyroZ()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	MPU6050_Read_Gyro();
 800184c:	f7ff ff1a 	bl	8001684 <MPU6050_Read_Gyro>
	return (float)Gyroz / 65.5;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MPU6050_GyroZ+0x28>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001874 <MPU6050_GyroZ+0x2c>
 8001862:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001866:	eef0 7a66 	vmov.f32	s15, s13
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000320 	.word	0x20000320
 8001874:	42830000 	.word	0x42830000

08001878 <Array_sort_MPU>:

float Array_sort_MPU(float *array, int n) {
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e037      	b.n	8001906 <Array_sort_MPU+0x8e>
		for (j = 0; j < n - 1; j++) {
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e02c      	b.n	80018f6 <Array_sort_MPU+0x7e>
			if (array[j] > array[j + 1]) {
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	3301      	adds	r3, #1
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	dd17      	ble.n	80018f0 <Array_sort_MPU+0x78>
				temp = array[j];
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	3301      	adds	r3, #1
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	441a      	add	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	440b      	add	r3, r1
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3301      	adds	r3, #1
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	3301      	adds	r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbcd      	blt.n	800189c <Array_sort_MPU+0x24>
	for (i = 0; i < n; i++) {
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbc3      	blt.n	8001896 <Array_sort_MPU+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	0fda      	lsrs	r2, r3, #31
 8001912:	4413      	add	r3, r2
 8001914:	105b      	asrs	r3, r3, #1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ee07 3a90 	vmov	s15, r3
}
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <MEDIAN_AXIS_FILTER>:

float MEDIAN_AXIS_FILTER(char device, char axis)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b095      	sub	sp, #84	; 0x54
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	float X[5] = {0}, Y[5] = {0}, Z[5] = {0};
 8001940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	f107 0308 	add.w	r3, r7, #8
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
	switch (device) {
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b41      	cmp	r3, #65	; 0x41
 8001974:	d003      	beq.n	800197e <MEDIAN_AXIS_FILTER+0x4e>
 8001976:	2b47      	cmp	r3, #71	; 0x47
 8001978:	f000 8094 	beq.w	8001aa4 <MEDIAN_AXIS_FILTER+0x174>
 800197c:	e125      	b.n	8001bca <MEDIAN_AXIS_FILTER+0x29a>
	case 'A':
	switch (axis) {
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b59      	cmp	r3, #89	; 0x59
 8001982:	d026      	beq.n	80019d2 <MEDIAN_AXIS_FILTER+0xa2>
 8001984:	2b5a      	cmp	r3, #90	; 0x5a
 8001986:	d047      	beq.n	8001a18 <MEDIAN_AXIS_FILTER+0xe8>
 8001988:	2b58      	cmp	r3, #88	; 0x58
 800198a:	d168      	bne.n	8001a5e <MEDIAN_AXIS_FILTER+0x12e>
	case 'X':
		for (uint8_t i = 0; i < 5; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001992:	e011      	b.n	80019b8 <MEDIAN_AXIS_FILTER+0x88>
			X[i] = MPU6050_AccX();
 8001994:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8001998:	f7ff fede 	bl	8001758 <MPU6050_AccX>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	00a3      	lsls	r3, r4, #2
 80019a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80019a6:	4413      	add	r3, r2
 80019a8:	3b20      	subs	r3, #32
 80019aa:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 80019ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019b2:	3301      	adds	r3, #1
 80019b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80019b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d9e9      	bls.n	8001994 <MEDIAN_AXIS_FILTER+0x64>
		return Array_sort_MPU(X, 5);
 80019c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c4:	2105      	movs	r1, #5
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff56 	bl	8001878 <Array_sort_MPU>
 80019cc:	eef0 7a40 	vmov.f32	s15, s0
 80019d0:	e11d      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
		break;
	case 'Y':
		for (uint8_t i = 0; i < 5; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80019d8:	e011      	b.n	80019fe <MEDIAN_AXIS_FILTER+0xce>
			Y[i] = MPU6050_AccY();
 80019da:	f897 404e 	ldrb.w	r4, [r7, #78]	; 0x4e
 80019de:	f7ff fed3 	bl	8001788 <MPU6050_AccY>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	00a3      	lsls	r3, r4, #2
 80019e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80019ec:	4413      	add	r3, r2
 80019ee:	3b34      	subs	r3, #52	; 0x34
 80019f0:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 80019f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80019f8:	3301      	adds	r3, #1
 80019fa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80019fe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d9e9      	bls.n	80019da <MEDIAN_AXIS_FILTER+0xaa>
		return Array_sort_MPU(Y, 5);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2105      	movs	r1, #5
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff33 	bl	8001878 <Array_sort_MPU>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	e0fa      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
		break;
	case 'Z':
		for (uint8_t i = 0; i < 5; i++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001a1e:	e011      	b.n	8001a44 <MEDIAN_AXIS_FILTER+0x114>
			Z[i] = MPU6050_AccZ();
 8001a20:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8001a24:	f7ff fec8 	bl	80017b8 <MPU6050_AccZ>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	00a3      	lsls	r3, r4, #2
 8001a2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a32:	4413      	add	r3, r2
 8001a34:	3b48      	subs	r3, #72	; 0x48
 8001a36:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001a44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d9e9      	bls.n	8001a20 <MEDIAN_AXIS_FILTER+0xf0>
		return Array_sort_MPU(Z, 5);
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	2105      	movs	r1, #5
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff10 	bl	8001878 <Array_sort_MPU>
 8001a58:	eef0 7a40 	vmov.f32	s15, s0
 8001a5c:	e0d7      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
		break;
	default:
		for (uint8_t i = 0; i < 5; i++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001a64:	e011      	b.n	8001a8a <MEDIAN_AXIS_FILTER+0x15a>
			Z[i] = MPU6050_AccZ();
 8001a66:	f897 404c 	ldrb.w	r4, [r7, #76]	; 0x4c
 8001a6a:	f7ff fea5 	bl	80017b8 <MPU6050_AccZ>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
 8001a72:	00a3      	lsls	r3, r4, #2
 8001a74:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b48      	subs	r3, #72	; 0x48
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001a80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a84:	3301      	adds	r3, #1
 8001a86:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001a8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d9e9      	bls.n	8001a66 <MEDIAN_AXIS_FILTER+0x136>
		return Array_sort_MPU(Z, 5);
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	2105      	movs	r1, #5
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff feed 	bl	8001878 <Array_sort_MPU>
 8001a9e:	eef0 7a40 	vmov.f32	s15, s0
 8001aa2:	e0b4      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
	}
	break;
	case 'G':
	switch (axis) {
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
 8001aa6:	2b59      	cmp	r3, #89	; 0x59
 8001aa8:	d026      	beq.n	8001af8 <MEDIAN_AXIS_FILTER+0x1c8>
 8001aaa:	2b5a      	cmp	r3, #90	; 0x5a
 8001aac:	d047      	beq.n	8001b3e <MEDIAN_AXIS_FILTER+0x20e>
 8001aae:	2b58      	cmp	r3, #88	; 0x58
 8001ab0:	d168      	bne.n	8001b84 <MEDIAN_AXIS_FILTER+0x254>
	case 'X':
		for (uint8_t i = 0; i < 5; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001ab8:	e011      	b.n	8001ade <MEDIAN_AXIS_FILTER+0x1ae>
			X[i] = MPU6050_GyroX();
 8001aba:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8001abe:	f7ff fe93 	bl	80017e8 <MPU6050_GyroX>
 8001ac2:	eef0 7a40 	vmov.f32	s15, s0
 8001ac6:	00a3      	lsls	r3, r4, #2
 8001ac8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001acc:	4413      	add	r3, r2
 8001ace:	3b20      	subs	r3, #32
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001ad4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001ade:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d9e9      	bls.n	8001aba <MEDIAN_AXIS_FILTER+0x18a>
		return Array_sort_MPU(X, 5);
 8001ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aea:	2105      	movs	r1, #5
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fec3 	bl	8001878 <Array_sort_MPU>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
 8001af6:	e08a      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
		break;
	case 'Y':
		for (uint8_t i = 0; i < 5; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001afe:	e011      	b.n	8001b24 <MEDIAN_AXIS_FILTER+0x1f4>
			Y[i] = MPU6050_GyroY();
 8001b00:	f897 404a 	ldrb.w	r4, [r7, #74]	; 0x4a
 8001b04:	f7ff fe88 	bl	8001818 <MPU6050_GyroY>
 8001b08:	eef0 7a40 	vmov.f32	s15, s0
 8001b0c:	00a3      	lsls	r3, r4, #2
 8001b0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b12:	4413      	add	r3, r2
 8001b14:	3b34      	subs	r3, #52	; 0x34
 8001b16:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001b1a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001b24:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d9e9      	bls.n	8001b00 <MEDIAN_AXIS_FILTER+0x1d0>
		return Array_sort_MPU(Y, 5);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2105      	movs	r1, #5
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fea0 	bl	8001878 <Array_sort_MPU>
 8001b38:	eef0 7a40 	vmov.f32	s15, s0
 8001b3c:	e067      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
		break;
	case 'Z':
		for (uint8_t i = 0; i < 5; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001b44:	e011      	b.n	8001b6a <MEDIAN_AXIS_FILTER+0x23a>
			Z[i] = MPU6050_GyroZ();
 8001b46:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
 8001b4a:	f7ff fe7d 	bl	8001848 <MPU6050_GyroZ>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	00a3      	lsls	r3, r4, #2
 8001b54:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b48      	subs	r3, #72	; 0x48
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001b60:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b64:	3301      	adds	r3, #1
 8001b66:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001b6a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d9e9      	bls.n	8001b46 <MEDIAN_AXIS_FILTER+0x216>
		return Array_sort_MPU(Z, 5);
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2105      	movs	r1, #5
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe7d 	bl	8001878 <Array_sort_MPU>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	e044      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
		break;
	default:
		for (uint8_t i = 0; i < 5; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001b8a:	e011      	b.n	8001bb0 <MEDIAN_AXIS_FILTER+0x280>
			Z[i] = MPU6050_GyroZ();
 8001b8c:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8001b90:	f7ff fe5a 	bl	8001848 <MPU6050_GyroZ>
 8001b94:	eef0 7a40 	vmov.f32	s15, s0
 8001b98:	00a3      	lsls	r3, r4, #2
 8001b9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b48      	subs	r3, #72	; 0x48
 8001ba2:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001ba6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001baa:	3301      	adds	r3, #1
 8001bac:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001bb0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d9e9      	bls.n	8001b8c <MEDIAN_AXIS_FILTER+0x25c>
		return Array_sort_MPU(Z, 5);
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fe5a 	bl	8001878 <Array_sort_MPU>
 8001bc4:	eef0 7a40 	vmov.f32	s15, s0
 8001bc8:	e021      	b.n	8001c0e <MEDIAN_AXIS_FILTER+0x2de>
	}
	break;
	default:
		for (uint8_t i = 0; i < 5; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001bd0:	e011      	b.n	8001bf6 <MEDIAN_AXIS_FILTER+0x2c6>
			Z[i] = MPU6050_AccZ();
 8001bd2:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8001bd6:	f7ff fdef 	bl	80017b8 <MPU6050_AccZ>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	00a3      	lsls	r3, r4, #2
 8001be0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001be4:	4413      	add	r3, r2
 8001be6:	3b48      	subs	r3, #72	; 0x48
 8001be8:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 5; i++)
 8001bec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001bf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d9e9      	bls.n	8001bd2 <MEDIAN_AXIS_FILTER+0x2a2>
		return Array_sort_MPU(Z, 5);
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	2105      	movs	r1, #5
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe37 	bl	8001878 <Array_sort_MPU>
 8001c0a:	eef0 7a40 	vmov.f32	s15, s0
	}
}
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	3754      	adds	r7, #84	; 0x54
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}

08001c18 <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 512; i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c24:	e1a6      	b.n	8001f74 <HAL_UART_RxCpltCallback+0x35c>

		if (RX_BUF[i] == '$' && RX_BUF[i + 1] == 'G' && RX_BUF[i + 2] == 'P'
 8001c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c28:	4ab7      	ldr	r2, [pc, #732]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	2b24      	cmp	r3, #36	; 0x24
 8001c2e:	f040 819e 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
 8001c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c34:	3301      	adds	r3, #1
 8001c36:	4ab4      	ldr	r2, [pc, #720]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	2b47      	cmp	r3, #71	; 0x47
 8001c3c:	f040 8197 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
 8001c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c42:	3302      	adds	r3, #2
 8001c44:	4ab0      	ldr	r2, [pc, #704]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	2b50      	cmp	r3, #80	; 0x50
 8001c4a:	f040 8190 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
				&& RX_BUF[i + 3] == 'G' && RX_BUF[i + 4] == 'G'
 8001c4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c50:	3303      	adds	r3, #3
 8001c52:	4aad      	ldr	r2, [pc, #692]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	2b47      	cmp	r3, #71	; 0x47
 8001c58:	f040 8189 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
 8001c5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4aa9      	ldr	r2, [pc, #676]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	2b47      	cmp	r3, #71	; 0x47
 8001c66:	f040 8182 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
				&& RX_BUF[i + 5] == 'A' && RX_BUF[i + 6] == ',') {
 8001c6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c6c:	3305      	adds	r3, #5
 8001c6e:	4aa6      	ldr	r2, [pc, #664]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	2b41      	cmp	r3, #65	; 0x41
 8001c74:	f040 817b 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
 8001c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c7a:	3306      	adds	r3, #6
 8001c7c:	4aa2      	ldr	r2, [pc, #648]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	2b2c      	cmp	r3, #44	; 0x2c
 8001c82:	f040 8174 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>
			for (uint8_t n = 0; n < sizeof(GPGGA); n++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c8c:	e023      	b.n	8001cd6 <HAL_UART_RxCpltCallback+0xbe>
				GPGGA[n] = RX_BUF[i + n];
 8001c8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c94:	441a      	add	r2, r3
 8001c96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c9a:	499b      	ldr	r1, [pc, #620]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001c9c:	5c89      	ldrb	r1, [r1, r2]
 8001c9e:	4a9b      	ldr	r2, [pc, #620]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001ca0:	54d1      	strb	r1, [r2, r3]
				if (n > 5 && GPGGA[n - 1] == '\r' && GPGGA[n] == '\n') {
 8001ca2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d910      	bls.n	8001ccc <HAL_UART_RxCpltCallback+0xb4>
 8001caa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a96      	ldr	r2, [pc, #600]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	2b0d      	cmp	r3, #13
 8001cb6:	d109      	bne.n	8001ccc <HAL_UART_RxCpltCallback+0xb4>
 8001cb8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cbc:	4a93      	ldr	r2, [pc, #588]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d103      	bne.n	8001ccc <HAL_UART_RxCpltCallback+0xb4>
					GGA = 1;
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_UART_RxCpltCallback+0x2f8>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
					break;
 8001cca:	e008      	b.n	8001cde <HAL_UART_RxCpltCallback+0xc6>
			for (uint8_t n = 0; n < sizeof(GPGGA); n++) {
 8001ccc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001cd6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cda:	2b4a      	cmp	r3, #74	; 0x4a
 8001cdc:	d9d7      	bls.n	8001c8e <HAL_UART_RxCpltCallback+0x76>
				}
			}
			if (GGA == 1) {
 8001cde:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <HAL_UART_RxCpltCallback+0x2f8>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	f040 8143 	bne.w	8001f6e <HAL_UART_RxCpltCallback+0x356>

				uint8_t v = 0, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, pos5 = 0,
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	737b      	strb	r3, [r7, #13]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001d04:	2300      	movs	r3, #0
 8001d06:	733b      	strb	r3, [r7, #12]
						ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3020 	strb.w	r3, [r7, #32]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	77fb      	strb	r3, [r7, #31]
 8001d12:	2300      	movs	r3, #0
 8001d14:	77bb      	strb	r3, [r7, #30]
 8001d16:	2300      	movs	r3, #0
 8001d18:	777b      	strb	r3, [r7, #29]
				for (uint8_t n = 0; n < sizeof(GPGGA); n++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	773b      	strb	r3, [r7, #28]
 8001d1e:	e122      	b.n	8001f66 <HAL_UART_RxCpltCallback+0x34e>
					if (GPGGA[n] == ',')
 8001d20:	7f3b      	ldrb	r3, [r7, #28]
 8001d22:	4a7a      	ldr	r2, [pc, #488]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	2b2c      	cmp	r3, #44	; 0x2c
 8001d28:	d104      	bne.n	8001d34 <HAL_UART_RxCpltCallback+0x11c>
						v++;
 8001d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					if (v == 1 && ok1 == 0) {
 8001d34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d109      	bne.n	8001d50 <HAL_UART_RxCpltCallback+0x138>
 8001d3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_UART_RxCpltCallback+0x138>
						pos1 = n;
 8001d44:	7f3b      	ldrb	r3, [r7, #28]
 8001d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						ok1 = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3020 	strb.w	r3, [r7, #32]
					}
					if (v == 2 && ok2 == 0) {
 8001d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d11f      	bne.n	8001d98 <HAL_UART_RxCpltCallback+0x180>
 8001d58:	7ffb      	ldrb	r3, [r7, #31]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11c      	bne.n	8001d98 <HAL_UART_RxCpltCallback+0x180>
						pos2 = n;
 8001d5e:	7f3b      	ldrb	r3, [r7, #28]
 8001d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	76fb      	strb	r3, [r7, #27]
 8001d68:	e00c      	b.n	8001d84 <HAL_UART_RxCpltCallback+0x16c>
							TIME[count] = GPGGA[pos1 + count + 1];
 8001d6a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d6e:	7efb      	ldrb	r3, [r7, #27]
 8001d70:	4413      	add	r3, r2
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	7efb      	ldrb	r3, [r7, #27]
 8001d76:	4965      	ldr	r1, [pc, #404]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001d78:	5c89      	ldrb	r1, [r1, r2]
 8001d7a:	4a66      	ldr	r2, [pc, #408]	; (8001f14 <HAL_UART_RxCpltCallback+0x2fc>)
 8001d7c:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 8001d7e:	7efb      	ldrb	r3, [r7, #27]
 8001d80:	3301      	adds	r3, #1
 8001d82:	76fb      	strb	r3, [r7, #27]
 8001d84:	7efa      	ldrb	r2, [r7, #27]
 8001d86:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d8e:	1acb      	subs	r3, r1, r3
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbea      	blt.n	8001d6a <HAL_UART_RxCpltCallback+0x152>
						ok2 = 1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
					}
					if (v == 3 && ok3 == 0) {
 8001d98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d11d      	bne.n	8001ddc <HAL_UART_RxCpltCallback+0x1c4>
 8001da0:	7fbb      	ldrb	r3, [r7, #30]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d11a      	bne.n	8001ddc <HAL_UART_RxCpltCallback+0x1c4>
						pos3 = n;
 8001da6:	7f3b      	ldrb	r3, [r7, #28]
 8001da8:	737b      	strb	r3, [r7, #13]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	76bb      	strb	r3, [r7, #26]
 8001dae:	e00c      	b.n	8001dca <HAL_UART_RxCpltCallback+0x1b2>
							LAT[count] = GPGGA[pos2 + count + 1];
 8001db0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001db4:	7ebb      	ldrb	r3, [r7, #26]
 8001db6:	4413      	add	r3, r2
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	7ebb      	ldrb	r3, [r7, #26]
 8001dbc:	4953      	ldr	r1, [pc, #332]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001dbe:	5c89      	ldrb	r1, [r1, r2]
 8001dc0:	4a55      	ldr	r2, [pc, #340]	; (8001f18 <HAL_UART_RxCpltCallback+0x300>)
 8001dc2:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 8001dc4:	7ebb      	ldrb	r3, [r7, #26]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	76bb      	strb	r3, [r7, #26]
 8001dca:	7eba      	ldrb	r2, [r7, #26]
 8001dcc:	7b79      	ldrb	r1, [r7, #13]
 8001dce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dd2:	1acb      	subs	r3, r1, r3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbeb      	blt.n	8001db0 <HAL_UART_RxCpltCallback+0x198>
						ok3 = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	77bb      	strb	r3, [r7, #30]
					}
					if (v == 4 && ok4 == 0) {
 8001ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d107      	bne.n	8001df4 <HAL_UART_RxCpltCallback+0x1dc>
 8001de4:	7f7b      	ldrb	r3, [r7, #29]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d104      	bne.n	8001df4 <HAL_UART_RxCpltCallback+0x1dc>
						pos4 = n;
 8001dea:	7f3b      	ldrb	r3, [r7, #28]
 8001dec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						ok4 = 1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	777b      	strb	r3, [r7, #29]
					}
					if (v == 5) {
 8001df4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	f040 80b1 	bne.w	8001f60 <HAL_UART_RxCpltCallback+0x348>
						pos5 = n;
 8001dfe:	7f3b      	ldrb	r3, [r7, #28]
 8001e00:	733b      	strb	r3, [r7, #12]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	767b      	strb	r3, [r7, #25]
 8001e06:	e00c      	b.n	8001e22 <HAL_UART_RxCpltCallback+0x20a>
							LONG[count2] = GPGGA[pos4 + count2 + 1];
 8001e08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001e0c:	7e7b      	ldrb	r3, [r7, #25]
 8001e0e:	4413      	add	r3, r2
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	7e7b      	ldrb	r3, [r7, #25]
 8001e14:	493d      	ldr	r1, [pc, #244]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001e16:	5c89      	ldrb	r1, [r1, r2]
 8001e18:	4a40      	ldr	r2, [pc, #256]	; (8001f1c <HAL_UART_RxCpltCallback+0x304>)
 8001e1a:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 8001e1c:	7e7b      	ldrb	r3, [r7, #25]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	767b      	strb	r3, [r7, #25]
 8001e22:	7e7a      	ldrb	r2, [r7, #25]
 8001e24:	7b39      	ldrb	r1, [r7, #12]
 8001e26:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbeb      	blt.n	8001e08 <HAL_UART_RxCpltCallback+0x1f0>

						strcpy(TIME, TIME);
						strcpy(LAT, LAT);
						strcpy(LONG, LONG);
						time = atof(TIME);
 8001e30:	4838      	ldr	r0, [pc, #224]	; (8001f14 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e32:	f006 fc9b 	bl	800876c <atof>
 8001e36:	ec54 3b10 	vmov	r3, r4, d0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	f7fe fe8b 	bl	8000b58 <__aeabi_d2iz>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_UART_RxCpltCallback+0x308>)
 8001e46:	601a      	str	r2, [r3, #0]
						time = time % 100;
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <HAL_UART_RxCpltCallback+0x308>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_UART_RxCpltCallback+0x30c>)
 8001e4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e52:	1159      	asrs	r1, r3, #5
 8001e54:	17d3      	asrs	r3, r2, #31
 8001e56:	1acb      	subs	r3, r1, r3
 8001e58:	2164      	movs	r1, #100	; 0x64
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_UART_RxCpltCallback+0x308>)
 8001e62:	6013      	str	r3, [r2, #0]
						lat = calcoor(atof(LAT));
 8001e64:	482c      	ldr	r0, [pc, #176]	; (8001f18 <HAL_UART_RxCpltCallback+0x300>)
 8001e66:	f006 fc81 	bl	800876c <atof>
 8001e6a:	ec54 3b10 	vmov	r3, r4, d0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe feb9 	bl	8000be8 <__aeabi_d2f>
 8001e76:	4603      	mov	r3, r0
 8001e78:	ee00 3a10 	vmov	s0, r3
 8001e7c:	f001 fd92 	bl	80039a4 <calcoor>
 8001e80:	eef0 7a40 	vmov.f32	s15, s0
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_UART_RxCpltCallback+0x310>)
 8001e86:	edc3 7a00 	vstr	s15, [r3]
						lng = calcoor(atof(LONG));
 8001e8a:	4824      	ldr	r0, [pc, #144]	; (8001f1c <HAL_UART_RxCpltCallback+0x304>)
 8001e8c:	f006 fc6e 	bl	800876c <atof>
 8001e90:	ec54 3b10 	vmov	r3, r4, d0
 8001e94:	4618      	mov	r0, r3
 8001e96:	4621      	mov	r1, r4
 8001e98:	f7fe fea6 	bl	8000be8 <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	ee00 3a10 	vmov	s0, r3
 8001ea2:	f001 fd7f 	bl	80039a4 <calcoor>
 8001ea6:	eef0 7a40 	vmov.f32	s15, s0
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_UART_RxCpltCallback+0x314>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
						/*sprintf(COOR, ":%2.7f:%2.7f\n", lat, lng);
						 HAL_UART_Transmit(&huart3, (uint8_t*) COOR,
						 sizeof(COOR), 1000);*/
						for (uint16_t c = 0; c < sizeof(RX_BUF); c++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	82fb      	strh	r3, [r7, #22]
 8001eb4:	e006      	b.n	8001ec4 <HAL_UART_RxCpltCallback+0x2ac>
							RX_BUF[c] = '\0';
 8001eb6:	8afb      	ldrh	r3, [r7, #22]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_UART_RxCpltCallback+0x2f0>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	54d1      	strb	r1, [r2, r3]
						for (uint16_t c = 0; c < sizeof(RX_BUF); c++)
 8001ebe:	8afb      	ldrh	r3, [r7, #22]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	82fb      	strh	r3, [r7, #22]
 8001ec4:	8afb      	ldrh	r3, [r7, #22]
 8001ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eca:	d3f4      	bcc.n	8001eb6 <HAL_UART_RxCpltCallback+0x29e>
						for (uint16_t c = 0; c < sizeof(GPGGA); c++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	82bb      	strh	r3, [r7, #20]
 8001ed0:	e006      	b.n	8001ee0 <HAL_UART_RxCpltCallback+0x2c8>
							GPGGA[c] = '\0';
 8001ed2:	8abb      	ldrh	r3, [r7, #20]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_UART_RxCpltCallback+0x2f4>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	54d1      	strb	r1, [r2, r3]
						for (uint16_t c = 0; c < sizeof(GPGGA); c++)
 8001eda:	8abb      	ldrh	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	82bb      	strh	r3, [r7, #20]
 8001ee0:	8abb      	ldrh	r3, [r7, #20]
 8001ee2:	2b4a      	cmp	r3, #74	; 0x4a
 8001ee4:	d9f5      	bls.n	8001ed2 <HAL_UART_RxCpltCallback+0x2ba>
						for (uint16_t c = 0; c < sizeof(LAT); c++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	827b      	strh	r3, [r7, #18]
 8001eea:	e006      	b.n	8001efa <HAL_UART_RxCpltCallback+0x2e2>
							LAT[c] = '\0';
 8001eec:	8a7b      	ldrh	r3, [r7, #18]
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_UART_RxCpltCallback+0x300>)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	54d1      	strb	r1, [r2, r3]
						for (uint16_t c = 0; c < sizeof(LAT); c++)
 8001ef4:	8a7b      	ldrh	r3, [r7, #18]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	827b      	strh	r3, [r7, #18]
 8001efa:	8a7b      	ldrh	r3, [r7, #18]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d9f5      	bls.n	8001eec <HAL_UART_RxCpltCallback+0x2d4>
						for (uint16_t c = 0; c < sizeof(LONG); c++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	823b      	strh	r3, [r7, #16]
 8001f04:	e01b      	b.n	8001f3e <HAL_UART_RxCpltCallback+0x326>
 8001f06:	bf00      	nop
 8001f08:	200004a0 	.word	0x200004a0
 8001f0c:	20000804 	.word	0x20000804
 8001f10:	200002ce 	.word	0x200002ce
 8001f14:	20000324 	.word	0x20000324
 8001f18:	20000974 	.word	0x20000974
 8001f1c:	20000334 	.word	0x20000334
 8001f20:	200002c4 	.word	0x200002c4
 8001f24:	51eb851f 	.word	0x51eb851f
 8001f28:	20000970 	.word	0x20000970
 8001f2c:	200003c4 	.word	0x200003c4
							LONG[c] = '\0';
 8001f30:	8a3b      	ldrh	r3, [r7, #16]
 8001f32:	4a15      	ldr	r2, [pc, #84]	; (8001f88 <HAL_UART_RxCpltCallback+0x370>)
 8001f34:	2100      	movs	r1, #0
 8001f36:	54d1      	strb	r1, [r2, r3]
						for (uint16_t c = 0; c < sizeof(LONG); c++)
 8001f38:	8a3b      	ldrh	r3, [r7, #16]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	823b      	strh	r3, [r7, #16]
 8001f3e:	8a3b      	ldrh	r3, [r7, #16]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d9f5      	bls.n	8001f30 <HAL_UART_RxCpltCallback+0x318>
						for (uint16_t c = 0; c < sizeof(TIME); c++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	81fb      	strh	r3, [r7, #14]
 8001f48:	e006      	b.n	8001f58 <HAL_UART_RxCpltCallback+0x340>
							TIME[c] = '\0';
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_UART_RxCpltCallback+0x374>)
 8001f4e:	2100      	movs	r1, #0
 8001f50:	54d1      	strb	r1, [r2, r3]
						for (uint16_t c = 0; c < sizeof(TIME); c++)
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	3301      	adds	r3, #1
 8001f56:	81fb      	strh	r3, [r7, #14]
 8001f58:	89fb      	ldrh	r3, [r7, #14]
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	d9f5      	bls.n	8001f4a <HAL_UART_RxCpltCallback+0x332>
						break;
 8001f5e:	e006      	b.n	8001f6e <HAL_UART_RxCpltCallback+0x356>
				for (uint8_t n = 0; n < sizeof(GPGGA); n++) {
 8001f60:	7f3b      	ldrb	r3, [r7, #28]
 8001f62:	3301      	adds	r3, #1
 8001f64:	773b      	strb	r3, [r7, #28]
 8001f66:	7f3b      	ldrb	r3, [r7, #28]
 8001f68:	2b4a      	cmp	r3, #74	; 0x4a
 8001f6a:	f67f aed9 	bls.w	8001d20 <HAL_UART_RxCpltCallback+0x108>
	for (uint16_t i = 0; i < 512; i++) {
 8001f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f70:	3301      	adds	r3, #1
 8001f72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7a:	f4ff ae54 	bcc.w	8001c26 <HAL_UART_RxCpltCallback+0xe>
					}
				}
			}
		}
	}
}
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000334 	.word	0x20000334
 8001f8c:	20000324 	.word	0x20000324

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f94:	b09f      	sub	sp, #124	; 0x7c
 8001f96:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f98:	f002 f84e 	bl	8004038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9c:	f001 f938 	bl	8003210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa0:	f001 fbdc 	bl	800375c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fa4:	f001 fbbc 	bl	8003720 <MX_DMA_Init>
  MX_I2C2_Init();
 8001fa8:	f001 f99a 	bl	80032e0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001fac:	f001 fb28 	bl	8003600 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fb0:	f001 fb56 	bl	8003660 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fb4:	f001 fb84 	bl	80036c0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001fb8:	f001 fa26 	bl	8003408 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001fbc:	f001 fa72 	bl	80034a4 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001fc0:	f001 f9ce 	bl	8003360 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001fc4:	f001 faa4 	bl	8003510 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001fc8:	f001 faf4 	bl	80035b4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	/*HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);*/
	LORA_READ_PARAMETER();  // don't make commit all of these two functions
 8001fcc:	f001 fca8 	bl	8003920 <LORA_READ_PARAMETER>
	LORA_CONFG(0x6, 0x4A, 0xA, 1);   // HIGH ADDRESS, LOW ADDRESS, CHANNEL, MODE (0 : TRANSPARENT, 1 : FIXED)
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	214a      	movs	r1, #74	; 0x4a
 8001fd6:	2006      	movs	r0, #6
 8001fd8:	f001 fc44 	bl	8003864 <LORA_CONFG>

	BME280_Init();
 8001fdc:	f7fe fe54 	bl	8000c88 <BME280_Init>
	MPU6050_Init();
 8001fe0:	f7ff fa78 	bl	80014d4 <MPU6050_Init>

	enum device {
		Ephemerish, Payload
	} dev_ID;
	//dev_ID = Ephemerish;
	dev_ID = Payload;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	77fb      	strb	r3, [r7, #31]
	enum rocket {
		Rail, Launch, Burnout, Apogee, Descent, Main, Recovery
	};
	enum rocket EPHEMERISH;

	for (uint8_t i = 0; i < 12; i++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001fee:	e00c      	b.n	800200a <main+0x7a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff4:	480e      	ldr	r0, [pc, #56]	; (8002030 <main+0xa0>)
 8001ff6:	f002 fd51 	bl	8004a9c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001ffa:	2032      	movs	r0, #50	; 0x32
 8001ffc:	f002 f882 	bl	8004104 <HAL_Delay>
	for (uint8_t i = 0; i < 12; i++) {
 8002000:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002004:	3301      	adds	r3, #1
 8002006:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800200a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800200e:	2b0b      	cmp	r3, #11
 8002010:	d9ee      	bls.n	8001ff0 <main+0x60>
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8002012:	4808      	ldr	r0, [pc, #32]	; (8002034 <main+0xa4>)
 8002014:	f004 ff4a 	bl	8006eac <HAL_TIM_Base_Start_IT>
	if (MPU_FAIL == 0) {
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <main+0xa8>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <main+0xb0>
		EPHEMERISH = Rail;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_TIM_Base_Start_IT(&htim6);
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <main+0xac>)
 8002028:	f004 ff40 	bl	8006eac <HAL_TIM_Base_Start_IT>
 800202c:	e00f      	b.n	800204e <main+0xbe>
 800202e:	bf00      	nop
 8002030:	48000800 	.word	0x48000800
 8002034:	20000850 	.word	0x20000850
 8002038:	200002ca 	.word	0x200002ca
 800203c:	2000076c 	.word	0x2000076c
	} else if (MPU_FAIL == 1) {
 8002040:	4bcf      	ldr	r3, [pc, #828]	; (8002380 <main+0x3f0>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <main+0xbe>
		EPHEMERISH = Launch;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	}
	HAL_TIM_Base_Start(&htim15);
 800204e:	48cd      	ldr	r0, [pc, #820]	; (8002384 <main+0x3f4>)
 8002050:	f004 fee0 	bl	8006e14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 8002054:	48cc      	ldr	r0, [pc, #816]	; (8002388 <main+0x3f8>)
 8002056:	f004 fedd 	bl	8006e14 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800205a:	48cc      	ldr	r0, [pc, #816]	; (800238c <main+0x3fc>)
 800205c:	f004 ff26 	bl	8006eac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8002060:	48cb      	ldr	r0, [pc, #812]	; (8002390 <main+0x400>)
 8002062:	f004 ff23 	bl	8006eac <HAL_TIM_Base_Start_IT>
	//
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002066:	4bcb      	ldr	r3, [pc, #812]	; (8002394 <main+0x404>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4bc9      	ldr	r3, [pc, #804]	; (8002394 <main+0x404>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0210 	orr.w	r2, r2, #16
 8002074:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)RX_BUF, 512);
 8002076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207a:	49c7      	ldr	r1, [pc, #796]	; (8002398 <main+0x408>)
 800207c:	48c5      	ldr	r0, [pc, #788]	; (8002394 <main+0x404>)
 800207e:	f005 fce2 	bl	8007a46 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ElapsedTime = 0, CurrentTime = 0, PreviousTime = 0;
	  PreviousTime = CurrentTime;
 8002082:	4bc6      	ldr	r3, [pc, #792]	; (800239c <main+0x40c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4ac6      	ldr	r2, [pc, #792]	; (80023a0 <main+0x410>)
 8002088:	6013      	str	r3, [r2, #0]
	  CurrentTime = __HAL_TIM_GET_COUNTER(&htim15);
 800208a:	4bbe      	ldr	r3, [pc, #760]	; (8002384 <main+0x3f4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	4ac2      	ldr	r2, [pc, #776]	; (800239c <main+0x40c>)
 8002092:	6013      	str	r3, [r2, #0]
	  if(CurrentTime < PreviousTime)
 8002094:	4bc1      	ldr	r3, [pc, #772]	; (800239c <main+0x40c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4bc1      	ldr	r3, [pc, #772]	; (80023a0 <main+0x410>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d206      	bcs.n	80020ae <main+0x11e>
		  CurrentTime += 65535;
 80020a0:	4bbe      	ldr	r3, [pc, #760]	; (800239c <main+0x40c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80020a8:	33ff      	adds	r3, #255	; 0xff
 80020aa:	4abc      	ldr	r2, [pc, #752]	; (800239c <main+0x40c>)
 80020ac:	6013      	str	r3, [r2, #0]
	  ElapsedTime = (float)(CurrentTime - PreviousTime) / 1000.0;
 80020ae:	4bbb      	ldr	r3, [pc, #748]	; (800239c <main+0x40c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4bbb      	ldr	r3, [pc, #748]	; (80023a0 <main+0x410>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c0:	eddf 6ab8 	vldr	s13, [pc, #736]	; 80023a4 <main+0x414>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	4bb7      	ldr	r3, [pc, #732]	; (80023a8 <main+0x418>)
 80020ca:	edc3 7a00 	vstr	s15, [r3]

		if (EPHEMERISH != Rail && MPU_RP == 1) {
 80020ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8244 	beq.w	8002560 <main+0x5d0>
 80020d8:	4bb4      	ldr	r3, [pc, #720]	; (80023ac <main+0x41c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f040 823f 	bne.w	8002560 <main+0x5d0>

			AcceX = MPU6050_AccX();
 80020e2:	f7ff fb39 	bl	8001758 <MPU6050_AccX>
 80020e6:	eef0 7a40 	vmov.f32	s15, s0
 80020ea:	4bb1      	ldr	r3, [pc, #708]	; (80023b0 <main+0x420>)
 80020ec:	edc3 7a00 	vstr	s15, [r3]
			AcceY = MPU6050_AccY();
 80020f0:	f7ff fb4a 	bl	8001788 <MPU6050_AccY>
 80020f4:	eef0 7a40 	vmov.f32	s15, s0
 80020f8:	4bae      	ldr	r3, [pc, #696]	; (80023b4 <main+0x424>)
 80020fa:	edc3 7a00 	vstr	s15, [r3]
			AcceZ = MPU6050_AccZ();
 80020fe:	f7ff fb5b 	bl	80017b8 <MPU6050_AccZ>
 8002102:	eef0 7a40 	vmov.f32	s15, s0
 8002106:	4bac      	ldr	r3, [pc, #688]	; (80023b8 <main+0x428>)
 8002108:	edc3 7a00 	vstr	s15, [r3]

			AcceAngleX = ((atan(
 800210c:	4ba9      	ldr	r3, [pc, #676]	; (80023b4 <main+0x424>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fa19 	bl	8000548 <__aeabi_f2d>
 8002116:	4604      	mov	r4, r0
 8002118:	460d      	mov	r5, r1
					(AcceY) / sqrt(pow((AcceX), 2) + pow((AcceZ), 2))) * 180
 800211a:	4ba5      	ldr	r3, [pc, #660]	; (80023b0 <main+0x420>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa12 	bl	8000548 <__aeabi_f2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8002348 <main+0x3b8>
 800212c:	ec43 2b10 	vmov	d0, r2, r3
 8002130:	f009 ffbc 	bl	800c0ac <pow>
 8002134:	ec59 8b10 	vmov	r8, r9, d0
 8002138:	4b9f      	ldr	r3, [pc, #636]	; (80023b8 <main+0x428>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa03 	bl	8000548 <__aeabi_f2d>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8002348 <main+0x3b8>
 800214a:	ec43 2b10 	vmov	d0, r2, r3
 800214e:	f009 ffad 	bl	800c0ac <pow>
 8002152:	ec53 2b10 	vmov	r2, r3, d0
 8002156:	4640      	mov	r0, r8
 8002158:	4649      	mov	r1, r9
 800215a:	f7fe f897 	bl	800028c <__adddf3>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	ec43 2b17 	vmov	d7, r2, r3
 8002166:	eeb0 0a47 	vmov.f32	s0, s14
 800216a:	eef0 0a67 	vmov.f32	s1, s15
 800216e:	f00a f90d 	bl	800c38c <sqrt>
 8002172:	ec53 2b10 	vmov	r2, r3, d0
			AcceAngleX = ((atan(
 8002176:	4620      	mov	r0, r4
 8002178:	4629      	mov	r1, r5
 800217a:	f7fe fb67 	bl	800084c <__aeabi_ddiv>
 800217e:	4603      	mov	r3, r0
 8002180:	460c      	mov	r4, r1
 8002182:	ec44 3b17 	vmov	d7, r3, r4
 8002186:	eeb0 0a47 	vmov.f32	s0, s14
 800218a:	eef0 0a67 	vmov.f32	s1, s15
 800218e:	f009 fde3 	bl	800bd58 <atan>
 8002192:	ec51 0b10 	vmov	r0, r1, d0
					(AcceY) / sqrt(pow((AcceX), 2) + pow((AcceZ), 2))) * 180
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <main+0x42c>)
 800219c:	f7fe fa2c 	bl	80005f8 <__aeabi_dmul>
 80021a0:	4603      	mov	r3, r0
 80021a2:	460c      	mov	r4, r1
 80021a4:	4618      	mov	r0, r3
 80021a6:	4621      	mov	r1, r4
					/ PI)) - acceOffsetX;
 80021a8:	a369      	add	r3, pc, #420	; (adr r3, 8002350 <main+0x3c0>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe fb4d 	bl	800084c <__aeabi_ddiv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	460c      	mov	r4, r1
 80021b6:	4618      	mov	r0, r3
 80021b8:	4621      	mov	r1, r4
 80021ba:	a367      	add	r3, pc, #412	; (adr r3, 8002358 <main+0x3c8>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe f862 	bl	8000288 <__aeabi_dsub>
 80021c4:	4603      	mov	r3, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	4618      	mov	r0, r3
 80021ca:	4621      	mov	r1, r4
 80021cc:	f7fe fd0c 	bl	8000be8 <__aeabi_d2f>
 80021d0:	4602      	mov	r2, r0
			AcceAngleX = ((atan(
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <main+0x430>)
 80021d4:	601a      	str	r2, [r3, #0]
			AcceAngleY = ((atan(
					-1 * (AcceX) / sqrt(pow((AcceY), 2) + pow((AcceZ), 2)))
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <main+0x420>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eef1 7a67 	vneg.f32	s15, s15
 80021e0:	ee17 3a90 	vmov	r3, s15
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	4604      	mov	r4, r0
 80021ec:	460d      	mov	r5, r1
 80021ee:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <main+0x424>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9a8 	bl	8000548 <__aeabi_f2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8002348 <main+0x3b8>
 8002200:	ec43 2b10 	vmov	d0, r2, r3
 8002204:	f009 ff52 	bl	800c0ac <pow>
 8002208:	ec59 8b10 	vmov	r8, r9, d0
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <main+0x428>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f999 	bl	8000548 <__aeabi_f2d>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8002348 <main+0x3b8>
 800221e:	ec43 2b10 	vmov	d0, r2, r3
 8002222:	f009 ff43 	bl	800c0ac <pow>
 8002226:	ec53 2b10 	vmov	r2, r3, d0
 800222a:	4640      	mov	r0, r8
 800222c:	4649      	mov	r1, r9
 800222e:	f7fe f82d 	bl	800028c <__adddf3>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	ec43 2b17 	vmov	d7, r2, r3
 800223a:	eeb0 0a47 	vmov.f32	s0, s14
 800223e:	eef0 0a67 	vmov.f32	s1, s15
 8002242:	f00a f8a3 	bl	800c38c <sqrt>
 8002246:	ec53 2b10 	vmov	r2, r3, d0
			AcceAngleY = ((atan(
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f7fe fafd 	bl	800084c <__aeabi_ddiv>
 8002252:	4603      	mov	r3, r0
 8002254:	460c      	mov	r4, r1
 8002256:	ec44 3b17 	vmov	d7, r3, r4
 800225a:	eeb0 0a47 	vmov.f32	s0, s14
 800225e:	eef0 0a67 	vmov.f32	s1, s15
 8002262:	f009 fd79 	bl	800bd58 <atan>
 8002266:	ec51 0b10 	vmov	r0, r1, d0
					* 180 / PI)) - acceOffsetY;
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <main+0x42c>)
 8002270:	f7fe f9c2 	bl	80005f8 <__aeabi_dmul>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	a334      	add	r3, pc, #208	; (adr r3, 8002350 <main+0x3c0>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fae3 	bl	800084c <__aeabi_ddiv>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	4618      	mov	r0, r3
 800228c:	4621      	mov	r1, r4
 800228e:	a334      	add	r3, pc, #208	; (adr r3, 8002360 <main+0x3d0>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fd fffa 	bl	800028c <__adddf3>
 8002298:	4603      	mov	r3, r0
 800229a:	460c      	mov	r4, r1
 800229c:	4618      	mov	r0, r3
 800229e:	4621      	mov	r1, r4
 80022a0:	f7fe fca2 	bl	8000be8 <__aeabi_d2f>
 80022a4:	4602      	mov	r2, r0
			AcceAngleY = ((atan(
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <main+0x434>)
 80022a8:	601a      	str	r2, [r3, #0]

			GyroX = MPU6050_GyroX();
 80022aa:	f7ff fa9d 	bl	80017e8 <MPU6050_GyroX>
 80022ae:	eef0 7a40 	vmov.f32	s15, s0
 80022b2:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <main+0x438>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
			GyroY = MPU6050_GyroY();
 80022b8:	f7ff faae 	bl	8001818 <MPU6050_GyroY>
 80022bc:	eef0 7a40 	vmov.f32	s15, s0
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <main+0x43c>)
 80022c2:	edc3 7a00 	vstr	s15, [r3]
			GyroZ = MPU6050_GyroZ();
 80022c6:	f7ff fabf 	bl	8001848 <MPU6050_GyroZ>
 80022ca:	eef0 7a40 	vmov.f32	s15, s0
 80022ce:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <main+0x440>)
 80022d0:	edc3 7a00 	vstr	s15, [r3]

			// handle gyro errors
			GyroX = GyroX - gyroOffsetX;
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <main+0x438>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f935 	bl	8000548 <__aeabi_f2d>
 80022de:	a322      	add	r3, pc, #136	; (adr r3, 8002368 <main+0x3d8>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fd ffd2 	bl	800028c <__adddf3>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4618      	mov	r0, r3
 80022ee:	4621      	mov	r1, r4
 80022f0:	f7fe fc7a 	bl	8000be8 <__aeabi_d2f>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <main+0x438>)
 80022f8:	601a      	str	r2, [r3, #0]
			GyroY = GyroY - gyroOffsetY;
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <main+0x43c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f922 	bl	8000548 <__aeabi_f2d>
 8002304:	a31a      	add	r3, pc, #104	; (adr r3, 8002370 <main+0x3e0>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fd ffbd 	bl	8000288 <__aeabi_dsub>
 800230e:	4603      	mov	r3, r0
 8002310:	460c      	mov	r4, r1
 8002312:	4618      	mov	r0, r3
 8002314:	4621      	mov	r1, r4
 8002316:	f7fe fc67 	bl	8000be8 <__aeabi_d2f>
 800231a:	4602      	mov	r2, r0
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <main+0x43c>)
 800231e:	601a      	str	r2, [r3, #0]
			GyroZ = GyroZ - gyroOffsetZ;
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <main+0x440>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	a313      	add	r3, pc, #76	; (adr r3, 8002378 <main+0x3e8>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fd ffac 	bl	800028c <__adddf3>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	4618      	mov	r0, r3
 800233a:	4621      	mov	r1, r4
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2f>
 8002340:	e048      	b.n	80023d4 <main+0x444>
 8002342:	bf00      	nop
 8002344:	f3af 8000 	nop.w
 8002348:	00000000 	.word	0x00000000
 800234c:	40000000 	.word	0x40000000
 8002350:	54442d18 	.word	0x54442d18
 8002354:	400921fb 	.word	0x400921fb
 8002358:	851eb852 	.word	0x851eb852
 800235c:	3fd851eb 	.word	0x3fd851eb
 8002360:	ae147ae1 	.word	0xae147ae1
 8002364:	3ffee147 	.word	0x3ffee147
 8002368:	c28f5c29 	.word	0xc28f5c29
 800236c:	3fcc28f5 	.word	0x3fcc28f5
 8002370:	5c28f5c3 	.word	0x5c28f5c3
 8002374:	3ff1c28f 	.word	0x3ff1c28f
 8002378:	28f5c28f 	.word	0x28f5c28f
 800237c:	40168f5c 	.word	0x40168f5c
 8002380:	200002ca 	.word	0x200002ca
 8002384:	200003c8 	.word	0x200003c8
 8002388:	200007b8 	.word	0x200007b8
 800238c:	20000850 	.word	0x20000850
 8002390:	20000924 	.word	0x20000924
 8002394:	200006e8 	.word	0x200006e8
 8002398:	200004a0 	.word	0x200004a0
 800239c:	20000264 	.word	0x20000264
 80023a0:	20000268 	.word	0x20000268
 80023a4:	447a0000 	.word	0x447a0000
 80023a8:	2000026c 	.word	0x2000026c
 80023ac:	200002d2 	.word	0x200002d2
 80023b0:	20000234 	.word	0x20000234
 80023b4:	20000238 	.word	0x20000238
 80023b8:	2000023c 	.word	0x2000023c
 80023bc:	40668000 	.word	0x40668000
 80023c0:	2000024c 	.word	0x2000024c
 80023c4:	20000250 	.word	0x20000250
 80023c8:	20000240 	.word	0x20000240
 80023cc:	20000244 	.word	0x20000244
 80023d0:	20000248 	.word	0x20000248
 80023d4:	4602      	mov	r2, r0
 80023d6:	4bbc      	ldr	r3, [pc, #752]	; (80026c8 <main+0x738>)
 80023d8:	601a      	str	r2, [r3, #0]

			if (abs(GyroX) < GyroBound) {
 80023da:	4bbc      	ldr	r3, [pc, #752]	; (80026cc <main+0x73c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e4:	ee17 3a90 	vmov	r3, s15
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bfb8      	it	lt
 80023ec:	425b      	neglt	r3, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f6:	4bb6      	ldr	r3, [pc, #728]	; (80026d0 <main+0x740>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	d503      	bpl.n	800240e <main+0x47e>
				GyroX = 0;
 8002406:	4bb1      	ldr	r3, [pc, #708]	; (80026cc <main+0x73c>)
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
			}
			if (abs(GyroY) < GyroBound) {
 800240e:	4bb1      	ldr	r3, [pc, #708]	; (80026d4 <main+0x744>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002418:	ee17 3a90 	vmov	r3, s15
 800241c:	2b00      	cmp	r3, #0
 800241e:	bfb8      	it	lt
 8002420:	425b      	neglt	r3, r3
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242a:	4ba9      	ldr	r3, [pc, #676]	; (80026d0 <main+0x740>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	d503      	bpl.n	8002442 <main+0x4b2>
				GyroY = 0;
 800243a:	4ba6      	ldr	r3, [pc, #664]	; (80026d4 <main+0x744>)
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
			}
			if (abs(GyroZ) < GyroBound + 3) {
 8002442:	4ba1      	ldr	r3, [pc, #644]	; (80026c8 <main+0x738>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	2b00      	cmp	r3, #0
 8002452:	bfb8      	it	lt
 8002454:	425b      	neglt	r3, r3
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245e:	4b9c      	ldr	r3, [pc, #624]	; (80026d0 <main+0x740>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d503      	bpl.n	800247e <main+0x4ee>
				GyroZ = 0;
 8002476:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <main+0x738>)
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
			}

		GyroAngleX += (GyroX * ElapsedTime);
 800247e:	4b93      	ldr	r3, [pc, #588]	; (80026cc <main+0x73c>)
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	4b94      	ldr	r3, [pc, #592]	; (80026d8 <main+0x748>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248e:	4b93      	ldr	r3, [pc, #588]	; (80026dc <main+0x74c>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002498:	4b90      	ldr	r3, [pc, #576]	; (80026dc <main+0x74c>)
 800249a:	edc3 7a00 	vstr	s15, [r3]
		GyroAngleY += (GyroY * ElapsedTime);
 800249e:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <main+0x744>)
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	4b8c      	ldr	r3, [pc, #560]	; (80026d8 <main+0x748>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ae:	4b8c      	ldr	r3, [pc, #560]	; (80026e0 <main+0x750>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <main+0x750>)
 80024ba:	edc3 7a00 	vstr	s15, [r3]

		roll = 0.90 * GyroAngleX + 0.10 * AcceAngleX;
 80024be:	4b87      	ldr	r3, [pc, #540]	; (80026dc <main+0x74c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f840 	bl	8000548 <__aeabi_f2d>
 80024c8:	a37b      	add	r3, pc, #492	; (adr r3, 80026b8 <main+0x728>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fe f893 	bl	80005f8 <__aeabi_dmul>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	4625      	mov	r5, r4
 80024d8:	461c      	mov	r4, r3
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <main+0x754>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe f832 	bl	8000548 <__aeabi_f2d>
 80024e4:	a376      	add	r3, pc, #472	; (adr r3, 80026c0 <main+0x730>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f7fe f885 	bl	80005f8 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4620      	mov	r0, r4
 80024f4:	4629      	mov	r1, r5
 80024f6:	f7fd fec9 	bl	800028c <__adddf3>
 80024fa:	4603      	mov	r3, r0
 80024fc:	460c      	mov	r4, r1
 80024fe:	4618      	mov	r0, r3
 8002500:	4621      	mov	r1, r4
 8002502:	f7fe fb71 	bl	8000be8 <__aeabi_d2f>
 8002506:	4602      	mov	r2, r0
 8002508:	4b77      	ldr	r3, [pc, #476]	; (80026e8 <main+0x758>)
 800250a:	601a      	str	r2, [r3, #0]
		pitch = 0.90 * GyroAngleY + 0.10 * AcceAngleY;
 800250c:	4b74      	ldr	r3, [pc, #464]	; (80026e0 <main+0x750>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe f819 	bl	8000548 <__aeabi_f2d>
 8002516:	a368      	add	r3, pc, #416	; (adr r3, 80026b8 <main+0x728>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fe f86c 	bl	80005f8 <__aeabi_dmul>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	4625      	mov	r5, r4
 8002526:	461c      	mov	r4, r3
 8002528:	4b70      	ldr	r3, [pc, #448]	; (80026ec <main+0x75c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f80b 	bl	8000548 <__aeabi_f2d>
 8002532:	a363      	add	r3, pc, #396	; (adr r3, 80026c0 <main+0x730>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f85e 	bl	80005f8 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4620      	mov	r0, r4
 8002542:	4629      	mov	r1, r5
 8002544:	f7fd fea2 	bl	800028c <__adddf3>
 8002548:	4603      	mov	r3, r0
 800254a:	460c      	mov	r4, r1
 800254c:	4618      	mov	r0, r3
 800254e:	4621      	mov	r1, r4
 8002550:	f7fe fb4a 	bl	8000be8 <__aeabi_d2f>
 8002554:	4602      	mov	r2, r0
 8002556:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <main+0x760>)
 8002558:	601a      	str	r2, [r3, #0]

		MPU_RP = 0;
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <main+0x764>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
		 V = (A - A1);

		 rollFilter = 0.94 * rollFilter + 0.06 * roll;
		 pitchFilter = 0.94 * pitchFilter + 0.06 * pitch;
		 BM[0] = BME280_ALT_MEDIANFILTER();*/
		switch (EPHEMERISH) {
 8002560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002564:	2b06      	cmp	r3, #6
 8002566:	f200 8514 	bhi.w	8002f92 <main+0x1002>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <main+0x5e0>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	0800258d 	.word	0x0800258d
 8002574:	08002681 	.word	0x08002681
 8002578:	080028af 	.word	0x080028af
 800257c:	08002ab3 	.word	0x08002ab3
 8002580:	08002b81 	.word	0x08002b81
 8002584:	08002d97 	.word	0x08002d97
 8002588:	08002e09 	.word	0x08002e09
		case Rail:
			if (MPU == 1) {
 800258c:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <main+0x768>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	f040 84d2 	bne.w	8002f3a <main+0xfaa>
				MPU_ACC_Z[MPU_ACC_S] = MEDIAN_AXIS_FILTER('A', 'Z');
 8002596:	4b59      	ldr	r3, [pc, #356]	; (80026fc <main+0x76c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461c      	mov	r4, r3
 800259c:	215a      	movs	r1, #90	; 0x5a
 800259e:	2041      	movs	r0, #65	; 0x41
 80025a0:	f7ff f9c6 	bl	8001930 <MEDIAN_AXIS_FILTER>
 80025a4:	eef0 7a40 	vmov.f32	s15, s0
 80025a8:	4a55      	ldr	r2, [pc, #340]	; (8002700 <main+0x770>)
 80025aa:	00a3      	lsls	r3, r4, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edc3 7a00 	vstr	s15, [r3]
				if (MPU_ACC_S == 5) {
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <main+0x76c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d157      	bne.n	800266a <main+0x6da>
					uint8_t C1 = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					for (uint8_t i = 0; i <= MPU_ACC_S; i++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c6:	e025      	b.n	8002614 <main+0x684>
						if (MPU_ACC_Z[i] < (-1 * ACC_l) || MPU_ACC_Z[i] > ACC_l)
 80025c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025cc:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <main+0x770>)
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 80025da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e2:	d40d      	bmi.n	8002600 <main+0x670>
 80025e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025e8:	4a45      	ldr	r2, [pc, #276]	; (8002700 <main+0x770>)
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80025f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	dd04      	ble.n	800260a <main+0x67a>
							C1++;
 8002600:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002604:	3301      	adds	r3, #1
 8002606:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					for (uint8_t i = 0; i <= MPU_ACC_S; i++) {
 800260a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800260e:	3301      	adds	r3, #1
 8002610:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <main+0x76c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800261c:	429a      	cmp	r2, r3
 800261e:	d9d3      	bls.n	80025c8 <main+0x638>
					}
					if (C1 >= 3) {
 8002620:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002624:	2b02      	cmp	r3, #2
 8002626:	d91d      	bls.n	8002664 <main+0x6d4>
						EPHEMERISH = Launch;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002634:	e00c      	b.n	8002650 <main+0x6c0>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800263a:	4832      	ldr	r0, [pc, #200]	; (8002704 <main+0x774>)
 800263c:	f002 fa2e 	bl	8004a9c <HAL_GPIO_TogglePin>
							HAL_Delay(50);
 8002640:	2032      	movs	r0, #50	; 0x32
 8002642:	f001 fd5f 	bl	8004104 <HAL_Delay>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800264a:	3301      	adds	r3, #1
 800264c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002650:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	429a      	cmp	r2, r3
 800265c:	dbeb      	blt.n	8002636 <main+0x6a6>
						}
						HAL_TIM_Base_Start(&htim1);
 800265e:	482a      	ldr	r0, [pc, #168]	; (8002708 <main+0x778>)
 8002660:	f004 fbd8 	bl	8006e14 <HAL_TIM_Base_Start>
					}
					MPU_ACC_S = 0;
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <main+0x76c>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
				}
				MPU_ACC_S++;
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <main+0x76c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <main+0x76c>)
 8002674:	701a      	strb	r2, [r3, #0]
				MPU = 0;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <main+0x768>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800267c:	f000 bc5d 	b.w	8002f3a <main+0xfaa>
		case Launch:
			if (BME == 1) {
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <main+0x77c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 845a 	bne.w	8002f3e <main+0xfae>
				if (alt_l == 0) {
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <main+0x780>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d144      	bne.n	800271c <main+0x78c>
					tim1 = __HAL_TIM_GET_COUNTER(&htim1);
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <main+0x778>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	461a      	mov	r2, r3
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <main+0x784>)
 800269c:	601a      	str	r2, [r3, #0]
					BM_A[0] = BME280_ALT_MEDIANFILTER();
 800269e:	f7fe fee3 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 80026a2:	eef0 7a40 	vmov.f32	s15, s0
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <main+0x788>)
 80026a8:	edc3 7a00 	vstr	s15, [r3]
					alt_l = 1;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <main+0x780>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e0f8      	b.n	80028a6 <main+0x916>
 80026b4:	f3af 8000 	nop.w
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	3feccccc 	.word	0x3feccccc
 80026c0:	9999999a 	.word	0x9999999a
 80026c4:	3fb99999 	.word	0x3fb99999
 80026c8:	20000248 	.word	0x20000248
 80026cc:	20000240 	.word	0x20000240
 80026d0:	20000010 	.word	0x20000010
 80026d4:	20000244 	.word	0x20000244
 80026d8:	2000026c 	.word	0x2000026c
 80026dc:	20000254 	.word	0x20000254
 80026e0:	20000258 	.word	0x20000258
 80026e4:	2000024c 	.word	0x2000024c
 80026e8:	2000025c 	.word	0x2000025c
 80026ec:	20000250 	.word	0x20000250
 80026f0:	20000260 	.word	0x20000260
 80026f4:	200002d2 	.word	0x200002d2
 80026f8:	200002cb 	.word	0x200002cb
 80026fc:	200002cc 	.word	0x200002cc
 8002700:	200002a0 	.word	0x200002a0
 8002704:	48000800 	.word	0x48000800
 8002708:	200007b8 	.word	0x200007b8
 800270c:	200002cd 	.word	0x200002cd
 8002710:	200002c9 	.word	0x200002c9
 8002714:	200002b8 	.word	0x200002b8
 8002718:	20000288 	.word	0x20000288
				} else if (alt_l == 1) {
 800271c:	4ba6      	ldr	r3, [pc, #664]	; (80029b8 <main+0xa28>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 80c0 	bne.w	80028a6 <main+0x916>
					tim2 = __HAL_TIM_GET_COUNTER(&htim1);
 8002726:	4ba5      	ldr	r3, [pc, #660]	; (80029bc <main+0xa2c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	461a      	mov	r2, r3
 800272e:	4ba4      	ldr	r3, [pc, #656]	; (80029c0 <main+0xa30>)
 8002730:	601a      	str	r2, [r3, #0]
					BM_A[1] = BME280_ALT_MEDIANFILTER();
 8002732:	f7fe fe99 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8002736:	eef0 7a40 	vmov.f32	s15, s0
 800273a:	4ba2      	ldr	r3, [pc, #648]	; (80029c4 <main+0xa34>)
 800273c:	edc3 7a01 	vstr	s15, [r3, #4]
					if (tim2 < tim1) {
 8002740:	4b9f      	ldr	r3, [pc, #636]	; (80029c0 <main+0xa30>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4ba0      	ldr	r3, [pc, #640]	; (80029c8 <main+0xa38>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	da0e      	bge.n	800276a <main+0x7da>
						tim2 = tim2 + 65535;
 800274c:	4b9c      	ldr	r3, [pc, #624]	; (80029c0 <main+0xa30>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002754:	33ff      	adds	r3, #255	; 0xff
 8002756:	4a9a      	ldr	r2, [pc, #616]	; (80029c0 <main+0xa30>)
 8002758:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 800275a:	4b99      	ldr	r3, [pc, #612]	; (80029c0 <main+0xa30>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b9a      	ldr	r3, [pc, #616]	; (80029c8 <main+0xa38>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	4a99      	ldr	r2, [pc, #612]	; (80029cc <main+0xa3c>)
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e006      	b.n	8002778 <main+0x7e8>
					} else
						dif = tim2 - tim1;
 800276a:	4b95      	ldr	r3, [pc, #596]	; (80029c0 <main+0xa30>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <main+0xa38>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4a95      	ldr	r2, [pc, #596]	; (80029cc <main+0xa3c>)
 8002776:	6013      	str	r3, [r2, #0]
					BM_V[BM_S] = (BM_A[1] - BM_A[0]) / (0.001 * dif);
 8002778:	4b92      	ldr	r3, [pc, #584]	; (80029c4 <main+0xa34>)
 800277a:	ed93 7a01 	vldr	s14, [r3, #4]
 800277e:	4b91      	ldr	r3, [pc, #580]	; (80029c4 <main+0xa34>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002788:	ee17 0a90 	vmov	r0, s15
 800278c:	f7fd fedc 	bl	8000548 <__aeabi_f2d>
 8002790:	4604      	mov	r4, r0
 8002792:	460d      	mov	r5, r1
 8002794:	4b8d      	ldr	r3, [pc, #564]	; (80029cc <main+0xa3c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fec3 	bl	8000524 <__aeabi_i2d>
 800279e:	a384      	add	r3, pc, #528	; (adr r3, 80029b0 <main+0xa20>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd ff28 	bl	80005f8 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fe f84c 	bl	800084c <__aeabi_ddiv>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	4619      	mov	r1, r3
 80027ba:	4622      	mov	r2, r4
 80027bc:	4b84      	ldr	r3, [pc, #528]	; (80029d0 <main+0xa40>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461c      	mov	r4, r3
 80027c2:	4608      	mov	r0, r1
 80027c4:	4611      	mov	r1, r2
 80027c6:	f7fe fa0f 	bl	8000be8 <__aeabi_d2f>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4a81      	ldr	r2, [pc, #516]	; (80029d4 <main+0xa44>)
 80027ce:	00a3      	lsls	r3, r4, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	6019      	str	r1, [r3, #0]
					if (BM_S == 5) {
 80027d4:	4b7e      	ldr	r3, [pc, #504]	; (80029d0 <main+0xa40>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d15b      	bne.n	8002894 <main+0x904>
						uint8_t M = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						for (uint8_t i = 0; i <= BM_S; i++) {
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80027e8:	e017      	b.n	800281a <main+0x88a>
							if (BM_V[i] > 20) // TEST BURNOUT VALUE = 20 READ BURNOUT VALUE = 100
 80027ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80027ee:	4a79      	ldr	r2, [pc, #484]	; (80029d4 <main+0xa44>)
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80027fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	dd04      	ble.n	8002810 <main+0x880>
								M++;
 8002806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800280a:	3301      	adds	r3, #1
 800280c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						for (uint8_t i = 0; i <= BM_S; i++) {
 8002810:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002814:	3301      	adds	r3, #1
 8002816:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800281a:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <main+0xa40>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8002822:	429a      	cmp	r2, r3
 8002824:	d9e1      	bls.n	80027ea <main+0x85a>
						}
						if (M >= 3) {
 8002826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800282a:	2b02      	cmp	r3, #2
 800282c:	d91a      	bls.n	8002864 <main+0x8d4>
							//**********************
							EPHEMERISH = Burnout;
 800282e:	2302      	movs	r3, #2
 8002830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800283a:	e00c      	b.n	8002856 <main+0x8c6>
								HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800283c:	2108      	movs	r1, #8
 800283e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002842:	f002 f92b 	bl	8004a9c <HAL_GPIO_TogglePin>
								HAL_Delay(50);
 8002846:	2032      	movs	r0, #50	; 0x32
 8002848:	f001 fc5c 	bl	8004104 <HAL_Delay>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 800284c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002850:	3301      	adds	r3, #1
 8002852:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002856:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800285a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	429a      	cmp	r2, r3
 8002862:	dbeb      	blt.n	800283c <main+0x8ac>
							}
						}
						for (uint8_t k = 0; k <= 5; k++)
 8002864:	2300      	movs	r3, #0
 8002866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800286a:	e00c      	b.n	8002886 <main+0x8f6>
							BM_V[k] = 0;
 800286c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <main+0xa44>)
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
						for (uint8_t k = 0; k <= 5; k++)
 800287c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002880:	3301      	adds	r3, #1
 8002882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800288a:	2b05      	cmp	r3, #5
 800288c:	d9ee      	bls.n	800286c <main+0x8dc>
						BM_S = 0;
 800288e:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <main+0xa40>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
					}
					BM_S++;
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <main+0xa40>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <main+0xa40>)
 800289e:	701a      	strb	r2, [r3, #0]
					alt_l = 0;
 80028a0:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <main+0xa28>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
				}
				BME = 0;
 80028a6:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <main+0xa48>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028ac:	e347      	b.n	8002f3e <main+0xfae>
		case Burnout:
			if (BME == 1) {
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <main+0xa48>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f040 8345 	bne.w	8002f42 <main+0xfb2>
				if (alt_l == 0) {
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <main+0xa28>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <main+0x952>
					tim1 = __HAL_TIM_GET_COUNTER(&htim1);
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <main+0xa2c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <main+0xa38>)
 80028ca:	601a      	str	r2, [r3, #0]
					BM_A[0] = BME280_ALT_MEDIANFILTER();
 80028cc:	f7fe fdcc 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <main+0xa34>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
					alt_l = 1;
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <main+0xa28>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e0e3      	b.n	8002aaa <main+0xb1a>
				} else if (alt_l == 1) {
 80028e2:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <main+0xa28>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 80df 	bne.w	8002aaa <main+0xb1a>
					tim2 = __HAL_TIM_GET_COUNTER(&htim1);
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <main+0xa2c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <main+0xa30>)
 80028f6:	601a      	str	r2, [r3, #0]
					BM_A[1] = BME280_ALT_MEDIANFILTER();
 80028f8:	f7fe fdb6 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 80028fc:	eef0 7a40 	vmov.f32	s15, s0
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <main+0xa34>)
 8002902:	edc3 7a01 	vstr	s15, [r3, #4]
					if (tim2 < tim1) {
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <main+0xa30>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <main+0xa38>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	da0e      	bge.n	8002930 <main+0x9a0>
						tim2 = tim2 + 65535;
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <main+0xa30>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800291a:	33ff      	adds	r3, #255	; 0xff
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <main+0xa30>)
 800291e:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <main+0xa30>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <main+0xa38>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	4a28      	ldr	r2, [pc, #160]	; (80029cc <main+0xa3c>)
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e006      	b.n	800293e <main+0x9ae>
					} else
						dif = tim2 - tim1;
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <main+0xa30>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <main+0xa38>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <main+0xa3c>)
 800293c:	6013      	str	r3, [r2, #0]
					BM_V[BM_S] = (BM_A[1] - BM_A[0]) / (0.001 * dif);
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <main+0xa34>)
 8002940:	ed93 7a01 	vldr	s14, [r3, #4]
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <main+0xa34>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294e:	ee17 0a90 	vmov	r0, s15
 8002952:	f7fd fdf9 	bl	8000548 <__aeabi_f2d>
 8002956:	4604      	mov	r4, r0
 8002958:	460d      	mov	r5, r1
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <main+0xa3c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fde0 	bl	8000524 <__aeabi_i2d>
 8002964:	a312      	add	r3, pc, #72	; (adr r3, 80029b0 <main+0xa20>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd fe45 	bl	80005f8 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd ff69 	bl	800084c <__aeabi_ddiv>
 800297a:	4603      	mov	r3, r0
 800297c:	460c      	mov	r4, r1
 800297e:	4619      	mov	r1, r3
 8002980:	4622      	mov	r2, r4
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <main+0xa40>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461c      	mov	r4, r3
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	f7fe f92c 	bl	8000be8 <__aeabi_d2f>
 8002990:	4601      	mov	r1, r0
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <main+0xa44>)
 8002994:	00a3      	lsls	r3, r4, #2
 8002996:	4413      	add	r3, r2
 8002998:	6019      	str	r1, [r3, #0]
					if (BM_S == 5) {
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <main+0xa40>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d17a      	bne.n	8002a98 <main+0xb08>
						uint8_t M = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						for (uint8_t i = 0; i <= BM_S; i++) {
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80029ae:	e02d      	b.n	8002a0c <main+0xa7c>
 80029b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80029b4:	3f50624d 	.word	0x3f50624d
 80029b8:	200002c9 	.word	0x200002c9
 80029bc:	200007b8 	.word	0x200007b8
 80029c0:	200002bc 	.word	0x200002bc
 80029c4:	20000288 	.word	0x20000288
 80029c8:	200002b8 	.word	0x200002b8
 80029cc:	200002c0 	.word	0x200002c0
 80029d0:	200002c8 	.word	0x200002c8
 80029d4:	20000270 	.word	0x20000270
 80029d8:	200002cd 	.word	0x200002cd
							if (BM_V[i] < 10)    //  if (BM_V[i] < 20)
 80029dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029e0:	4ab1      	ldr	r2, [pc, #708]	; (8002ca8 <main+0xd18>)
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	d504      	bpl.n	8002a02 <main+0xa72>
								M++;
 80029f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029fc:	3301      	adds	r3, #1
 80029fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						for (uint8_t i = 0; i <= BM_S; i++) {
 8002a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a06:	3301      	adds	r3, #1
 8002a08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002a0c:	4ba7      	ldr	r3, [pc, #668]	; (8002cac <main+0xd1c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d9e1      	bls.n	80029dc <main+0xa4c>
						}
						if (M >= 3) {
 8002a18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d923      	bls.n	8002a68 <main+0xad8>
							EPHEMERISH = Apogee;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							HAL_TIM_Base_Stop_IT(&htim2);
 8002a26:	48a2      	ldr	r0, [pc, #648]	; (8002cb0 <main+0xd20>)
 8002a28:	f004 fa94 	bl	8006f54 <HAL_TIM_Base_Stop_IT>
							tim1 = __HAL_TIM_GET_COUNTER(&htim1);
 8002a2c:	4ba1      	ldr	r3, [pc, #644]	; (8002cb4 <main+0xd24>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	461a      	mov	r2, r3
 8002a34:	4ba0      	ldr	r3, [pc, #640]	; (8002cb8 <main+0xd28>)
 8002a36:	601a      	str	r2, [r3, #0]
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002a3e:	e00c      	b.n	8002a5a <main+0xaca>
								HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a44:	489d      	ldr	r0, [pc, #628]	; (8002cbc <main+0xd2c>)
 8002a46:	f002 f829 	bl	8004a9c <HAL_GPIO_TogglePin>
								HAL_Delay(50);
 8002a4a:	2032      	movs	r0, #50	; 0x32
 8002a4c:	f001 fb5a 	bl	8004104 <HAL_Delay>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002a50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a54:	3301      	adds	r3, #1
 8002a56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002a5a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dbeb      	blt.n	8002a40 <main+0xab0>
							}
						}
						for (uint8_t k = 0; k <= 5; k++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a6e:	e00c      	b.n	8002a8a <main+0xafa>
							BM_V[k] = 0;
 8002a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a74:	4a8c      	ldr	r2, [pc, #560]	; (8002ca8 <main+0xd18>)
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
						for (uint8_t k = 0; k <= 5; k++)
 8002a80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a84:	3301      	adds	r3, #1
 8002a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d9ee      	bls.n	8002a70 <main+0xae0>
						BM_S = 0;
 8002a92:	4b86      	ldr	r3, [pc, #536]	; (8002cac <main+0xd1c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
					}
					BM_S++;
 8002a98:	4b84      	ldr	r3, [pc, #528]	; (8002cac <main+0xd1c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b82      	ldr	r3, [pc, #520]	; (8002cac <main+0xd1c>)
 8002aa2:	701a      	strb	r2, [r3, #0]
					alt_l = 0;
 8002aa4:	4b86      	ldr	r3, [pc, #536]	; (8002cc0 <main+0xd30>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
				}
				BME = 0;
 8002aaa:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <main+0xd34>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ab0:	e247      	b.n	8002f42 <main+0xfb2>
		case Apogee:
			//EPHEMERISH = Recovery;
			/******  GYRO ALGORITHM  ******/
			tim2 = __HAL_TIM_GET_COUNTER(&htim1);
 8002ab2:	4b80      	ldr	r3, [pc, #512]	; (8002cb4 <main+0xd24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b83      	ldr	r3, [pc, #524]	; (8002cc8 <main+0xd38>)
 8002abc:	601a      	str	r2, [r3, #0]
			if (tim2 < tim1) {
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <main+0xd38>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <main+0xd28>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	da0e      	bge.n	8002ae8 <main+0xb58>
				tim2 = tim2 + 65535;
 8002aca:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <main+0xd38>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002ad2:	33ff      	adds	r3, #255	; 0xff
 8002ad4:	4a7c      	ldr	r2, [pc, #496]	; (8002cc8 <main+0xd38>)
 8002ad6:	6013      	str	r3, [r2, #0]
				dif = tim2 - tim1;
 8002ad8:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <main+0xd38>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <main+0xd28>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	; (8002ccc <main+0xd3c>)
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e006      	b.n	8002af6 <main+0xb66>
			} else
				dif = tim2 - tim1;
 8002ae8:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <main+0xd38>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b72      	ldr	r3, [pc, #456]	; (8002cb8 <main+0xd28>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	4a76      	ldr	r2, [pc, #472]	; (8002ccc <main+0xd3c>)
 8002af4:	6013      	str	r3, [r2, #0]
			if (dif > 1700 /*||  GYRO  */) {
 8002af6:	4b75      	ldr	r3, [pc, #468]	; (8002ccc <main+0xd3c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8002afe:	4293      	cmp	r3, r2
 8002b00:	f340 8221 	ble.w	8002f46 <main+0xfb6>
				EPHEMERISH = Descent;
 8002b04:	2304      	movs	r3, #4
 8002b06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b10:	e00c      	b.n	8002b2c <main+0xb9c>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b16:	4869      	ldr	r0, [pc, #420]	; (8002cbc <main+0xd2c>)
 8002b18:	f001 ffc0 	bl	8004a9c <HAL_GPIO_TogglePin>
					HAL_Delay(50);
 8002b1c:	2032      	movs	r0, #50	; 0x32
 8002b1e:	f001 faf1 	bl	8004104 <HAL_Delay>
				for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002b22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b26:	3301      	adds	r3, #1
 8002b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b2c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	429a      	cmp	r2, r3
 8002b38:	dbeb      	blt.n	8002b12 <main+0xb82>
				}
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b3e:	485f      	ldr	r0, [pc, #380]	; (8002cbc <main+0xd2c>)
 8002b40:	f001 ffac 	bl	8004a9c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8002b44:	2201      	movs	r2, #1
 8002b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4e:	f001 ff8d 	bl	8004a6c <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);  // ***************
				HAL_Delay(600);
 8002b52:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002b56:	f001 fad5 	bl	8004104 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f001 ff82 	bl	8004a6c <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);  // **************
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b6c:	4853      	ldr	r0, [pc, #332]	; (8002cbc <main+0xd2c>)
 8002b6e:	f001 ff95 	bl	8004a9c <HAL_GPIO_TogglePin>
				apg = 1;
 8002b72:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <main+0xd40>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8002b78:	484d      	ldr	r0, [pc, #308]	; (8002cb0 <main+0xd20>)
 8002b7a:	f004 f997 	bl	8006eac <HAL_TIM_Base_Start_IT>
			}
			break;
 8002b7e:	e1e2      	b.n	8002f46 <main+0xfb6>
		case Descent:
			if (BME == 1) {
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <main+0xd34>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 81e0 	bne.w	8002f4a <main+0xfba>

				if (alt_l == 0) {
 8002b8a:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <main+0xd30>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d110      	bne.n	8002bb4 <main+0xc24>
					tim1 = __HAL_TIM_GET_COUNTER(&htim1);
 8002b92:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <main+0xd24>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <main+0xd28>)
 8002b9c:	601a      	str	r2, [r3, #0]
					BM_A[0] = BME280_ALT_MEDIANFILTER();
 8002b9e:	f7fe fc63 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <main+0xd44>)
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
					alt_l = 1;
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <main+0xd30>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e05d      	b.n	8002c70 <main+0xce0>
				} else if (alt_l == 1) {
 8002bb4:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <main+0xd30>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d159      	bne.n	8002c70 <main+0xce0>
					tim2 = __HAL_TIM_GET_COUNTER(&htim1);
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <main+0xd24>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <main+0xd38>)
 8002bc6:	601a      	str	r2, [r3, #0]
					BM_A[1] = BME280_ALT_MEDIANFILTER();
 8002bc8:	f7fe fc4e 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8002bcc:	eef0 7a40 	vmov.f32	s15, s0
 8002bd0:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <main+0xd44>)
 8002bd2:	edc3 7a01 	vstr	s15, [r3, #4]
					if (tim2 < tim1) {
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <main+0xd38>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <main+0xd28>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	da0e      	bge.n	8002c00 <main+0xc70>
						tim2 = tim2 + 65535;
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <main+0xd38>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002bea:	33ff      	adds	r3, #255	; 0xff
 8002bec:	4a36      	ldr	r2, [pc, #216]	; (8002cc8 <main+0xd38>)
 8002bee:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <main+0xd38>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <main+0xd28>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <main+0xd3c>)
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e006      	b.n	8002c0e <main+0xc7e>
					} else
						dif = tim2 - tim1;
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <main+0xd38>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <main+0xd28>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	4a30      	ldr	r2, [pc, #192]	; (8002ccc <main+0xd3c>)
 8002c0c:	6013      	str	r3, [r2, #0]
					BM_V[BM_S/*(BM_S - 1) / 2*/] = (BM_A[1] - BM_A[0]) / (0.001 * dif);
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <main+0xd44>)
 8002c10:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <main+0xd44>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fc91 	bl	8000548 <__aeabi_f2d>
 8002c26:	4604      	mov	r4, r0
 8002c28:	460d      	mov	r5, r1
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <main+0xd3c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc78 	bl	8000524 <__aeabi_i2d>
 8002c34:	a31a      	add	r3, pc, #104	; (adr r3, 8002ca0 <main+0xd10>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fcdd 	bl	80005f8 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f7fd fe01 	bl	800084c <__aeabi_ddiv>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4622      	mov	r2, r4
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <main+0xd1c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461c      	mov	r4, r3
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	f7fd ffc4 	bl	8000be8 <__aeabi_d2f>
 8002c60:	4601      	mov	r1, r0
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <main+0xd18>)
 8002c64:	00a3      	lsls	r3, r4, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	6019      	str	r1, [r3, #0]
					alt_l = 0;  //**************
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <main+0xd30>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
				}

				BM_A[BM_S] = BME280_ALT_MEDIANFILTER();
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <main+0xd1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461c      	mov	r4, r3
 8002c76:	f7fe fbf7 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8002c7a:	eef0 7a40 	vmov.f32	s15, s0
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <main+0xd44>)
 8002c80:	00a3      	lsls	r3, r4, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	edc3 7a00 	vstr	s15, [r3]
				if (BM_S == 5) {
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <main+0xd1c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d178      	bne.n	8002d82 <main+0xdf2>
					uint8_t M = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					for (uint8_t i = 0; i <= BM_S; i++) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002c9c:	e034      	b.n	8002d08 <main+0xd78>
 8002c9e:	bf00      	nop
 8002ca0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ca4:	3f50624d 	.word	0x3f50624d
 8002ca8:	20000270 	.word	0x20000270
 8002cac:	200002c8 	.word	0x200002c8
 8002cb0:	20000850 	.word	0x20000850
 8002cb4:	200007b8 	.word	0x200007b8
 8002cb8:	200002b8 	.word	0x200002b8
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	200002c9 	.word	0x200002c9
 8002cc4:	200002cd 	.word	0x200002cd
 8002cc8:	200002bc 	.word	0x200002bc
 8002ccc:	200002c0 	.word	0x200002c0
 8002cd0:	200002d0 	.word	0x200002d0
 8002cd4:	20000288 	.word	0x20000288
						if (BM_A[i] < 500)
 8002cd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cdc:	4a9e      	ldr	r2, [pc, #632]	; (8002f58 <main+0xfc8>)
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002f5c <main+0xfcc>
 8002cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	d504      	bpl.n	8002cfe <main+0xd6e>
							M++;
 8002cf4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					for (uint8_t i = 0; i <= BM_S; i++) {
 8002cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d02:	3301      	adds	r3, #1
 8002d04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002d08:	4b95      	ldr	r3, [pc, #596]	; (8002f60 <main+0xfd0>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d9e1      	bls.n	8002cd8 <main+0xd48>
					}
					if (M >= 3) {
 8002d14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d91a      	bls.n	8002d52 <main+0xdc2>
						// MAIN FIRE
						EPHEMERISH = Main;
 8002d1c:	2305      	movs	r3, #5
 8002d1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d28:	e00c      	b.n	8002d44 <main+0xdb4>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d2e:	488d      	ldr	r0, [pc, #564]	; (8002f64 <main+0xfd4>)
 8002d30:	f001 feb4 	bl	8004a9c <HAL_GPIO_TogglePin>
							HAL_Delay(50);
 8002d34:	2032      	movs	r0, #50	; 0x32
 8002d36:	f001 f9e5 	bl	8004104 <HAL_Delay>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	dbeb      	blt.n	8002d2a <main+0xd9a>
						}
					}
					for (uint8_t k = 0; k <= 5; k++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d58:	e00c      	b.n	8002d74 <main+0xde4>
						BM_A[k] = 0;
 8002d5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d5e:	4a7e      	ldr	r2, [pc, #504]	; (8002f58 <main+0xfc8>)
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
					for (uint8_t k = 0; k <= 5; k++)
 8002d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d9ee      	bls.n	8002d5a <main+0xdca>
					BM_S = 0;
 8002d7c:	4b78      	ldr	r3, [pc, #480]	; (8002f60 <main+0xfd0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
				}
				BM_S++;
 8002d82:	4b77      	ldr	r3, [pc, #476]	; (8002f60 <main+0xfd0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <main+0xfd0>)
 8002d8c:	701a      	strb	r2, [r3, #0]
				BME = 0;
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <main+0xfd8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d94:	e0d9      	b.n	8002f4a <main+0xfba>
		case Main:
			EPHEMERISH = Recovery;
 8002d96:	2306      	movs	r3, #6
 8002d98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002da2:	e00c      	b.n	8002dbe <main+0xe2e>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002da8:	486e      	ldr	r0, [pc, #440]	; (8002f64 <main+0xfd4>)
 8002daa:	f001 fe77 	bl	8004a9c <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8002dae:	2032      	movs	r0, #50	; 0x32
 8002db0:	f001 f9a8 	bl	8004104 <HAL_Delay>
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002db4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002db8:	3301      	adds	r3, #1
 8002dba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002dbe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbeb      	blt.n	8002da4 <main+0xe14>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd2:	4864      	ldr	r0, [pc, #400]	; (8002f64 <main+0xfd4>)
 8002dd4:	f001 fe4a 	bl	8004a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2108      	movs	r1, #8
 8002ddc:	4863      	ldr	r0, [pc, #396]	; (8002f6c <main+0xfdc>)
 8002dde:	f001 fe45 	bl	8004a6c <HAL_GPIO_WritePin>
			HAL_Delay(600);
 8002de2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002de6:	f001 f98d 	bl	8004104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2108      	movs	r1, #8
 8002dee:	485f      	ldr	r0, [pc, #380]	; (8002f6c <main+0xfdc>)
 8002df0:	f001 fe3c 	bl	8004a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dfa:	485a      	ldr	r0, [pc, #360]	; (8002f64 <main+0xfd4>)
 8002dfc:	f001 fe36 	bl	8004a6c <HAL_GPIO_WritePin>
			mn = 1;
 8002e00:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <main+0xfe0>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
			break;
 8002e06:	e0c4      	b.n	8002f92 <main+0x1002>
		case Recovery:
			if (BME == 1) {
 8002e08:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <main+0xfd8>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d17f      	bne.n	8002f10 <main+0xf80>
				if (alt_l == 0) {
 8002e10:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <main+0xfe4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d110      	bne.n	8002e3a <main+0xeaa>
					tim1 = __HAL_TIM_GET_COUNTER(&htim1);
 8002e18:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <main+0xfe8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <main+0xfec>)
 8002e22:	601a      	str	r2, [r3, #0]
					BM_A[0] = BME280_ALT_MEDIANFILTER();
 8002e24:	f7fe fb20 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8002e28:	eef0 7a40 	vmov.f32	s15, s0
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <main+0xfc8>)
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
					alt_l = 1;
 8002e32:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <main+0xfe4>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e06a      	b.n	8002f10 <main+0xf80>
				} else if (alt_l == 1) {
 8002e3a:	4b4e      	ldr	r3, [pc, #312]	; (8002f74 <main+0xfe4>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d166      	bne.n	8002f10 <main+0xf80>
					tim2 = __HAL_TIM_GET_COUNTER(&htim1);
 8002e42:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <main+0xfe8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <main+0xff0>)
 8002e4c:	601a      	str	r2, [r3, #0]
					BM_A[1] = BME280_ALT_MEDIANFILTER();
 8002e4e:	f7fe fb0b 	bl	8001468 <BME280_ALT_MEDIANFILTER>
 8002e52:	eef0 7a40 	vmov.f32	s15, s0
 8002e56:	4b40      	ldr	r3, [pc, #256]	; (8002f58 <main+0xfc8>)
 8002e58:	edc3 7a01 	vstr	s15, [r3, #4]
					if (tim2 < tim1) {
 8002e5c:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <main+0xff0>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <main+0xfec>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	da0e      	bge.n	8002e86 <main+0xef6>
						tim2 = tim2 + 65535;
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <main+0xff0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002e70:	33ff      	adds	r3, #255	; 0xff
 8002e72:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <main+0xff0>)
 8002e74:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 8002e76:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <main+0xff0>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <main+0xfec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <main+0xff4>)
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e006      	b.n	8002e94 <main+0xf04>
					} else
						dif = tim2 - tim1;
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <main+0xff0>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <main+0xfec>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <main+0xff4>)
 8002e92:	6013      	str	r3, [r2, #0]
					BM_V[BM_S] = (BM_A[1] - BM_A[0]) / (0.001 * dif);
 8002e94:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <main+0xfc8>)
 8002e96:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e9a:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <main+0xfc8>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	ee17 0a90 	vmov	r0, s15
 8002ea8:	f7fd fb4e 	bl	8000548 <__aeabi_f2d>
 8002eac:	4604      	mov	r4, r0
 8002eae:	460d      	mov	r5, r1
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <main+0xff4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb35 	bl	8000524 <__aeabi_i2d>
 8002eba:	a325      	add	r3, pc, #148	; (adr r3, 8002f50 <main+0xfc0>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd fb9a 	bl	80005f8 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd fcbe 	bl	800084c <__aeabi_ddiv>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <main+0xfd0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461c      	mov	r4, r3
 8002ede:	4608      	mov	r0, r1
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	f7fd fe81 	bl	8000be8 <__aeabi_d2f>
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <main+0xff8>)
 8002eea:	00a3      	lsls	r3, r4, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	6019      	str	r1, [r3, #0]
					//BM_V[(BM_S - 1) / 2] = (BM_A[1] - BM_A[0]) / (0.001 * dif);
					alt_l = 0;  //**************
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <main+0xfe4>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
					BM_S++;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <main+0xfd0>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <main+0xfd0>)
 8002f00:	701a      	strb	r2, [r3, #0]
					if(BM_S == 5) BM_S = 0;
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <main+0xfd0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d102      	bne.n	8002f10 <main+0xf80>
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <main+0xfd0>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
				}
			}
			if (warning == 1) {
 8002f10:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <main+0xffc>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d13b      	bne.n	8002f90 <main+0x1000>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f1c:	4811      	ldr	r0, [pc, #68]	; (8002f64 <main+0xfd4>)
 8002f1e:	f001 fdbd 	bl	8004a9c <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8002f22:	2032      	movs	r0, #50	; 0x32
 8002f24:	f001 f8ee 	bl	8004104 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f2c:	480d      	ldr	r0, [pc, #52]	; (8002f64 <main+0xfd4>)
 8002f2e:	f001 fdb5 	bl	8004a9c <HAL_GPIO_TogglePin>
				warning = 0;
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <main+0xffc>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f38:	e02a      	b.n	8002f90 <main+0x1000>
			break;
 8002f3a:	bf00      	nop
 8002f3c:	e029      	b.n	8002f92 <main+0x1002>
			break;
 8002f3e:	bf00      	nop
 8002f40:	e027      	b.n	8002f92 <main+0x1002>
			break;
 8002f42:	bf00      	nop
 8002f44:	e025      	b.n	8002f92 <main+0x1002>
			break;
 8002f46:	bf00      	nop
 8002f48:	e023      	b.n	8002f92 <main+0x1002>
			break;
 8002f4a:	bf00      	nop
 8002f4c:	e021      	b.n	8002f92 <main+0x1002>
 8002f4e:	bf00      	nop
 8002f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f54:	3f50624d 	.word	0x3f50624d
 8002f58:	20000288 	.word	0x20000288
 8002f5c:	43fa0000 	.word	0x43fa0000
 8002f60:	200002c8 	.word	0x200002c8
 8002f64:	48000800 	.word	0x48000800
 8002f68:	200002cd 	.word	0x200002cd
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	200002d1 	.word	0x200002d1
 8002f74:	200002c9 	.word	0x200002c9
 8002f78:	200007b8 	.word	0x200007b8
 8002f7c:	200002b8 	.word	0x200002b8
 8002f80:	200002bc 	.word	0x200002bc
 8002f84:	200002c0 	.word	0x200002c0
 8002f88:	20000270 	.word	0x20000270
 8002f8c:	200002cf 	.word	0x200002cf
			break;
 8002f90:	bf00      	nop
		}
		//if (RF == 1 && ((time % 6) == 0 || (time % 6) == 1))  	// EPHEMERISH
		if(RF == 1 && ((time % 6) == 3 || (time % 6) == 4)) // PAYLOAD
 8002f92:	4b8d      	ldr	r3, [pc, #564]	; (80031c8 <main+0x1238>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	f47f a873 	bne.w	8002082 <main+0xf2>
 8002f9c:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <main+0x123c>)
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	4b8b      	ldr	r3, [pc, #556]	; (80031d0 <main+0x1240>)
 8002fa2:	fb83 3201 	smull	r3, r2, r3, r1
 8002fa6:	17cb      	asrs	r3, r1, #31
 8002fa8:	1ad2      	subs	r2, r2, r3
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	1aca      	subs	r2, r1, r3
 8002fb4:	2a03      	cmp	r2, #3
 8002fb6:	d00e      	beq.n	8002fd6 <main+0x1046>
 8002fb8:	4b84      	ldr	r3, [pc, #528]	; (80031cc <main+0x123c>)
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <main+0x1240>)
 8002fbe:	fb83 3201 	smull	r3, r2, r3, r1
 8002fc2:	17cb      	asrs	r3, r1, #31
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	1aca      	subs	r2, r1, r3
 8002fd0:	2a04      	cmp	r2, #4
 8002fd2:	f47f a856 	bne.w	8002082 <main+0xf2>
				{
			if (EPHEMERISH == Rail && counter_Tel < 10) {
 8002fd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d176      	bne.n	80030cc <main+0x113c>
 8002fde:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <main+0x1244>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d872      	bhi.n	80030cc <main+0x113c>
				COOR[0] = ADDH;
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	; (80031d8 <main+0x1248>)
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <main+0x124c>)
 8002fec:	701a      	strb	r2, [r3, #0]
				COOR[1] = ADDL;
 8002fee:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <main+0x1250>)
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <main+0x124c>)
 8002ff4:	705a      	strb	r2, [r3, #1]
				COOR[2] = CHN;
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	; (80031e4 <main+0x1254>)
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	4b78      	ldr	r3, [pc, #480]	; (80031dc <main+0x124c>)
 8002ffc:	709a      	strb	r2, [r3, #2]
				sprintf(COOR, "%s%d:%d:%2.7f:%2.7f:%.2f:%.2f:%.2f,%.2f:%d:%d\n",
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	4b72      	ldr	r3, [pc, #456]	; (80031cc <main+0x123c>)
 8003004:	681e      	ldr	r6, [r3, #0]
 8003006:	4b78      	ldr	r3, [pc, #480]	; (80031e8 <main+0x1258>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fa9c 	bl	8000548 <__aeabi_f2d>
 8003010:	4680      	mov	r8, r0
 8003012:	4689      	mov	r9, r1
 8003014:	4b75      	ldr	r3, [pc, #468]	; (80031ec <main+0x125c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa95 	bl	8000548 <__aeabi_f2d>
 800301e:	4682      	mov	sl, r0
 8003020:	468b      	mov	fp, r1
						COOR, dev_ID, time, lat, lng, BM_A[1], BM_V[2], roll,
 8003022:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <main+0x1260>)
 8003024:	685b      	ldr	r3, [r3, #4]
				sprintf(COOR, "%s%d:%d:%2.7f:%2.7f:%.2f:%.2f:%.2f,%.2f:%d:%d\n",
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa8e 	bl	8000548 <__aeabi_f2d>
 800302c:	e9c7 0102 	strd	r0, r1, [r7, #8]
						COOR, dev_ID, time, lat, lng, BM_A[1], BM_V[2], roll,
 8003030:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <main+0x1264>)
 8003032:	689b      	ldr	r3, [r3, #8]
				sprintf(COOR, "%s%d:%d:%2.7f:%2.7f:%.2f:%.2f:%.2f,%.2f:%d:%d\n",
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa87 	bl	8000548 <__aeabi_f2d>
 800303a:	e9c7 0100 	strd	r0, r1, [r7]
 800303e:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <main+0x1268>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fa80 	bl	8000548 <__aeabi_f2d>
 8003048:	4604      	mov	r4, r0
 800304a:	460d      	mov	r5, r1
 800304c:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <main+0x126c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa79 	bl	8000548 <__aeabi_f2d>
 8003056:	460a      	mov	r2, r1
 8003058:	4601      	mov	r1, r0
 800305a:	4b69      	ldr	r3, [pc, #420]	; (8003200 <main+0x1270>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <main+0x1274>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	930f      	str	r3, [sp, #60]	; 0x3c
 8003066:	900e      	str	r0, [sp, #56]	; 0x38
 8003068:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 800306c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003070:	ed97 7b00 	vldr	d7, [r7]
 8003074:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003078:	ed97 7b02 	vldr	d7, [r7, #8]
 800307c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003080:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003084:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003088:	9600      	str	r6, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	4a53      	ldr	r2, [pc, #332]	; (80031dc <main+0x124c>)
 800308e:	495e      	ldr	r1, [pc, #376]	; (8003208 <main+0x1278>)
 8003090:	4852      	ldr	r0, [pc, #328]	; (80031dc <main+0x124c>)
 8003092:	f005 fffd 	bl	8009090 <siprintf>
						pitch, apg, mn);
				HAL_UART_Transmit(&huart2, (uint8_t*) COOR, sizeof(COOR), 1000);
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	223c      	movs	r2, #60	; 0x3c
 800309c:	494f      	ldr	r1, [pc, #316]	; (80031dc <main+0x124c>)
 800309e:	485b      	ldr	r0, [pc, #364]	; (800320c <main+0x127c>)
 80030a0:	f004 fb6c 	bl	800777c <HAL_UART_Transmit>
				for (uint16_t X = 0; X < sizeof(COOR); X++) {
 80030a4:	2300      	movs	r3, #0
 80030a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80030a8:	e006      	b.n	80030b8 <main+0x1128>
					COOR[X] = '\0';
 80030aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030ac:	4a4b      	ldr	r2, [pc, #300]	; (80031dc <main+0x124c>)
 80030ae:	2100      	movs	r1, #0
 80030b0:	54d1      	strb	r1, [r2, r3]
				for (uint16_t X = 0; X < sizeof(COOR); X++) {
 80030b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030b4:	3301      	adds	r3, #1
 80030b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80030b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030ba:	2b3b      	cmp	r3, #59	; 0x3b
 80030bc:	d9f5      	bls.n	80030aa <main+0x111a>
				}
//				lat = .0;
//				lng = .0;
//				RF = 0;
				counter_Tel++;
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <main+0x1244>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <main+0x1244>)
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e06f      	b.n	80031ac <main+0x121c>
			} else if (EPHEMERISH != Rail) {
 80030cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d06b      	beq.n	80031ac <main+0x121c>
				COOR[0] = ADDH;
 80030d4:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <main+0x1248>)
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b40      	ldr	r3, [pc, #256]	; (80031dc <main+0x124c>)
 80030da:	701a      	strb	r2, [r3, #0]
				COOR[1] = ADDL;
 80030dc:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <main+0x1250>)
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <main+0x124c>)
 80030e2:	705a      	strb	r2, [r3, #1]
				COOR[2] = CHN;
 80030e4:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <main+0x1254>)
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <main+0x124c>)
 80030ea:	709a      	strb	r2, [r3, #2]
				sprintf(COOR, "%s%d:%d:%2.7f:%2.7f:%.2f:%.2f:%.2f,%.2f:%d:%d\n",
 80030ec:	7ffb      	ldrb	r3, [r7, #31]
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	4b36      	ldr	r3, [pc, #216]	; (80031cc <main+0x123c>)
 80030f2:	681e      	ldr	r6, [r3, #0]
 80030f4:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <main+0x1258>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fa25 	bl	8000548 <__aeabi_f2d>
 80030fe:	4680      	mov	r8, r0
 8003100:	4689      	mov	r9, r1
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <main+0x125c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa1e 	bl	8000548 <__aeabi_f2d>
 800310c:	4682      	mov	sl, r0
 800310e:	468b      	mov	fp, r1
						COOR, dev_ID, time, lat, lng, BM_A[1], BM_V[2], roll,
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <main+0x1260>)
 8003112:	685b      	ldr	r3, [r3, #4]
				sprintf(COOR, "%s%d:%d:%2.7f:%2.7f:%.2f:%.2f:%.2f,%.2f:%d:%d\n",
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd fa17 	bl	8000548 <__aeabi_f2d>
 800311a:	e9c7 0102 	strd	r0, r1, [r7, #8]
						COOR, dev_ID, time, lat, lng, BM_A[1], BM_V[2], roll,
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <main+0x1264>)
 8003120:	689b      	ldr	r3, [r3, #8]
				sprintf(COOR, "%s%d:%d:%2.7f:%2.7f:%.2f:%.2f:%.2f,%.2f:%d:%d\n",
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fa10 	bl	8000548 <__aeabi_f2d>
 8003128:	e9c7 0100 	strd	r0, r1, [r7]
 800312c:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <main+0x1268>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fa09 	bl	8000548 <__aeabi_f2d>
 8003136:	4604      	mov	r4, r0
 8003138:	460d      	mov	r5, r1
 800313a:	4b30      	ldr	r3, [pc, #192]	; (80031fc <main+0x126c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fa02 	bl	8000548 <__aeabi_f2d>
 8003144:	460a      	mov	r2, r1
 8003146:	4601      	mov	r1, r0
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <main+0x1270>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <main+0x1274>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	930f      	str	r3, [sp, #60]	; 0x3c
 8003154:	900e      	str	r0, [sp, #56]	; 0x38
 8003156:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 800315a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800315e:	ed97 7b00 	vldr	d7, [r7]
 8003162:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003166:	ed97 7b02 	vldr	d7, [r7, #8]
 800316a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800316e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003172:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003176:	9600      	str	r6, [sp, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <main+0x124c>)
 800317c:	4922      	ldr	r1, [pc, #136]	; (8003208 <main+0x1278>)
 800317e:	4817      	ldr	r0, [pc, #92]	; (80031dc <main+0x124c>)
 8003180:	f005 ff86 	bl	8009090 <siprintf>
						pitch, apg, mn);
				HAL_UART_Transmit(&huart2, (uint8_t*) COOR, sizeof(COOR), 1000);
 8003184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003188:	223c      	movs	r2, #60	; 0x3c
 800318a:	4914      	ldr	r1, [pc, #80]	; (80031dc <main+0x124c>)
 800318c:	481f      	ldr	r0, [pc, #124]	; (800320c <main+0x127c>)
 800318e:	f004 faf5 	bl	800777c <HAL_UART_Transmit>
				for (uint16_t X = 0; X < sizeof(COOR); X++) {
 8003192:	2300      	movs	r3, #0
 8003194:	843b      	strh	r3, [r7, #32]
 8003196:	e006      	b.n	80031a6 <main+0x1216>
					COOR[X] = '\0';
 8003198:	8c3b      	ldrh	r3, [r7, #32]
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <main+0x124c>)
 800319c:	2100      	movs	r1, #0
 800319e:	54d1      	strb	r1, [r2, r3]
				for (uint16_t X = 0; X < sizeof(COOR); X++) {
 80031a0:	8c3b      	ldrh	r3, [r7, #32]
 80031a2:	3301      	adds	r3, #1
 80031a4:	843b      	strh	r3, [r7, #32]
 80031a6:	8c3b      	ldrh	r3, [r7, #32]
 80031a8:	2b3b      	cmp	r3, #59	; 0x3b
 80031aa:	d9f5      	bls.n	8003198 <main+0x1208>
				}
//				lat = .0;
//				lng = .0;
//				RF = 0;
			}
			lat = .0;
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <main+0x1258>)
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
			lng = .0;
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <main+0x125c>)
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
			RF = 0;
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <main+0x1238>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
	  PreviousTime = CurrentTime;
 80031c2:	f7fe bf5e 	b.w	8002082 <main+0xf2>
 80031c6:	bf00      	nop
 80031c8:	200002d4 	.word	0x200002d4
 80031cc:	200002c4 	.word	0x200002c4
 80031d0:	2aaaaaab 	.word	0x2aaaaaab
 80031d4:	200002d3 	.word	0x200002d3
 80031d8:	20000014 	.word	0x20000014
 80031dc:	20000460 	.word	0x20000460
 80031e0:	20000015 	.word	0x20000015
 80031e4:	20000016 	.word	0x20000016
 80031e8:	20000970 	.word	0x20000970
 80031ec:	200003c4 	.word	0x200003c4
 80031f0:	20000288 	.word	0x20000288
 80031f4:	20000270 	.word	0x20000270
 80031f8:	2000025c 	.word	0x2000025c
 80031fc:	20000260 	.word	0x20000260
 8003200:	200002d0 	.word	0x200002d0
 8003204:	200002d1 	.word	0x200002d1
 8003208:	0800d210 	.word	0x0800d210
 800320c:	200008a0 	.word	0x200008a0

08003210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b09c      	sub	sp, #112	; 0x70
 8003214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800321a:	2228      	movs	r2, #40	; 0x28
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f005 fad2 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003224:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003234:	463b      	mov	r3, r7
 8003236:	2234      	movs	r2, #52	; 0x34
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f005 fac4 	bl	80087c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003240:	2303      	movs	r3, #3
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003248:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800324a:	2300      	movs	r3, #0
 800324c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800324e:	2301      	movs	r3, #1
 8003250:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003252:	2310      	movs	r3, #16
 8003254:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003256:	2302      	movs	r3, #2
 8003258:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800325a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800325e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003264:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800326a:	4618      	mov	r0, r3
 800326c:	f002 faaa 	bl	80057c4 <HAL_RCC_OscConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003276:	f000 fbe1 	bl	8003a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800327a:	230f      	movs	r3, #15
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800327e:	2302      	movs	r3, #2
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003282:	2300      	movs	r3, #0
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8003286:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800328c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003290:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003292:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f003 f99b 	bl	80065d4 <HAL_RCC_ClockConfig>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80032a4:	f000 fbca 	bl	8003a3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <SystemClock_Config+0xcc>)
 80032aa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80032bc:	2300      	movs	r3, #0
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c0:	463b      	mov	r3, r7
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 fbbc 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80032ce:	f000 fbb5 	bl	8003a3c <Error_Handler>
  }
}
 80032d2:	bf00      	nop
 80032d4:	3770      	adds	r7, #112	; 0x70
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	000c1041 	.word	0x000c1041

080032e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <MX_I2C2_Init+0x74>)
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <MX_I2C2_Init+0x78>)
 80032e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <MX_I2C2_Init+0x74>)
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <MX_I2C2_Init+0x7c>)
 80032ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <MX_I2C2_Init+0x74>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <MX_I2C2_Init+0x74>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <MX_I2C2_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <MX_I2C2_Init+0x74>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_I2C2_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <MX_I2C2_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <MX_I2C2_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800331a:	480e      	ldr	r0, [pc, #56]	; (8003354 <MX_I2C2_Init+0x74>)
 800331c:	f001 fbd8 	bl	8004ad0 <HAL_I2C_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003326:	f000 fb89 	bl	8003a3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332a:	2100      	movs	r1, #0
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <MX_I2C2_Init+0x74>)
 800332e:	f002 f9b1 	bl	8005694 <HAL_I2CEx_ConfigAnalogFilter>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003338:	f000 fb80 	bl	8003a3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800333c:	2100      	movs	r1, #0
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <MX_I2C2_Init+0x74>)
 8003340:	f002 f9f3 	bl	800572a <HAL_I2CEx_ConfigDigitalFilter>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800334a:	f000 fb77 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000414 	.word	0x20000414
 8003358:	40005800 	.word	0x40005800
 800335c:	2000090e 	.word	0x2000090e

08003360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003366:	f107 0310 	add.w	r3, r7, #16
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <MX_TIM1_Init+0xa0>)
 8003380:	4a20      	ldr	r2, [pc, #128]	; (8003404 <MX_TIM1_Init+0xa4>)
 8003382:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8999;
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <MX_TIM1_Init+0xa0>)
 8003386:	f242 3227 	movw	r2, #8999	; 0x2327
 800338a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <MX_TIM1_Init+0xa0>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <MX_TIM1_Init+0xa0>)
 8003394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <MX_TIM1_Init+0xa0>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <MX_TIM1_Init+0xa0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <MX_TIM1_Init+0xa0>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033ac:	4814      	ldr	r0, [pc, #80]	; (8003400 <MX_TIM1_Init+0xa0>)
 80033ae:	f003 fcd9 	bl	8006d64 <HAL_TIM_Base_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80033b8:	f000 fb40 	bl	8003a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	4619      	mov	r1, r3
 80033c8:	480d      	ldr	r0, [pc, #52]	; (8003400 <MX_TIM1_Init+0xa0>)
 80033ca:	f003 ff11 	bl	80071f0 <HAL_TIM_ConfigClockSource>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80033d4:	f000 fb32 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4805      	ldr	r0, [pc, #20]	; (8003400 <MX_TIM1_Init+0xa0>)
 80033ea:	f004 f8f5 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80033f4:	f000 fb22 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200007b8 	.word	0x200007b8
 8003404:	40012c00 	.word	0x40012c00

08003408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <MX_TIM2_Init+0x98>)
 8003428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800342c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <MX_TIM2_Init+0x98>)
 8003430:	f242 3227 	movw	r2, #8999	; 0x2327
 8003434:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <MX_TIM2_Init+0x98>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800343c:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <MX_TIM2_Init+0x98>)
 800343e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003442:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <MX_TIM2_Init+0x98>)
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <MX_TIM2_Init+0x98>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003450:	4813      	ldr	r0, [pc, #76]	; (80034a0 <MX_TIM2_Init+0x98>)
 8003452:	f003 fc87 	bl	8006d64 <HAL_TIM_Base_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800345c:	f000 faee 	bl	8003a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003464:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003466:	f107 0310 	add.w	r3, r7, #16
 800346a:	4619      	mov	r1, r3
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <MX_TIM2_Init+0x98>)
 800346e:	f003 febf 	bl	80071f0 <HAL_TIM_ConfigClockSource>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003478:	f000 fae0 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <MX_TIM2_Init+0x98>)
 800348a:	f004 f8a5 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003494:	f000 fad2 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003498:	bf00      	nop
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000850 	.word	0x20000850

080034a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_TIM6_Init+0x64>)
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <MX_TIM6_Init+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <MX_TIM6_Init+0x64>)
 80034bc:	f242 3227 	movw	r2, #8999	; 0x2327
 80034c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_TIM6_Init+0x64>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <MX_TIM6_Init+0x64>)
 80034ca:	2206      	movs	r2, #6
 80034cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_TIM6_Init+0x64>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034d4:	480c      	ldr	r0, [pc, #48]	; (8003508 <MX_TIM6_Init+0x64>)
 80034d6:	f003 fc45 	bl	8006d64 <HAL_TIM_Base_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80034e0:	f000 faac 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_TIM6_Init+0x64>)
 80034f2:	f004 f871 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80034fc:	f000 fa9e 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	2000076c 	.word	0x2000076c
 800350c:	40001000 	.word	0x40001000

08003510 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003516:	f107 0310 	add.w	r3, r7, #16
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <MX_TIM15_Init+0x9c>)
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <MX_TIM15_Init+0xa0>)
 8003532:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8999;
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <MX_TIM15_Init+0x9c>)
 8003536:	f242 3227 	movw	r2, #8999	; 0x2327
 800353a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <MX_TIM15_Init+0x9c>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <MX_TIM15_Init+0x9c>)
 8003544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003548:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <MX_TIM15_Init+0x9c>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <MX_TIM15_Init+0x9c>)
 8003552:	2200      	movs	r2, #0
 8003554:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <MX_TIM15_Init+0x9c>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800355c:	4813      	ldr	r0, [pc, #76]	; (80035ac <MX_TIM15_Init+0x9c>)
 800355e:	f003 fc01 	bl	8006d64 <HAL_TIM_Base_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8003568:	f000 fa68 	bl	8003a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800356c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003572:	f107 0310 	add.w	r3, r7, #16
 8003576:	4619      	mov	r1, r3
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <MX_TIM15_Init+0x9c>)
 800357a:	f003 fe39 	bl	80071f0 <HAL_TIM_ConfigClockSource>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003584:	f000 fa5a 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003588:	2300      	movs	r3, #0
 800358a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	4619      	mov	r1, r3
 8003594:	4805      	ldr	r0, [pc, #20]	; (80035ac <MX_TIM15_Init+0x9c>)
 8003596:	f004 f81f 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80035a0:	f000 fa4c 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80035a4:	bf00      	nop
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200003c8 	.word	0x200003c8
 80035b0:	40014000 	.word	0x40014000

080035b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <MX_TIM16_Init+0x48>)
 80035bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8999;
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035c0:	f242 3227 	movw	r2, #8999	; 0x2327
 80035c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035ce:	2203      	movs	r2, #3
 80035d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035da:	2200      	movs	r2, #0
 80035dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80035e4:	4804      	ldr	r0, [pc, #16]	; (80035f8 <MX_TIM16_Init+0x44>)
 80035e6:	f003 fbbd 	bl	8006d64 <HAL_TIM_Base_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80035f0:	f000 fa24 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000924 	.word	0x20000924
 80035fc:	40014400 	.word	0x40014400

08003600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003606:	4a15      	ldr	r2, [pc, #84]	; (800365c <MX_USART1_UART_Init+0x5c>)
 8003608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <MX_USART1_UART_Init+0x58>)
 800360c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <MX_USART1_UART_Init+0x58>)
 800361a:	2200      	movs	r2, #0
 800361c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003626:	220c      	movs	r2, #12
 8003628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <MX_USART1_UART_Init+0x58>)
 800362c:	2200      	movs	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003638:	2200      	movs	r2, #0
 800363a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <MX_USART1_UART_Init+0x58>)
 800363e:	2200      	movs	r2, #0
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_USART1_UART_Init+0x58>)
 8003644:	f004 f84c 	bl	80076e0 <HAL_UART_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800364e:	f000 f9f5 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200006e8 	.word	0x200006e8
 800365c:	40013800 	.word	0x40013800

08003660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <MX_USART2_UART_Init+0x5c>)
 8003668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 800366c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 8003686:	220c      	movs	r2, #12
 8003688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036a2:	4805      	ldr	r0, [pc, #20]	; (80036b8 <MX_USART2_UART_Init+0x58>)
 80036a4:	f004 f81c 	bl	80076e0 <HAL_UART_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036ae:	f000 f9c5 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200008a0 	.word	0x200008a0
 80036bc:	40004400 	.word	0x40004400

080036c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <MX_USART3_UART_Init+0x5c>)
 80036c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036e6:	220c      	movs	r2, #12
 80036e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <MX_USART3_UART_Init+0x58>)
 80036fe:	2200      	movs	r2, #0
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003702:	4805      	ldr	r0, [pc, #20]	; (8003718 <MX_USART3_UART_Init+0x58>)
 8003704:	f003 ffec 	bl	80076e0 <HAL_UART_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800370e:	f000 f995 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000340 	.word	0x20000340
 800371c:	40004800 	.word	0x40004800

08003720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <MX_DMA_Init+0x38>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <MX_DMA_Init+0x38>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6153      	str	r3, [r2, #20]
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <MX_DMA_Init+0x38>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	200f      	movs	r0, #15
 8003744:	f000 fddb 	bl	80042fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003748:	200f      	movs	r0, #15
 800374a:	f000 fdf4 	bl	8004336 <HAL_NVIC_EnableIRQ>

}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	609a      	str	r2, [r3, #8]
 800376e:	60da      	str	r2, [r3, #12]
 8003770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <MX_GPIO_Init+0xfc>)
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4a38      	ldr	r2, [pc, #224]	; (8003858 <MX_GPIO_Init+0xfc>)
 8003778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800377c:	6153      	str	r3, [r2, #20]
 800377e:	4b36      	ldr	r3, [pc, #216]	; (8003858 <MX_GPIO_Init+0xfc>)
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800378a:	4b33      	ldr	r3, [pc, #204]	; (8003858 <MX_GPIO_Init+0xfc>)
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4a32      	ldr	r2, [pc, #200]	; (8003858 <MX_GPIO_Init+0xfc>)
 8003790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003794:	6153      	str	r3, [r2, #20]
 8003796:	4b30      	ldr	r3, [pc, #192]	; (8003858 <MX_GPIO_Init+0xfc>)
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <MX_GPIO_Init+0xfc>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <MX_GPIO_Init+0xfc>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	6153      	str	r3, [r2, #20]
 80037ae:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <MX_GPIO_Init+0xfc>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <MX_GPIO_Init+0xfc>)
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4a26      	ldr	r2, [pc, #152]	; (8003858 <MX_GPIO_Init+0xfc>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	6153      	str	r3, [r2, #20]
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <MX_GPIO_Init+0xfc>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80037d2:	2200      	movs	r2, #0
 80037d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037d8:	4820      	ldr	r0, [pc, #128]	; (800385c <MX_GPIO_Init+0x100>)
 80037da:	f001 f947 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_Pin|M1_Pin|APOGEE_Pin, GPIO_PIN_RESET);
 80037de:	2200      	movs	r2, #0
 80037e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80037e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e8:	f001 f940 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAIN_GPIO_Port, MAIN_Pin, GPIO_PIN_RESET);
 80037ec:	2200      	movs	r2, #0
 80037ee:	2108      	movs	r1, #8
 80037f0:	481b      	ldr	r0, [pc, #108]	; (8003860 <MX_GPIO_Init+0x104>)
 80037f2:	f001 f93b 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80037f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037fc:	2301      	movs	r3, #1
 80037fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	2300      	movs	r3, #0
 8003806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	4619      	mov	r1, r3
 800380e:	4813      	ldr	r0, [pc, #76]	; (800385c <MX_GPIO_Init+0x100>)
 8003810:	f000 ffba 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin APOGEE_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|APOGEE_Pin;
 8003814:	f248 0303 	movw	r3, #32771	; 0x8003
 8003818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381a:	2301      	movs	r3, #1
 800381c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003830:	f000 ffaa 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAIN_Pin */
  GPIO_InitStruct.Pin = MAIN_Pin;
 8003834:	2308      	movs	r3, #8
 8003836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003838:	2301      	movs	r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003840:	2300      	movs	r3, #0
 8003842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAIN_GPIO_Port, &GPIO_InitStruct);
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4619      	mov	r1, r3
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_GPIO_Init+0x104>)
 800384c:	f000 ff9c 	bl	8004788 <HAL_GPIO_Init>

}
 8003850:	bf00      	nop
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	48000800 	.word	0x48000800
 8003860:	48000400 	.word	0x48000400

08003864 <LORA_CONFG>:

/* USER CODE BEGIN 4 */
void LORA_CONFG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4623      	mov	r3, r4
 8003874:	71fb      	strb	r3, [r7, #7]
 8003876:	4603      	mov	r3, r0
 8003878:	71bb      	strb	r3, [r7, #6]
 800387a:	460b      	mov	r3, r1
 800387c:	717b      	strb	r3, [r7, #5]
 800387e:	4613      	mov	r3, r2
 8003880:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8003882:	2201      	movs	r2, #1
 8003884:	2101      	movs	r1, #1
 8003886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388a:	f001 f8ef 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 800388e:	2201      	movs	r2, #1
 8003890:	2102      	movs	r1, #2
 8003892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003896:	f001 f8e9 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800389a:	2032      	movs	r0, #50	; 0x32
 800389c:	f000 fc32 	bl	8004104 <HAL_Delay>

	char cfg_buff[6] = {0};
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	809a      	strh	r2, [r3, #4]
	enum lora{Transparent, Fixed} mode;
	mode = MODE;
 80038aa:	793b      	ldrb	r3, [r7, #4]
 80038ac:	73fb      	strb	r3, [r7, #15]

	cfg_buff[0] = 0xC0;  // header for saving paramater when power down C0
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	723b      	strb	r3, [r7, #8]
	cfg_buff[1] = ADDH;  // high address
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	727b      	strb	r3, [r7, #9]
	cfg_buff[2] = ADDL;  // low address
 80038b6:	79bb      	ldrb	r3, [r7, #6]
 80038b8:	72bb      	strb	r3, [r7, #10]
	cfg_buff[3] = 0x19;  // SPED (parity, baud, data rate)  1.2 kbps air data rate
 80038ba:	2319      	movs	r3, #25
 80038bc:	72fb      	strb	r3, [r7, #11]
	cfg_buff[4] = CHN;   // channel
 80038be:	797b      	ldrb	r3, [r7, #5]
 80038c0:	733b      	strb	r3, [r7, #12]

	switch(mode){
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <LORA_CONFG+0x6a>
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d003      	beq.n	80038d4 <LORA_CONFG+0x70>
 80038cc:	e005      	b.n	80038da <LORA_CONFG+0x76>
	case Transparent:
		cfg_buff[5] = 0x44;  // option
 80038ce:	2344      	movs	r3, #68	; 0x44
 80038d0:	737b      	strb	r3, [r7, #13]
		break;
 80038d2:	e004      	b.n	80038de <LORA_CONFG+0x7a>
	case Fixed:
		cfg_buff[5] = 0xC4;  // option
 80038d4:	23c4      	movs	r3, #196	; 0xc4
 80038d6:	737b      	strb	r3, [r7, #13]
		break;
 80038d8:	e001      	b.n	80038de <LORA_CONFG+0x7a>
	default:
		cfg_buff[5] = 0x44;  // option
 80038da:	2344      	movs	r3, #68	; 0x44
 80038dc:	737b      	strb	r3, [r7, #13]
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) cfg_buff, 6, 1000);
 80038de:	f107 0108 	add.w	r1, r7, #8
 80038e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038e6:	2206      	movs	r2, #6
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <LORA_CONFG+0xb8>)
 80038ea:	f003 ff47 	bl	800777c <HAL_UART_Transmit>

	HAL_Delay(25);
 80038ee:	2019      	movs	r0, #25
 80038f0:	f000 fc08 	bl	8004104 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2101      	movs	r1, #1
 80038f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038fc:	f001 f8b6 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8003900:	2200      	movs	r2, #0
 8003902:	2102      	movs	r1, #2
 8003904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003908:	f001 f8b0 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(25);
 800390c:	2019      	movs	r0, #25
 800390e:	f000 fbf9 	bl	8004104 <HAL_Delay>
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}
 800391a:	bf00      	nop
 800391c:	200008a0 	.word	0x200008a0

08003920 <LORA_READ_PARAMETER>:

void LORA_READ_PARAMETER()
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8003926:	2201      	movs	r2, #1
 8003928:	2101      	movs	r1, #1
 800392a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392e:	f001 f89d 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8003932:	2201      	movs	r2, #1
 8003934:	2102      	movs	r1, #2
 8003936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800393a:	f001 f897 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800393e:	2032      	movs	r0, #50	; 0x32
 8003940:	f000 fbe0 	bl	8004104 <HAL_Delay>

	char buff_read[6] = {0};
 8003944:	463b      	mov	r3, r7
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	809a      	strh	r2, [r3, #4]
	buff_read[0] = 0xC1;
 800394c:	23c1      	movs	r3, #193	; 0xc1
 800394e:	703b      	strb	r3, [r7, #0]
	buff_read[1] = 0xC1;
 8003950:	23c1      	movs	r3, #193	; 0xc1
 8003952:	707b      	strb	r3, [r7, #1]
	buff_read[2] = 0xC1;
 8003954:	23c1      	movs	r3, #193	; 0xc1
 8003956:	70bb      	strb	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t*) buff_read, 3, 1000);
 8003958:	4639      	mov	r1, r7
 800395a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800395e:	2203      	movs	r2, #3
 8003960:	480f      	ldr	r0, [pc, #60]	; (80039a0 <LORA_READ_PARAMETER+0x80>)
 8003962:	f003 ff0b 	bl	800777c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*) buff_read, 6, 1000);
 8003966:	4639      	mov	r1, r7
 8003968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396c:	2206      	movs	r2, #6
 800396e:	480c      	ldr	r0, [pc, #48]	; (80039a0 <LORA_READ_PARAMETER+0x80>)
 8003970:	f003 ff98 	bl	80078a4 <HAL_UART_Receive>

	HAL_Delay(25);
 8003974:	2019      	movs	r0, #25
 8003976:	f000 fbc5 	bl	8004104 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 800397a:	2200      	movs	r2, #0
 800397c:	2101      	movs	r1, #1
 800397e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003982:	f001 f873 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8003986:	2200      	movs	r2, #0
 8003988:	2102      	movs	r1, #2
 800398a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398e:	f001 f86d 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8003992:	2019      	movs	r0, #25
 8003994:	f000 fbb6 	bl	8004104 <HAL_Delay>
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200008a0 	.word	0x200008a0

080039a4 <calcoor>:

float calcoor(float x)
{
 80039a4:	b5b0      	push	{r4, r5, r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = (int)x / 100;
 80039ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b6:	ee17 1a90 	vmov	r1, s15
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <calcoor+0x8c>)
 80039bc:	fb83 2301 	smull	r2, r3, r3, r1
 80039c0:	115a      	asrs	r2, r3, #5
 80039c2:	17cb      	asrs	r3, r1, #31
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ce:	edc7 7a03 	vstr	s15, [r7, #12]
	float b = (x - (a * 100.0)) / 60.0;
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fc fdb8 	bl	8000548 <__aeabi_f2d>
 80039d8:	4604      	mov	r4, r0
 80039da:	460d      	mov	r5, r1
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7fc fdb3 	bl	8000548 <__aeabi_f2d>
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <calcoor+0x90>)
 80039e8:	f7fc fe06 	bl	80005f8 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fc48 	bl	8000288 <__aeabi_dsub>
 80039f8:	4603      	mov	r3, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	4618      	mov	r0, r3
 80039fe:	4621      	mov	r1, r4
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <calcoor+0x94>)
 8003a06:	f7fc ff21 	bl	800084c <__aeabi_ddiv>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4621      	mov	r1, r4
 8003a12:	f7fd f8e9 	bl	8000be8 <__aeabi_d2f>
 8003a16:	4603      	mov	r3, r0
 8003a18:	60bb      	str	r3, [r7, #8]
	return a+b;
 8003a1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a22:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003a26:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a30:	51eb851f 	.word	0x51eb851f
 8003a34:	40590000 	.word	0x40590000
 8003a38:	404e0000 	.word	0x404e0000

08003a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_MspInit+0x44>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <HAL_MspInit+0x44>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6193      	str	r3, [r2, #24]
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_MspInit+0x44>)
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_MspInit+0x44>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_MspInit+0x44>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	61d3      	str	r3, [r2, #28]
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_MspInit+0x44>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <HAL_I2C_MspInit+0x80>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d129      	bne.n	8003b0a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	4b18      	ldr	r3, [pc, #96]	; (8003b18 <HAL_I2C_MspInit+0x84>)
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <HAL_I2C_MspInit+0x84>)
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac0:	6153      	str	r3, [r2, #20]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_I2C_MspInit+0x84>)
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad4:	2312      	movs	r3, #18
 8003ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aee:	f000 fe4b 	bl	8004788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_I2C_MspInit+0x84>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <HAL_I2C_MspInit+0x84>)
 8003af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afc:	61d3      	str	r3, [r2, #28]
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_I2C_MspInit+0x84>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40005800 	.word	0x40005800
 8003b18:	40021000 	.word	0x40021000

08003b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <HAL_TIM_Base_MspInit+0x104>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d114      	bne.n	8003b58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	4a3c      	ldr	r2, [pc, #240]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b38:	6193      	str	r3, [r2, #24]
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	2019      	movs	r0, #25
 8003b4c:	f000 fbd7 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b50:	2019      	movs	r0, #25
 8003b52:	f000 fbf0 	bl	8004336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003b56:	e05e      	b.n	8003c16 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d114      	bne.n	8003b8c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	61d3      	str	r3, [r2, #28]
 8003b6e:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	201c      	movs	r0, #28
 8003b80:	f000 fbbd 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b84:	201c      	movs	r0, #28
 8003b86:	f000 fbd6 	bl	8004336 <HAL_NVIC_EnableIRQ>
}
 8003b8a:	e044      	b.n	8003c16 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM6)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <HAL_TIM_Base_MspInit+0x10c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d114      	bne.n	8003bc0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003b9c:	f043 0310 	orr.w	r3, r3, #16
 8003ba0:	61d3      	str	r3, [r2, #28]
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2036      	movs	r0, #54	; 0x36
 8003bb4:	f000 fba3 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bb8:	2036      	movs	r0, #54	; 0x36
 8003bba:	f000 fbbc 	bl	8004336 <HAL_NVIC_EnableIRQ>
}
 8003bbe:	e02a      	b.n	8003c16 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM15)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_TIM_Base_MspInit+0x110>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6193      	str	r3, [r2, #24]
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
}
 8003be2:	e018      	b.n	8003c16 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM16)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_TIM_Base_MspInit+0x114>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d113      	bne.n	8003c16 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf8:	6193      	str	r3, [r2, #24]
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_TIM_Base_MspInit+0x108>)
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2019      	movs	r0, #25
 8003c0c:	f000 fb77 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003c10:	2019      	movs	r0, #25
 8003c12:	f000 fb90 	bl	8004336 <HAL_NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40001000 	.word	0x40001000
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400

08003c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08e      	sub	sp, #56	; 0x38
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5d      	ldr	r2, [pc, #372]	; (8003dc8 <HAL_UART_MspInit+0x194>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d156      	bne.n	8003d04 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4a5c      	ldr	r2, [pc, #368]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c60:	6193      	str	r3, [r2, #24]
 8003c62:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c78:	6153      	str	r3, [r2, #20]
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c86:	23c0      	movs	r3, #192	; 0xc0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c96:	2307      	movs	r3, #7
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	484b      	ldr	r0, [pc, #300]	; (8003dd0 <HAL_UART_MspInit+0x19c>)
 8003ca2:	f000 fd71 	bl	8004788 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	; (8003dd8 <HAL_UART_MspInit+0x1a4>)
 8003caa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb2:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cbe:	4b45      	ldr	r3, [pc, #276]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cc4:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003cca:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003ccc:	2220      	movs	r2, #32
 8003cce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cd0:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003cd6:	483f      	ldr	r0, [pc, #252]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cd8:	f000 fb47 	bl	800436a <HAL_DMA_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8003ce2:	f7ff feab 	bl	8003a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cea:	671a      	str	r2, [r3, #112]	; 0x70
 8003cec:	4a39      	ldr	r2, [pc, #228]	; (8003dd4 <HAL_UART_MspInit+0x1a0>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2025      	movs	r0, #37	; 0x25
 8003cf8:	f000 fb01 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cfc:	2025      	movs	r0, #37	; 0x25
 8003cfe:	f000 fb1a 	bl	8004336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d02:	e05c      	b.n	8003dbe <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <HAL_UART_MspInit+0x1a8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d129      	bne.n	8003d62 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d0e:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d18:	61d3      	str	r3, [r2, #28]
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d26:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d30:	6153      	str	r3, [r2, #20]
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d3e:	230c      	movs	r3, #12
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d4e:	2307      	movs	r3, #7
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d56:	4619      	mov	r1, r3
 8003d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5c:	f000 fd14 	bl	8004788 <HAL_GPIO_Init>
}
 8003d60:	e02d      	b.n	8003dbe <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_UART_MspInit+0x1ac>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d128      	bne.n	8003dbe <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d6c:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d76:	61d3      	str	r3, [r2, #28]
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8e:	6153      	str	r3, [r2, #20]
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_UART_MspInit+0x198>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003daa:	2303      	movs	r3, #3
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dae:	2307      	movs	r3, #7
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db6:	4619      	mov	r1, r3
 8003db8:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <HAL_UART_MspInit+0x19c>)
 8003dba:	f000 fce5 	bl	8004788 <HAL_GPIO_Init>
}
 8003dbe:	bf00      	nop
 8003dc0:	3738      	adds	r7, #56	; 0x38
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	48000400 	.word	0x48000400
 8003dd4:	200006a0 	.word	0x200006a0
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40004400 	.word	0x40004400
 8003de0:	40004800 	.word	0x40004800

08003de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003df6:	e7fe      	b.n	8003df6 <HardFault_Handler+0x4>

08003df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dfc:	e7fe      	b.n	8003dfc <MemManage_Handler+0x4>

08003dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <BusFault_Handler+0x4>

08003e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <UsageFault_Handler+0x4>

08003e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e38:	f000 f944 	bl	80040c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <DMA1_Channel5_IRQHandler+0x10>)
 8003e46:	f000 fbad 	bl	80045a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200006a0 	.word	0x200006a0

08003e54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e58:	4805      	ldr	r0, [pc, #20]	; (8003e70 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8003e5a:	f003 f8aa 	bl	8006fb2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003e5e:	4805      	ldr	r0, [pc, #20]	; (8003e74 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8003e60:	f003 f8a7 	bl	8006fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	  MPU_RP = 1;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200007b8 	.word	0x200007b8
 8003e74:	20000924 	.word	0x20000924
 8003e78:	200002d2 	.word	0x200002d2

08003e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e80:	4812      	ldr	r0, [pc, #72]	; (8003ecc <TIM2_IRQHandler+0x50>)
 8003e82:	f003 f896 	bl	8006fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(t1 == 2){
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <TIM2_IRQHandler+0x54>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d105      	bne.n	8003e9a <TIM2_IRQHandler+0x1e>
	  warning = 1;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <TIM2_IRQHandler+0x58>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
	  t1 = 0;
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <TIM2_IRQHandler+0x54>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
  }
  if(t2 == 6){
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <TIM2_IRQHandler+0x5c>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d105      	bne.n	8003eae <TIM2_IRQHandler+0x32>
	RF = 1;
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <TIM2_IRQHandler+0x60>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
	t2 = 0;
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <TIM2_IRQHandler+0x5c>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
  }
  t2++;
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <TIM2_IRQHandler+0x5c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <TIM2_IRQHandler+0x5c>)
 8003eb8:	701a      	strb	r2, [r3, #0]
  t1++;
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <TIM2_IRQHandler+0x54>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <TIM2_IRQHandler+0x54>)
 8003ec4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000850 	.word	0x20000850
 8003ed0:	200002d7 	.word	0x200002d7
 8003ed4:	200002cf 	.word	0x200002cf
 8003ed8:	200002d6 	.word	0x200002d6
 8003edc:	200002d4 	.word	0x200002d4

08003ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ee4:	4809      	ldr	r0, [pc, #36]	; (8003f0c <USART1_IRQHandler+0x2c>)
 8003ee6:	f003 fdeb 	bl	8007ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <USART1_IRQHandler+0x2c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d106      	bne.n	8003f06 <USART1_IRQHandler+0x26>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <USART1_IRQHandler+0x2c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2210      	movs	r2, #16
 8003efe:	621a      	str	r2, [r3, #32]
	  HAL_UART_RxCpltCallback(&huart1);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <USART1_IRQHandler+0x2c>)
 8003f02:	f7fd fe89 	bl	8001c18 <HAL_UART_RxCpltCallback>

  }
  /* USER CODE END USART1_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200006e8 	.word	0x200006e8

08003f10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f14:	480b      	ldr	r0, [pc, #44]	; (8003f44 <TIM6_DAC_IRQHandler+0x34>)
 8003f16:	f003 f84c 	bl	8006fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	MPU = 1;
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <TIM6_DAC_IRQHandler+0x38>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
	if(a == 8){//1.6-2.12-
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <TIM6_DAC_IRQHandler+0x3c>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d105      	bne.n	8003f34 <TIM6_DAC_IRQHandler+0x24>
	BME = 1;
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <TIM6_DAC_IRQHandler+0x40>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
	a = 0;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <TIM6_DAC_IRQHandler+0x3c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
	}
	a++;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <TIM6_DAC_IRQHandler+0x3c>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <TIM6_DAC_IRQHandler+0x3c>)
 8003f3e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	2000076c 	.word	0x2000076c
 8003f48:	200002cb 	.word	0x200002cb
 8003f4c:	200002d5 	.word	0x200002d5
 8003f50:	200002cd 	.word	0x200002cd

08003f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <_sbrk+0x5c>)
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <_sbrk+0x60>)
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <_sbrk+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <_sbrk+0x64>)
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <_sbrk+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d207      	bcs.n	8003f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f84:	f004 fbf6 	bl	8008774 <__errno>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	e009      	b.n	8003fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_sbrk+0x64>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <_sbrk+0x64>)
 8003fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20004000 	.word	0x20004000
 8003fb4:	00000400 	.word	0x00000400
 8003fb8:	200002d8 	.word	0x200002d8
 8003fbc:	20000990 	.word	0x20000990

08003fc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <SystemInit+0x20>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <SystemInit+0x20>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800401c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe8:	480d      	ldr	r0, [pc, #52]	; (8004020 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fea:	490e      	ldr	r1, [pc, #56]	; (8004024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <LoopForever+0xe>)
  movs r3, #0
 8003fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ff0:	e002      	b.n	8003ff8 <LoopCopyDataInit>

08003ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ff6:	3304      	adds	r3, #4

08003ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ffc:	d3f9      	bcc.n	8003ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	; (800402c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004000:	4c0b      	ldr	r4, [pc, #44]	; (8004030 <LoopForever+0x16>)
  movs r3, #0
 8004002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004004:	e001      	b.n	800400a <LoopFillZerobss>

08004006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004008:	3204      	adds	r2, #4

0800400a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800400a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800400c:	d3fb      	bcc.n	8004006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800400e:	f7ff ffd7 	bl	8003fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004012:	f004 fbb5 	bl	8008780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004016:	f7fd ffbb 	bl	8001f90 <main>

0800401a <LoopForever>:

LoopForever:
    b LoopForever
 800401a:	e7fe      	b.n	800401a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800401c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004024:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004028:	0800d5c0 	.word	0x0800d5c0
  ldr r2, =_sbss
 800402c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004030:	2000098c 	.word	0x2000098c

08004034 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC1_IRQHandler>
	...

08004038 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_Init+0x28>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a07      	ldr	r2, [pc, #28]	; (8004060 <HAL_Init+0x28>)
 8004042:	f043 0310 	orr.w	r3, r3, #16
 8004046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004048:	2003      	movs	r0, #3
 800404a:	f000 f94d 	bl	80042e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800404e:	2000      	movs	r0, #0
 8004050:	f000 f808 	bl	8004064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004054:	f7ff fcfa 	bl	8003a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40022000 	.word	0x40022000

08004064 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_InitTick+0x54>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_InitTick+0x58>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800407a:	fbb3 f3f1 	udiv	r3, r3, r1
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f965 	bl	8004352 <HAL_SYSTICK_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00e      	b.n	80040b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d80a      	bhi.n	80040ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	2200      	movs	r2, #0
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f000 f92d 	bl	80042fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <HAL_InitTick+0x5c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000018 	.word	0x20000018
 80040bc:	20000020 	.word	0x20000020
 80040c0:	2000001c 	.word	0x2000001c

080040c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_IncTick+0x20>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_IncTick+0x24>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_IncTick+0x24>)
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000020 	.word	0x20000020
 80040e8:	20000984 	.word	0x20000984

080040ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_GetTick+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000984 	.word	0x20000984

08004104 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff ffee 	bl	80040ec <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d005      	beq.n	800412a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_Delay+0x40>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800412a:	bf00      	nop
 800412c:	f7ff ffde 	bl	80040ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d8f7      	bhi.n	800412c <HAL_Delay+0x28>
  {
  }
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000020 	.word	0x20000020

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	; (80041e4 <__NVIC_EnableIRQ+0x38>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db0a      	blt.n	8004212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	490c      	ldr	r1, [pc, #48]	; (8004234 <__NVIC_SetPriority+0x4c>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	440b      	add	r3, r1
 800420c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004210:	e00a      	b.n	8004228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4908      	ldr	r1, [pc, #32]	; (8004238 <__NVIC_SetPriority+0x50>)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3b04      	subs	r3, #4
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	440b      	add	r3, r1
 8004226:	761a      	strb	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000e100 	.word	0xe000e100
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f1c3 0307 	rsb	r3, r3, #7
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf28      	it	cs
 800425a:	2304      	movcs	r3, #4
 800425c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3304      	adds	r3, #4
 8004262:	2b06      	cmp	r3, #6
 8004264:	d902      	bls.n	800426c <NVIC_EncodePriority+0x30>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3b03      	subs	r3, #3
 800426a:	e000      	b.n	800426e <NVIC_EncodePriority+0x32>
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	401a      	ands	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004284:	f04f 31ff 	mov.w	r1, #4294967295
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	4313      	orrs	r3, r2
         );
}
 8004296:	4618      	mov	r0, r3
 8004298:	3724      	adds	r7, #36	; 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b4:	d301      	bcc.n	80042ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b6:	2301      	movs	r3, #1
 80042b8:	e00f      	b.n	80042da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <SysTick_Config+0x40>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3b01      	subs	r3, #1
 80042c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c2:	210f      	movs	r1, #15
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	f7ff ff8e 	bl	80041e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SysTick_Config+0x40>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <SysTick_Config+0x40>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	e000e010 	.word	0xe000e010

080042e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff29 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004310:	f7ff ff3e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	6978      	ldr	r0, [r7, #20]
 800431c:	f7ff ff8e 	bl	800423c <NVIC_EncodePriority>
 8004320:	4602      	mov	r2, r0
 8004322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff5d 	bl	80041e8 <__NVIC_SetPriority>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff31 	bl	80041ac <__NVIC_EnableIRQ>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ffa2 	bl	80042a4 <SysTick_Config>
 8004360:	4603      	mov	r3, r0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e037      	b.n	80043f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004396:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800439a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9b8 	bl	8004748 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}  
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_DMA_Start_IT+0x20>
 8004414:	2302      	movs	r3, #2
 8004416:	e04a      	b.n	80044ae <HAL_DMA_Start_IT+0xb6>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004426:	2b01      	cmp	r3, #1
 8004428:	d13a      	bne.n	80044a0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f94b 	bl	80046ea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 020e 	orr.w	r2, r2, #14
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e00f      	b.n	800448e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 020a 	orr.w	r2, r2, #10
 800447c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e005      	b.n	80044ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
 80044aa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
} 
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d008      	beq.n	80044da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2204      	movs	r2, #4
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e020      	b.n	800451c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 020e 	bic.w	r2, r2, #14
 80044e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2101      	movs	r1, #1
 8004504:	fa01 f202 	lsl.w	r2, r1, r2
 8004508:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800453a:	2b02      	cmp	r3, #2
 800453c:	d005      	beq.n	800454a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e027      	b.n	800459a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 020e 	bic.w	r2, r2, #14
 8004558:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
    } 
  }
  return status;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2204      	movs	r2, #4
 80045c2:	409a      	lsls	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d024      	beq.n	8004616 <HAL_DMA_IRQHandler+0x72>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01f      	beq.n	8004616 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d107      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	2104      	movs	r1, #4
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d06a      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004614:	e065      	b.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2202      	movs	r2, #2
 800461c:	409a      	lsls	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02c      	beq.n	8004680 <HAL_DMA_IRQHandler+0xdc>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d027      	beq.n	8004680 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 020a 	bic.w	r2, r2, #10
 800464c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2102      	movs	r1, #2
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d035      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800467e:	e030      	b.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2208      	movs	r2, #8
 8004686:	409a      	lsls	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d028      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d023      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 020e 	bic.w	r2, r2, #14
 80046a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    }
  }
}  
 80046e0:	e7ff      	b.n	80046e2 <HAL_DMA_IRQHandler+0x13e>
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f202 	lsl.w	r2, r1, r2
 8004706:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d108      	bne.n	800472a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004728:	e007      	b.n	800473a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	60da      	str	r2, [r3, #12]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <DMA_CalcBaseAndBitshift+0x34>)
 8004758:	4413      	add	r3, r2
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <DMA_CalcBaseAndBitshift+0x38>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a06      	ldr	r2, [pc, #24]	; (8004784 <DMA_CalcBaseAndBitshift+0x3c>)
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	bffdfff8 	.word	0xbffdfff8
 8004780:	cccccccd 	.word	0xcccccccd
 8004784:	40020000 	.word	0x40020000

08004788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004796:	e14e      	b.n	8004a36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2101      	movs	r1, #1
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8140 	beq.w	8004a30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d00b      	beq.n	80047d0 <HAL_GPIO_Init+0x48>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d007      	beq.n	80047d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047c4:	2b11      	cmp	r3, #17
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b12      	cmp	r3, #18
 80047ce:	d130      	bne.n	8004832 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004806:	2201      	movs	r2, #1
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0201 	and.w	r2, r3, #1
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	2203      	movs	r2, #3
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0xea>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b12      	cmp	r3, #18
 8004870:	d123      	bne.n	80048ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	08da      	lsrs	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3208      	adds	r2, #8
 800487a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	6939      	ldr	r1, [r7, #16]
 80048b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	2203      	movs	r2, #3
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4013      	ands	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0203 	and.w	r2, r3, #3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 809a 	beq.w	8004a30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048fc:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	4a54      	ldr	r2, [pc, #336]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6193      	str	r3, [r2, #24]
 8004908:	4b52      	ldr	r3, [pc, #328]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004914:	4a50      	ldr	r2, [pc, #320]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	3302      	adds	r3, #2
 800491c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	220f      	movs	r2, #15
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800493e:	d013      	beq.n	8004968 <HAL_GPIO_Init+0x1e0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a46      	ldr	r2, [pc, #280]	; (8004a5c <HAL_GPIO_Init+0x2d4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00d      	beq.n	8004964 <HAL_GPIO_Init+0x1dc>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a45      	ldr	r2, [pc, #276]	; (8004a60 <HAL_GPIO_Init+0x2d8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <HAL_GPIO_Init+0x1d8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a44      	ldr	r2, [pc, #272]	; (8004a64 <HAL_GPIO_Init+0x2dc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_GPIO_Init+0x1d4>
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <HAL_GPIO_Init+0x1e2>
 800495c:	2305      	movs	r3, #5
 800495e:	e004      	b.n	800496a <HAL_GPIO_Init+0x1e2>
 8004960:	2302      	movs	r3, #2
 8004962:	e002      	b.n	800496a <HAL_GPIO_Init+0x1e2>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_GPIO_Init+0x1e2>
 8004968:	2300      	movs	r3, #0
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	f002 0203 	and.w	r2, r2, #3
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	4093      	lsls	r3, r2
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800497a:	4937      	ldr	r1, [pc, #220]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004988:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049ac:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049b2:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049d6:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049dc:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4013      	ands	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a06:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4013      	ands	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <HAL_GPIO_Init+0x2e0>)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3301      	adds	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f aea9 	bne.w	8004798 <HAL_GPIO_Init+0x10>
  }
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	48000400 	.word	0x48000400
 8004a60:	48000800 	.word	0x48000800
 8004a64:	48000c00 	.word	0x48000c00
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a88:	e002      	b.n	8004a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	041a      	lsls	r2, r3, #16
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	43d9      	mvns	r1, r3
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	400b      	ands	r3, r1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	619a      	str	r2, [r3, #24]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e081      	b.n	8004be6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe ffcc 	bl	8003a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	e006      	b.n	8004b58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d104      	bne.n	8004b6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	ea42 0103 	orr.w	r1, r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	021a      	lsls	r2, r3, #8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69d9      	ldr	r1, [r3, #28]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	817b      	strh	r3, [r7, #10]
 8004c02:	460b      	mov	r3, r1
 8004c04:	813b      	strh	r3, [r7, #8]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	f040 80f9 	bne.w	8004e0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x34>
 8004c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0ed      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_I2C_Mem_Write+0x4e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0e6      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c46:	f7ff fa51 	bl	80040ec <HAL_GetTick>
 8004c4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	2319      	movs	r3, #25
 8004c52:	2201      	movs	r2, #1
 8004c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fbcb 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0d1      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2221      	movs	r2, #33	; 0x21
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2240      	movs	r2, #64	; 0x40
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c90:	88f8      	ldrh	r0, [r7, #6]
 8004c92:	893a      	ldrh	r2, [r7, #8]
 8004c94:	8979      	ldrh	r1, [r7, #10]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fadb 	bl	800525c <I2C_RequestMemoryWrite>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0a9      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2bff      	cmp	r3, #255	; 0xff
 8004cc0:	d90e      	bls.n	8004ce0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	8979      	ldrh	r1, [r7, #10]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fcad 	bl	8005638 <I2C_TransferConfig>
 8004cde:	e00f      	b.n	8004d00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	8979      	ldrh	r1, [r7, #10]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fc9c 	bl	8005638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fbb5 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e07b      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d034      	beq.n	8004db8 <HAL_I2C_Mem_Write+0x1c8>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d130      	bne.n	8004db8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	; 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fb47 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e04d      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2bff      	cmp	r3, #255	; 0xff
 8004d78:	d90e      	bls.n	8004d98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	8979      	ldrh	r1, [r7, #10]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fc51 	bl	8005638 <I2C_TransferConfig>
 8004d96:	e00f      	b.n	8004db8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	8979      	ldrh	r1, [r7, #10]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fc40 	bl	8005638 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d19e      	bne.n	8004d00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb94 	bl	80054f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e01a      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_I2C_Mem_Write+0x224>)
 8004dea:	400b      	ands	r3, r1
 8004dec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	fe00e800 	.word	0xfe00e800

08004e18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	813b      	strh	r3, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	f040 80fd 	bne.w	800503a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x34>
 8004e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0f1      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_I2C_Mem_Read+0x4e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0ea      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e6e:	f7ff f93d 	bl	80040ec <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2319      	movs	r3, #25
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fab7 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0d5      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2222      	movs	r2, #34	; 0x22
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eb8:	88f8      	ldrh	r0, [r7, #6]
 8004eba:	893a      	ldrh	r2, [r7, #8]
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fa1b 	bl	8005304 <I2C_RequestMemoryRead>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0ad      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2bff      	cmp	r3, #255	; 0xff
 8004ee8:	d90e      	bls.n	8004f08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	22ff      	movs	r2, #255	; 0xff
 8004eee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	8979      	ldrh	r1, [r7, #10]
 8004ef8:	4b52      	ldr	r3, [pc, #328]	; (8005044 <HAL_I2C_Mem_Read+0x22c>)
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fb99 	bl	8005638 <I2C_TransferConfig>
 8004f06:	e00f      	b.n	8004f28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	8979      	ldrh	r1, [r7, #10]
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_I2C_Mem_Read+0x22c>)
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fb88 	bl	8005638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2104      	movs	r1, #4
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fa5e 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e07c      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d034      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x1d0>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d130      	bne.n	8004fe8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa2f 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e04d      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2bff      	cmp	r3, #255	; 0xff
 8004fa8:	d90e      	bls.n	8004fc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	22ff      	movs	r2, #255	; 0xff
 8004fae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	8979      	ldrh	r1, [r7, #10]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fb39 	bl	8005638 <I2C_TransferConfig>
 8004fc6:	e00f      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	8979      	ldrh	r1, [r7, #10]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fb28 	bl	8005638 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d19a      	bne.n	8004f28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa7c 	bl	80054f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e01a      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2220      	movs	r2, #32
 800500c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6859      	ldr	r1, [r3, #4]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_I2C_Mem_Read+0x230>)
 800501a:	400b      	ands	r3, r1
 800501c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e000      	b.n	800503c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
  }
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	80002400 	.word	0x80002400
 8005048:	fe00e800 	.word	0xfe00e800

0800504c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b20      	cmp	r3, #32
 800506a:	f040 80f1 	bne.w	8005250 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507c:	d101      	bne.n	8005082 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
 8005080:	e0e7      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_I2C_IsDeviceReady+0x44>
 800508c:	2302      	movs	r3, #2
 800508e:	e0e0      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2224      	movs	r2, #36	; 0x24
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_I2C_IsDeviceReady+0x72>
 80050ae:	897b      	ldrh	r3, [r7, #10]
 80050b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050bc:	e004      	b.n	80050c8 <HAL_I2C_IsDeviceReady+0x7c>
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80050ce:	f7ff f80d 	bl	80040ec <HAL_GetTick>
 80050d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b20      	cmp	r3, #32
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	bf0c      	ite	eq
 80050f8:	2301      	moveq	r3, #1
 80050fa:	2300      	movne	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005100:	e034      	b.n	800516c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d01a      	beq.n	8005140 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fe ffef 	bl	80040ec <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <HAL_I2C_IsDeviceReady+0xd4>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	f043 0220 	orr.w	r2, r3, #32
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e088      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b20      	cmp	r3, #32
 800514c:	bf0c      	ite	eq
 800514e:	2301      	moveq	r3, #1
 8005150:	2300      	movne	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800516c:	7ffb      	ldrb	r3, [r7, #31]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <HAL_I2C_IsDeviceReady+0x12c>
 8005172:	7fbb      	ldrb	r3, [r7, #30]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0c4      	beq.n	8005102 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b10      	cmp	r3, #16
 8005184:	d01a      	beq.n	80051bc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	2120      	movs	r1, #32
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f92f 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e058      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2220      	movs	r2, #32
 80051a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e04a      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	2120      	movs	r1, #32
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f914 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e03d      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2210      	movs	r2, #16
 80051dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2220      	movs	r2, #32
 80051e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d118      	bne.n	8005220 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	2120      	movs	r1, #32
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f8f3 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e01c      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2220      	movs	r2, #32
 800521e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3301      	adds	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	f63f af3b 	bhi.w	80050a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	8979      	ldrh	r1, [r7, #10]
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <I2C_RequestMemoryWrite+0xa4>)
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f9d7 	bl	8005638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f8f0 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e02c      	b.n	80052f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	629a      	str	r2, [r3, #40]	; 0x28
 80052ae:	e015      	b.n	80052dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052b0:	893b      	ldrh	r3, [r7, #8]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	69b9      	ldr	r1, [r7, #24]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f8d6 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e012      	b.n	80052f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f884 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	80002000 	.word	0x80002000

08005304 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	461a      	mov	r2, r3
 8005312:	4603      	mov	r3, r0
 8005314:	817b      	strh	r3, [r7, #10]
 8005316:	460b      	mov	r3, r1
 8005318:	813b      	strh	r3, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	b2da      	uxtb	r2, r3
 8005322:	8979      	ldrh	r1, [r7, #10]
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <I2C_RequestMemoryRead+0xa4>)
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f984 	bl	8005638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	69b9      	ldr	r1, [r7, #24]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f89d 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e02c      	b.n	800539e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
 8005354:	e015      	b.n	8005382 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	b29b      	uxth	r3, r3
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f883 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e012      	b.n	800539e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2200      	movs	r2, #0
 800538a:	2140      	movs	r1, #64	; 0x40
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f831 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	80002000 	.word	0x80002000

080053ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d103      	bne.n	80053ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d007      	beq.n	80053e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	619a      	str	r2, [r3, #24]
  }
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005404:	e022      	b.n	800544c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d01e      	beq.n	800544c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe fe6d 	bl	80040ec <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d113      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e00f      	b.n	800546c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	429a      	cmp	r2, r3
 8005468:	d0cd      	beq.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005480:	e02c      	b.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f870 	bl	800556c <I2C_IsAcknowledgeFailed>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e02a      	b.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d01e      	beq.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fe fe25 	bl	80040ec <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d113      	bne.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e007      	b.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d1cb      	bne.n	8005482 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005500:	e028      	b.n	8005554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f830 	bl	800556c <I2C_IsAcknowledgeFailed>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e026      	b.n	8005564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fe fde9 	bl	80040ec <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e007      	b.n	8005564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d1cf      	bne.n	8005502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b10      	cmp	r3, #16
 8005584:	d151      	bne.n	800562a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005586:	e022      	b.n	80055ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d01e      	beq.n	80055ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fe fdac 	bl	80040ec <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <I2C_IsAcknowledgeFailed+0x3a>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d113      	bne.n	80055ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e02e      	b.n	800562c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d1d5      	bne.n	8005588 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2210      	movs	r2, #16
 80055e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2220      	movs	r2, #32
 80055ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff fedd 	bl	80053ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <I2C_IsAcknowledgeFailed+0xc8>)
 80055fe:	400b      	ands	r3, r1
 8005600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	fe00e800 	.word	0xfe00e800

08005638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	817b      	strh	r3, [r7, #10]
 8005646:	4613      	mov	r3, r2
 8005648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	0d5b      	lsrs	r3, r3, #21
 8005654:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <I2C_TransferConfig+0x58>)
 800565a:	430b      	orrs	r3, r1
 800565c:	43db      	mvns	r3, r3
 800565e:	ea02 0103 	and.w	r1, r2, r3
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005668:	7a7b      	ldrb	r3, [r7, #9]
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	431a      	orrs	r2, r3
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	03ff63ff 	.word	0x03ff63ff

08005694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d138      	bne.n	800571c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e032      	b.n	800571e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	; 0x24
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6819      	ldr	r1, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b20      	cmp	r3, #32
 800573e:	d139      	bne.n	80057b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800574a:	2302      	movs	r3, #2
 800574c:	e033      	b.n	80057b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2224      	movs	r2, #36	; 0x24
 800575a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800577c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f000 bef4 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 816a 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80057ee:	4bb3      	ldr	r3, [pc, #716]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d00c      	beq.n	8005814 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057fa:	4bb0      	ldr	r3, [pc, #704]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b08      	cmp	r3, #8
 8005804:	d159      	bne.n	80058ba <HAL_RCC_OscConfig+0xf6>
 8005806:	4bad      	ldr	r3, [pc, #692]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005812:	d152      	bne.n	80058ba <HAL_RCC_OscConfig+0xf6>
 8005814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005818:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005820:	fa93 f3a3 	rbit	r3, r3
 8005824:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005828:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	fab3 f383 	clz	r3, r3
 8005830:	b2db      	uxtb	r3, r3
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <HAL_RCC_OscConfig+0x82>
 8005840:	4b9e      	ldr	r3, [pc, #632]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	e015      	b.n	8005872 <HAL_RCC_OscConfig+0xae>
 8005846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800584a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800585a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800585e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005862:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005866:	fa93 f3a3 	rbit	r3, r3
 800586a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800586e:	4b93      	ldr	r3, [pc, #588]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005876:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800587a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800587e:	fa92 f2a2 	rbit	r2, r2
 8005882:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005886:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800588a:	fab2 f282 	clz	r2, r2
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	f042 0220 	orr.w	r2, r2, #32
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	f002 021f 	and.w	r2, r2, #31
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f202 	lsl.w	r2, r1, r2
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 810c 	beq.w	8005ac0 <HAL_RCC_OscConfig+0x2fc>
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 8106 	bne.w	8005ac0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f000 be86 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	d106      	bne.n	80058d4 <HAL_RCC_OscConfig+0x110>
 80058c6:	4b7d      	ldr	r3, [pc, #500]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a7c      	ldr	r2, [pc, #496]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e030      	b.n	8005936 <HAL_RCC_OscConfig+0x172>
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x134>
 80058de:	4b77      	ldr	r3, [pc, #476]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a76      	ldr	r2, [pc, #472]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80058e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b74      	ldr	r3, [pc, #464]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a73      	ldr	r2, [pc, #460]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80058f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e01e      	b.n	8005936 <HAL_RCC_OscConfig+0x172>
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005902:	d10c      	bne.n	800591e <HAL_RCC_OscConfig+0x15a>
 8005904:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a6c      	ldr	r2, [pc, #432]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 800590a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b6a      	ldr	r3, [pc, #424]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a69      	ldr	r2, [pc, #420]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e00b      	b.n	8005936 <HAL_RCC_OscConfig+0x172>
 800591e:	4b67      	ldr	r3, [pc, #412]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a66      	ldr	r2, [pc, #408]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4b64      	ldr	r3, [pc, #400]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a63      	ldr	r2, [pc, #396]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005934:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005936:	4b61      	ldr	r3, [pc, #388]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f023 020f 	bic.w	r2, r3, #15
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	495d      	ldr	r1, [pc, #372]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005946:	4313      	orrs	r3, r2
 8005948:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d059      	beq.n	8005a08 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fe fbca 	bl	80040ec <HAL_GetTick>
 8005958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800595e:	f7fe fbc5 	bl	80040ec <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d902      	bls.n	8005974 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	f000 be29 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>
 8005974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005978:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005980:	fa93 f3a3 	rbit	r3, r3
 8005984:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005988:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598c:	fab3 f383 	clz	r3, r3
 8005990:	b2db      	uxtb	r3, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d102      	bne.n	80059a6 <HAL_RCC_OscConfig+0x1e2>
 80059a0:	4b46      	ldr	r3, [pc, #280]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	e015      	b.n	80059d2 <HAL_RCC_OscConfig+0x20e>
 80059a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80059ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80059c2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80059ce:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80059da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80059de:	fa92 f2a2 	rbit	r2, r2
 80059e2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80059e6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80059ea:	fab2 f282 	clz	r2, r2
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	f002 021f 	and.w	r2, r2, #31
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ab      	beq.n	800595e <HAL_RCC_OscConfig+0x19a>
 8005a06:	e05c      	b.n	8005ac2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fe fb70 	bl	80040ec <HAL_GetTick>
 8005a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a10:	e00a      	b.n	8005a28 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a12:	f7fe fb6b 	bl	80040ec <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d902      	bls.n	8005a28 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	f000 bdcf 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>
 8005a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005a34:	fa93 f3a3 	rbit	r3, r3
 8005a38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005a3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a40:	fab3 f383 	clz	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d102      	bne.n	8005a5a <HAL_RCC_OscConfig+0x296>
 8005a54:	4b19      	ldr	r3, [pc, #100]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	e015      	b.n	8005a86 <HAL_RCC_OscConfig+0x2c2>
 8005a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005a76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005a7a:	fa93 f3a3 	rbit	r3, r3
 8005a7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005a82:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <HAL_RCC_OscConfig+0x2f8>)
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005a8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005a92:	fa92 f2a2 	rbit	r2, r2
 8005a96:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005a9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005a9e:	fab2 f282 	clz	r2, r2
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	f042 0220 	orr.w	r2, r2, #32
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	f002 021f 	and.w	r2, r2, #31
 8005aae:	2101      	movs	r1, #1
 8005ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1ab      	bne.n	8005a12 <HAL_RCC_OscConfig+0x24e>
 8005aba:	e002      	b.n	8005ac2 <HAL_RCC_OscConfig+0x2fe>
 8005abc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 816f 	beq.w	8005db0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ad2:	4bd0      	ldr	r3, [pc, #832]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005ade:	4bcd      	ldr	r3, [pc, #820]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d16c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x400>
 8005aea:	4bca      	ldr	r3, [pc, #808]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d166      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x400>
 8005af6:	2302      	movs	r3, #2
 8005af8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005b00:	fa93 f3a3 	rbit	r3, r3
 8005b04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005b08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCC_OscConfig+0x362>
 8005b20:	4bbc      	ldr	r3, [pc, #752]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	e013      	b.n	8005b4e <HAL_RCC_OscConfig+0x38a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005b3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005b4a:	4bb2      	ldr	r3, [pc, #712]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005b54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005b58:	fa92 f2a2 	rbit	r2, r2
 8005b5c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005b60:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005b64:	fab2 f282 	clz	r2, r2
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	f042 0220 	orr.w	r2, r2, #32
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	f002 021f 	and.w	r2, r2, #31
 8005b74:	2101      	movs	r1, #1
 8005b76:	fa01 f202 	lsl.w	r2, r1, r2
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <HAL_RCC_OscConfig+0x3cc>
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d002      	beq.n	8005b90 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f000 bd1b 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b90:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	21f8      	movs	r1, #248	; 0xf8
 8005ba0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005ba8:	fa91 f1a1 	rbit	r1, r1
 8005bac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005bb0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005bb4:	fab1 f181 	clz	r1, r1
 8005bb8:	b2c9      	uxtb	r1, r1
 8005bba:	408b      	lsls	r3, r1
 8005bbc:	4995      	ldr	r1, [pc, #596]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc2:	e0f5      	b.n	8005db0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bc4:	1d3b      	adds	r3, r7, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8085 	beq.w	8005cda <HAL_RCC_OscConfig+0x516>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005be2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be6:	fab3 f383 	clz	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fe fa76 	bl	80040ec <HAL_GetTick>
 8005c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c04:	e00a      	b.n	8005c1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c06:	f7fe fa71 	bl	80040ec <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d902      	bls.n	8005c1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	f000 bcd5 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005c26:	fa93 f3a3 	rbit	r3, r3
 8005c2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005c2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c32:	fab3 f383 	clz	r3, r3
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d102      	bne.n	8005c4c <HAL_RCC_OscConfig+0x488>
 8005c46:	4b73      	ldr	r3, [pc, #460]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	e013      	b.n	8005c74 <HAL_RCC_OscConfig+0x4b0>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005c5e:	2302      	movs	r3, #2
 8005c60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005c64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005c68:	fa93 f3a3 	rbit	r3, r3
 8005c6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005c70:	4b68      	ldr	r3, [pc, #416]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2202      	movs	r2, #2
 8005c76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005c7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005c7e:	fa92 f2a2 	rbit	r2, r2
 8005c82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005c86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005c8a:	fab2 f282 	clz	r2, r2
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	f042 0220 	orr.w	r2, r2, #32
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	f002 021f 	and.w	r2, r2, #31
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0af      	beq.n	8005c06 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca6:	4b5b      	ldr	r3, [pc, #364]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cae:	1d3b      	adds	r3, r7, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	21f8      	movs	r1, #248	; 0xf8
 8005cb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005cbe:	fa91 f1a1 	rbit	r1, r1
 8005cc2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005cc6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005cca:	fab1 f181 	clz	r1, r1
 8005cce:	b2c9      	uxtb	r1, r1
 8005cd0:	408b      	lsls	r3, r1
 8005cd2:	4950      	ldr	r1, [pc, #320]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
 8005cd8:	e06a      	b.n	8005db0 <HAL_RCC_OscConfig+0x5ec>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ce4:	fa93 f3a3 	rbit	r3, r3
 8005ce8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005cec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cf0:	fab3 f383 	clz	r3, r3
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	461a      	mov	r2, r3
 8005d02:	2300      	movs	r3, #0
 8005d04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d06:	f7fe f9f1 	bl	80040ec <HAL_GetTick>
 8005d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d10:	f7fe f9ec 	bl	80040ec <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d902      	bls.n	8005d26 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	f000 bc50 	b.w	80065c6 <HAL_RCC_OscConfig+0xe02>
 8005d26:	2302      	movs	r3, #2
 8005d28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d30:	fa93 f3a3 	rbit	r3, r3
 8005d34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d3c:	fab3 f383 	clz	r3, r3
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d102      	bne.n	8005d56 <HAL_RCC_OscConfig+0x592>
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	e013      	b.n	8005d7e <HAL_RCC_OscConfig+0x5ba>
 8005d56:	2302      	movs	r3, #2
 8005d58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d60:	fa93 f3a3 	rbit	r3, r3
 8005d64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d72:	fa93 f3a3 	rbit	r3, r3
 8005d76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_RCC_OscConfig+0x650>)
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005d84:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005d88:	fa92 f2a2 	rbit	r2, r2
 8005d8c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005d90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005d94:	fab2 f282 	clz	r2, r2
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	f042 0220 	orr.w	r2, r2, #32
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	f002 021f 	and.w	r2, r2, #31
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f202 	lsl.w	r2, r1, r2
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1af      	bne.n	8005d10 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80da 	beq.w	8005f74 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dc0:	1d3b      	adds	r3, r7, #4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d069      	beq.n	8005e9e <HAL_RCC_OscConfig+0x6da>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dd4:	fa93 f3a3 	rbit	r3, r3
 8005dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005de0:	fab3 f383 	clz	r3, r3
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_OscConfig+0x654>)
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	461a      	mov	r2, r3
 8005df0:	2301      	movs	r3, #1
 8005df2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df4:	f7fe f97a 	bl	80040ec <HAL_GetTick>
 8005df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfc:	e00e      	b.n	8005e1c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dfe:	f7fe f975 	bl	80040ec <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d906      	bls.n	8005e1c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e3d9      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 8005e12:	bf00      	nop
 8005e14:	40021000 	.word	0x40021000
 8005e18:	10908120 	.word	0x10908120
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e26:	fa93 f3a3 	rbit	r3, r3
 8005e2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e32:	2202      	movs	r2, #2
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	fa93 f2a3 	rbit	r2, r3
 8005e40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	fa93 f2a3 	rbit	r2, r3
 8005e58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005e5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5e:	4ba5      	ldr	r3, [pc, #660]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8005e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005e66:	2102      	movs	r1, #2
 8005e68:	6019      	str	r1, [r3, #0]
 8005e6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	fa93 f1a3 	rbit	r1, r3
 8005e74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005e78:	6019      	str	r1, [r3, #0]
  return result;
 8005e7a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	2101      	movs	r1, #1
 8005e92:	fa01 f303 	lsl.w	r3, r1, r3
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0b0      	beq.n	8005dfe <HAL_RCC_OscConfig+0x63a>
 8005e9c:	e06a      	b.n	8005f74 <HAL_RCC_OscConfig+0x7b0>
 8005e9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	fa93 f2a3 	rbit	r2, r3
 8005eb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005eb4:	601a      	str	r2, [r3, #0]
  return result;
 8005eb6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005eba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ebc:	fab3 f383 	clz	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4b8c      	ldr	r3, [pc, #560]	; (80060f8 <HAL_RCC_OscConfig+0x934>)
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed0:	f7fe f90c 	bl	80040ec <HAL_GetTick>
 8005ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed8:	e009      	b.n	8005eee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eda:	f7fe f907 	bl	80040ec <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e36b      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 8005eee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	fa93 f2a3 	rbit	r2, r3
 8005f00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	fa93 f2a3 	rbit	r2, r3
 8005f18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f22:	2202      	movs	r2, #2
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	fa93 f2a3 	rbit	r2, r3
 8005f30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f36:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8005f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005f3e:	2102      	movs	r1, #2
 8005f40:	6019      	str	r1, [r3, #0]
 8005f42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	fa93 f1a3 	rbit	r1, r3
 8005f4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f50:	6019      	str	r1, [r3, #0]
  return result;
 8005f52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	fab3 f383 	clz	r3, r3
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2101      	movs	r1, #1
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1b2      	bne.n	8005eda <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8158 	beq.w	8006234 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8a:	4b5a      	ldr	r3, [pc, #360]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d112      	bne.n	8005fbc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	4b57      	ldr	r3, [pc, #348]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4a56      	ldr	r2, [pc, #344]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8005f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	61d3      	str	r3, [r2, #28]
 8005fa2:	4b54      	ldr	r3, [pc, #336]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005faa:	f107 0308 	add.w	r3, r7, #8
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	4b4f      	ldr	r3, [pc, #316]	; (80060fc <HAL_RCC_OscConfig+0x938>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11a      	bne.n	8005ffe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc8:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <HAL_RCC_OscConfig+0x938>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a4b      	ldr	r2, [pc, #300]	; (80060fc <HAL_RCC_OscConfig+0x938>)
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd4:	f7fe f88a 	bl	80040ec <HAL_GetTick>
 8005fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fdc:	e009      	b.n	8005ff2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fde:	f7fe f885 	bl	80040ec <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	; 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e2e9      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff2:	4b42      	ldr	r3, [pc, #264]	; (80060fc <HAL_RCC_OscConfig+0x938>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0ef      	beq.n	8005fde <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d106      	bne.n	8006016 <HAL_RCC_OscConfig+0x852>
 8006008:	4b3a      	ldr	r3, [pc, #232]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	4a39      	ldr	r2, [pc, #228]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	6213      	str	r3, [r2, #32]
 8006014:	e02f      	b.n	8006076 <HAL_RCC_OscConfig+0x8b2>
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10c      	bne.n	800603a <HAL_RCC_OscConfig+0x876>
 8006020:	4b34      	ldr	r3, [pc, #208]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	4a33      	ldr	r2, [pc, #204]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	6213      	str	r3, [r2, #32]
 800602c:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	4a30      	ldr	r2, [pc, #192]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006032:	f023 0304 	bic.w	r3, r3, #4
 8006036:	6213      	str	r3, [r2, #32]
 8006038:	e01d      	b.n	8006076 <HAL_RCC_OscConfig+0x8b2>
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b05      	cmp	r3, #5
 8006042:	d10c      	bne.n	800605e <HAL_RCC_OscConfig+0x89a>
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 800604a:	f043 0304 	orr.w	r3, r3, #4
 800604e:	6213      	str	r3, [r2, #32]
 8006050:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	6213      	str	r3, [r2, #32]
 800605c:	e00b      	b.n	8006076 <HAL_RCC_OscConfig+0x8b2>
 800605e:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	6213      	str	r3, [r2, #32]
 800606a:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 8006070:	f023 0304 	bic.w	r3, r3, #4
 8006074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006076:	1d3b      	adds	r3, r7, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d06b      	beq.n	8006158 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006080:	f7fe f834 	bl	80040ec <HAL_GetTick>
 8006084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006088:	e00b      	b.n	80060a2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800608a:	f7fe f82f 	bl	80040ec <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e291      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 80060a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80060a6:	2202      	movs	r2, #2
 80060a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	fa93 f2a3 	rbit	r2, r3
 80060b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80060be:	2202      	movs	r2, #2
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	fa93 f2a3 	rbit	r2, r3
 80060cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80060d0:	601a      	str	r2, [r3, #0]
  return result;
 80060d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80060d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	fab3 f383 	clz	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f043 0302 	orr.w	r3, r3, #2
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d109      	bne.n	8006100 <HAL_RCC_OscConfig+0x93c>
 80060ec:	4b01      	ldr	r3, [pc, #4]	; (80060f4 <HAL_RCC_OscConfig+0x930>)
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	e014      	b.n	800611c <HAL_RCC_OscConfig+0x958>
 80060f2:	bf00      	nop
 80060f4:	40021000 	.word	0x40021000
 80060f8:	10908120 	.word	0x10908120
 80060fc:	40007000 	.word	0x40007000
 8006100:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006104:	2202      	movs	r2, #2
 8006106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	fa93 f2a3 	rbit	r2, r3
 8006112:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	4bbb      	ldr	r3, [pc, #748]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006120:	2102      	movs	r1, #2
 8006122:	6011      	str	r1, [r2, #0]
 8006124:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	fa92 f1a2 	rbit	r1, r2
 800612e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006132:	6011      	str	r1, [r2, #0]
  return result;
 8006134:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	fab2 f282 	clz	r2, r2
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	f002 021f 	and.w	r2, r2, #31
 800614a:	2101      	movs	r1, #1
 800614c:	fa01 f202 	lsl.w	r2, r1, r2
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d099      	beq.n	800608a <HAL_RCC_OscConfig+0x8c6>
 8006156:	e063      	b.n	8006220 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006158:	f7fd ffc8 	bl	80040ec <HAL_GetTick>
 800615c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006160:	e00b      	b.n	800617a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006162:	f7fd ffc3 	bl	80040ec <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e225      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 800617a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800617e:	2202      	movs	r2, #2
 8006180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006182:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	fa93 f2a3 	rbit	r2, r3
 800618c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006196:	2202      	movs	r2, #2
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fa93 f2a3 	rbit	r2, r3
 80061a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80061a8:	601a      	str	r2, [r3, #0]
  return result;
 80061aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80061ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b0:	fab3 f383 	clz	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f043 0302 	orr.w	r3, r3, #2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d102      	bne.n	80061ca <HAL_RCC_OscConfig+0xa06>
 80061c4:	4b90      	ldr	r3, [pc, #576]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	e00d      	b.n	80061e6 <HAL_RCC_OscConfig+0xa22>
 80061ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80061ce:	2202      	movs	r2, #2
 80061d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	fa93 f2a3 	rbit	r2, r3
 80061dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	4b89      	ldr	r3, [pc, #548]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80061ea:	2102      	movs	r1, #2
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	fa92 f1a2 	rbit	r1, r2
 80061f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80061fc:	6011      	str	r1, [r2, #0]
  return result;
 80061fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	fab2 f282 	clz	r2, r2
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	f002 021f 	and.w	r2, r2, #31
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f202 	lsl.w	r2, r1, r2
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1a0      	bne.n	8006162 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006220:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006228:	4b77      	ldr	r3, [pc, #476]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4a76      	ldr	r2, [pc, #472]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 800622e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006232:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 81c2 	beq.w	80065c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006240:	4b71      	ldr	r3, [pc, #452]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b08      	cmp	r3, #8
 800624a:	f000 819c 	beq.w	8006586 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2b02      	cmp	r3, #2
 8006256:	f040 8114 	bne.w	8006482 <HAL_RCC_OscConfig+0xcbe>
 800625a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800625e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006264:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	fa93 f2a3 	rbit	r2, r3
 800626e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006272:	601a      	str	r2, [r3, #0]
  return result;
 8006274:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006278:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627a:	fab3 f383 	clz	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006284:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	461a      	mov	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7fd ff2c 	bl	80040ec <HAL_GetTick>
 8006294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006298:	e009      	b.n	80062ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800629a:	f7fd ff27 	bl	80040ec <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e18b      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 80062ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	fa93 f2a3 	rbit	r2, r3
 80062c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80062c6:	601a      	str	r2, [r3, #0]
  return result;
 80062c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80062cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062ce:	fab3 f383 	clz	r3, r3
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d102      	bne.n	80062e8 <HAL_RCC_OscConfig+0xb24>
 80062e2:	4b49      	ldr	r3, [pc, #292]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	e01b      	b.n	8006320 <HAL_RCC_OscConfig+0xb5c>
 80062e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	fa93 f2a3 	rbit	r2, r3
 80062fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	fa93 f2a3 	rbit	r2, r3
 8006316:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	4b3a      	ldr	r3, [pc, #232]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	fa92 f1a2 	rbit	r1, r2
 8006334:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006338:	6011      	str	r1, [r2, #0]
  return result;
 800633a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	fab2 f282 	clz	r2, r2
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	f042 0220 	orr.w	r2, r2, #32
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	f002 021f 	and.w	r2, r2, #31
 8006350:	2101      	movs	r1, #1
 8006352:	fa01 f202 	lsl.w	r2, r1, r2
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d19e      	bne.n	800629a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800635c:	4b2a      	ldr	r3, [pc, #168]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	430b      	orrs	r3, r1
 8006372:	4925      	ldr	r1, [pc, #148]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800637c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	fa93 f2a3 	rbit	r2, r3
 800638c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006390:	601a      	str	r2, [r3, #0]
  return result;
 8006392:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006396:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006398:	fab3 f383 	clz	r3, r3
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	461a      	mov	r2, r3
 80063aa:	2301      	movs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ae:	f7fd fe9d 	bl	80040ec <HAL_GetTick>
 80063b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063b6:	e009      	b.n	80063cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fd fe98 	bl	80040ec <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e0fc      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 80063cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80063d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	fa93 f2a3 	rbit	r2, r3
 80063e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80063e4:	601a      	str	r2, [r3, #0]
  return result;
 80063e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80063ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063ec:	fab3 f383 	clz	r3, r3
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d105      	bne.n	800640c <HAL_RCC_OscConfig+0xc48>
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <HAL_RCC_OscConfig+0xc44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	e01e      	b.n	8006444 <HAL_RCC_OscConfig+0xc80>
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000
 800640c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	fa93 f2a3 	rbit	r2, r3
 8006420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800642a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	fa93 f2a3 	rbit	r2, r3
 800643a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	4b63      	ldr	r3, [pc, #396]	; (80065d0 <HAL_RCC_OscConfig+0xe0c>)
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800644c:	6011      	str	r1, [r2, #0]
 800644e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	fa92 f1a2 	rbit	r1, r2
 8006458:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800645c:	6011      	str	r1, [r2, #0]
  return result;
 800645e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006462:	6812      	ldr	r2, [r2, #0]
 8006464:	fab2 f282 	clz	r2, r2
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	f042 0220 	orr.w	r2, r2, #32
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	f002 021f 	and.w	r2, r2, #31
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f202 	lsl.w	r2, r1, r2
 800647a:	4013      	ands	r3, r2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d09b      	beq.n	80063b8 <HAL_RCC_OscConfig+0xbf4>
 8006480:	e0a0      	b.n	80065c4 <HAL_RCC_OscConfig+0xe00>
 8006482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800648a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	fa93 f2a3 	rbit	r2, r3
 8006496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800649a:	601a      	str	r2, [r3, #0]
  return result;
 800649c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a2:	fab3 f383 	clz	r3, r3
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	461a      	mov	r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fd fe18 	bl	80040ec <HAL_GetTick>
 80064bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c0:	e009      	b.n	80064d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064c2:	f7fd fe13 	bl	80040ec <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e077      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
 80064d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	fa93 f2a3 	rbit	r2, r3
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	601a      	str	r2, [r3, #0]
  return result;
 80064f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f6:	fab3 f383 	clz	r3, r3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	d102      	bne.n	8006510 <HAL_RCC_OscConfig+0xd4c>
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <HAL_RCC_OscConfig+0xe0c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	e01b      	b.n	8006548 <HAL_RCC_OscConfig+0xd84>
 8006510:	f107 0320 	add.w	r3, r7, #32
 8006514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651a:	f107 0320 	add.w	r3, r7, #32
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	fa93 f2a3 	rbit	r2, r3
 8006524:	f107 031c 	add.w	r3, r7, #28
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f107 0318 	add.w	r3, r7, #24
 800652e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	f107 0318 	add.w	r3, r7, #24
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	fa93 f2a3 	rbit	r2, r3
 800653e:	f107 0314 	add.w	r3, r7, #20
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	4b22      	ldr	r3, [pc, #136]	; (80065d0 <HAL_RCC_OscConfig+0xe0c>)
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	f107 0210 	add.w	r2, r7, #16
 800654c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006550:	6011      	str	r1, [r2, #0]
 8006552:	f107 0210 	add.w	r2, r7, #16
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	fa92 f1a2 	rbit	r1, r2
 800655c:	f107 020c 	add.w	r2, r7, #12
 8006560:	6011      	str	r1, [r2, #0]
  return result;
 8006562:	f107 020c 	add.w	r2, r7, #12
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	fab2 f282 	clz	r2, r2
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	f042 0220 	orr.w	r2, r2, #32
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	f002 021f 	and.w	r2, r2, #31
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f202 	lsl.w	r2, r1, r2
 800657e:	4013      	ands	r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d19e      	bne.n	80064c2 <HAL_RCC_OscConfig+0xcfe>
 8006584:	e01e      	b.n	80065c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e018      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <HAL_RCC_OscConfig+0xe0c>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800659c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80065a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d108      	bne.n	80065c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80065ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80065b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065b6:	1d3b      	adds	r3, r7, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40021000 	.word	0x40021000

080065d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b09e      	sub	sp, #120	; 0x78
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e162      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065ec:	4b90      	ldr	r3, [pc, #576]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d910      	bls.n	800661c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 0207 	bic.w	r2, r3, #7
 8006602:	498b      	ldr	r1, [pc, #556]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	4313      	orrs	r3, r2
 8006608:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660a:	4b89      	ldr	r3, [pc, #548]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e14a      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006628:	4b82      	ldr	r3, [pc, #520]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	497f      	ldr	r1, [pc, #508]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 8006636:	4313      	orrs	r3, r2
 8006638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80dc 	beq.w	8006800 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d13c      	bne.n	80066ca <HAL_RCC_ClockConfig+0xf6>
 8006650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006654:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006658:	fa93 f3a3 	rbit	r3, r3
 800665c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006660:	fab3 f383 	clz	r3, r3
 8006664:	b2db      	uxtb	r3, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d102      	bne.n	800667a <HAL_RCC_ClockConfig+0xa6>
 8006674:	4b6f      	ldr	r3, [pc, #444]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	e00f      	b.n	800669a <HAL_RCC_ClockConfig+0xc6>
 800667a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800667e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006682:	fa93 f3a3 	rbit	r3, r3
 8006686:	667b      	str	r3, [r7, #100]	; 0x64
 8006688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800668c:	663b      	str	r3, [r7, #96]	; 0x60
 800668e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006696:	4b67      	ldr	r3, [pc, #412]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800669e:	65ba      	str	r2, [r7, #88]	; 0x58
 80066a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066a2:	fa92 f2a2 	rbit	r2, r2
 80066a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80066a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066aa:	fab2 f282 	clz	r2, r2
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	f042 0220 	orr.w	r2, r2, #32
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	f002 021f 	and.w	r2, r2, #31
 80066ba:	2101      	movs	r1, #1
 80066bc:	fa01 f202 	lsl.w	r2, r1, r2
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d17b      	bne.n	80067be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e0f3      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d13c      	bne.n	800674c <HAL_RCC_ClockConfig+0x178>
 80066d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066da:	fa93 f3a3 	rbit	r3, r3
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80066e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_RCC_ClockConfig+0x128>
 80066f6:	4b4f      	ldr	r3, [pc, #316]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	e00f      	b.n	800671c <HAL_RCC_ClockConfig+0x148>
 80066fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006700:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006704:	fa93 f3a3 	rbit	r3, r3
 8006708:	647b      	str	r3, [r7, #68]	; 0x44
 800670a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800670e:	643b      	str	r3, [r7, #64]	; 0x40
 8006710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006712:	fa93 f3a3 	rbit	r3, r3
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006718:	4b46      	ldr	r3, [pc, #280]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006720:	63ba      	str	r2, [r7, #56]	; 0x38
 8006722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006724:	fa92 f2a2 	rbit	r2, r2
 8006728:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800672a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800672c:	fab2 f282 	clz	r2, r2
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	f042 0220 	orr.w	r2, r2, #32
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	f002 021f 	and.w	r2, r2, #31
 800673c:	2101      	movs	r1, #1
 800673e:	fa01 f202 	lsl.w	r2, r1, r2
 8006742:	4013      	ands	r3, r2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d13a      	bne.n	80067be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0b2      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
 800674c:	2302      	movs	r3, #2
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	fa93 f3a3 	rbit	r3, r3
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675a:	fab3 f383 	clz	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b01      	cmp	r3, #1
 800676c:	d102      	bne.n	8006774 <HAL_RCC_ClockConfig+0x1a0>
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	e00d      	b.n	8006790 <HAL_RCC_ClockConfig+0x1bc>
 8006774:	2302      	movs	r3, #2
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	fa93 f3a3 	rbit	r3, r3
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	2302      	movs	r3, #2
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	fa93 f3a3 	rbit	r3, r3
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	4b29      	ldr	r3, [pc, #164]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	2202      	movs	r2, #2
 8006792:	61ba      	str	r2, [r7, #24]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	fa92 f2a2 	rbit	r2, r2
 800679a:	617a      	str	r2, [r7, #20]
  return result;
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	fab2 f282 	clz	r2, r2
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	f042 0220 	orr.w	r2, r2, #32
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	f002 021f 	and.w	r2, r2, #31
 80067ae:	2101      	movs	r1, #1
 80067b0:	fa01 f202 	lsl.w	r2, r1, r2
 80067b4:	4013      	ands	r3, r2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e079      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f023 0203 	bic.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	491a      	ldr	r1, [pc, #104]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d0:	f7fd fc8c 	bl	80040ec <HAL_GetTick>
 80067d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	e00a      	b.n	80067ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d8:	f7fd fc88 	bl	80040ec <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e061      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_RCC_ClockConfig+0x260>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f003 020c 	and.w	r2, r3, #12
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1eb      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d214      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 0207 	bic.w	r2, r3, #7
 8006816:	4906      	ldr	r1, [pc, #24]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <HAL_RCC_ClockConfig+0x25c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d005      	beq.n	8006838 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e040      	b.n	80068b2 <HAL_RCC_ClockConfig+0x2de>
 8006830:	40022000 	.word	0x40022000
 8006834:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <HAL_RCC_ClockConfig+0x2e8>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	491a      	ldr	r1, [pc, #104]	; (80068bc <HAL_RCC_ClockConfig+0x2e8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b16      	ldr	r3, [pc, #88]	; (80068bc <HAL_RCC_ClockConfig+0x2e8>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4912      	ldr	r1, [pc, #72]	; (80068bc <HAL_RCC_ClockConfig+0x2e8>)
 8006872:	4313      	orrs	r3, r2
 8006874:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006876:	f000 f829 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 800687a:	4601      	mov	r1, r0
 800687c:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <HAL_RCC_ClockConfig+0x2e8>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006884:	22f0      	movs	r2, #240	; 0xf0
 8006886:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	fa92 f2a2 	rbit	r2, r2
 800688e:	60fa      	str	r2, [r7, #12]
  return result;
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	fab2 f282 	clz	r2, r2
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	40d3      	lsrs	r3, r2
 800689a:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <HAL_RCC_ClockConfig+0x2ec>)
 800689c:	5cd3      	ldrb	r3, [r2, r3]
 800689e:	fa21 f303 	lsr.w	r3, r1, r3
 80068a2:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <HAL_RCC_ClockConfig+0x2f0>)
 80068a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80068a6:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <HAL_RCC_ClockConfig+0x2f4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fd fbda 	bl	8004064 <HAL_InitTick>
  
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3778      	adds	r7, #120	; 0x78
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	0800d240 	.word	0x0800d240
 80068c4:	20000018 	.word	0x20000018
 80068c8:	2000001c 	.word	0x2000001c

080068cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b08b      	sub	sp, #44	; 0x2c
 80068d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	2300      	movs	r3, #0
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <HAL_RCC_GetSysClockFreq+0xc0>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d002      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x30>
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d003      	beq.n	8006902 <HAL_RCC_GetSysClockFreq+0x36>
 80068fa:	e03c      	b.n	8006976 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068fc:	4b24      	ldr	r3, [pc, #144]	; (8006990 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068fe:	623b      	str	r3, [r7, #32]
      break;
 8006900:	e03c      	b.n	800697c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006908:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800690c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	fa92 f2a2 	rbit	r2, r2
 8006914:	607a      	str	r2, [r7, #4]
  return result;
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	fab2 f282 	clz	r2, r2
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	40d3      	lsrs	r3, r2
 8006920:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006922:	5cd3      	ldrb	r3, [r2, r3]
 8006924:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006926:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	220f      	movs	r2, #15
 8006930:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	fa92 f2a2 	rbit	r2, r2
 8006938:	60fa      	str	r2, [r7, #12]
  return result;
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	fab2 f282 	clz	r2, r2
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	40d3      	lsrs	r3, r2
 8006944:	4a14      	ldr	r2, [pc, #80]	; (8006998 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006946:	5cd3      	ldrb	r3, [r2, r3]
 8006948:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006954:	4a0e      	ldr	r2, [pc, #56]	; (8006990 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	fbb2 f2f3 	udiv	r2, r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	e004      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4a0c      	ldr	r2, [pc, #48]	; (800699c <HAL_RCC_GetSysClockFreq+0xd0>)
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	623b      	str	r3, [r7, #32]
      break;
 8006974:	e002      	b.n	800697c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006978:	623b      	str	r3, [r7, #32]
      break;
 800697a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800697c:	6a3b      	ldr	r3, [r7, #32]
}
 800697e:	4618      	mov	r0, r3
 8006980:	372c      	adds	r7, #44	; 0x2c
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40021000 	.word	0x40021000
 8006990:	007a1200 	.word	0x007a1200
 8006994:	0800d258 	.word	0x0800d258
 8006998:	0800d268 	.word	0x0800d268
 800699c:	003d0900 	.word	0x003d0900

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000018 	.word	0x20000018

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80069be:	f7ff ffef 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c2:	4601      	mov	r1, r0
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80069d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	fa92 f2a2 	rbit	r2, r2
 80069d8:	603a      	str	r2, [r7, #0]
  return result;
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	fab2 f282 	clz	r2, r2
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	40d3      	lsrs	r3, r2
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80069e6:	5cd3      	ldrb	r3, [r2, r3]
 80069e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40021000 	.word	0x40021000
 80069f8:	0800d250 	.word	0x0800d250

080069fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006a02:	f7ff ffcd 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 8006a06:	4601      	mov	r1, r0
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006a10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006a14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	fa92 f2a2 	rbit	r2, r2
 8006a1c:	603a      	str	r2, [r7, #0]
  return result;
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	fab2 f282 	clz	r2, r2
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	40d3      	lsrs	r3, r2
 8006a28:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8006a2a:	5cd3      	ldrb	r3, [r2, r3]
 8006a2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	0800d250 	.word	0x0800d250

08006a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b092      	sub	sp, #72	; 0x48
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80d4 	beq.w	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a64:	4b4e      	ldr	r3, [pc, #312]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10e      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a70:	4b4b      	ldr	r3, [pc, #300]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4a4a      	ldr	r2, [pc, #296]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	61d3      	str	r3, [r2, #28]
 8006a7c:	4b48      	ldr	r3, [pc, #288]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8e:	4b45      	ldr	r3, [pc, #276]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d118      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a9a:	4b42      	ldr	r3, [pc, #264]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a41      	ldr	r2, [pc, #260]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa6:	f7fd fb21 	bl	80040ec <HAL_GetTick>
 8006aaa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	e008      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aae:	f7fd fb1d 	bl	80040ec <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b64      	cmp	r3, #100	; 0x64
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e14b      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac0:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006acc:	4b34      	ldr	r3, [pc, #208]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8084 	beq.w	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d07c      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aec:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006afa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	fa93 f3a3 	rbit	r3, r3
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b06:	fab3 f383 	clz	r3, r3
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	461a      	mov	r2, r3
 8006b16:	2301      	movs	r3, #1
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	fa93 f3a3 	rbit	r3, r3
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b2a:	fab3 f383 	clz	r3, r3
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d04b      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4e:	f7fd facd 	bl	80040ec <HAL_GetTick>
 8006b52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fd fac9 	bl	80040ec <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e0f5      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	fa93 f3a3 	rbit	r3, r3
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
 8006b78:	2302      	movs	r3, #2
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	fa93 f3a3 	rbit	r3, r3
 8006b82:	61fb      	str	r3, [r7, #28]
  return result;
 8006b84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b86:	fab3 f383 	clz	r3, r3
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f043 0302 	orr.w	r3, r3, #2
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d108      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006b9a:	4b01      	ldr	r3, [pc, #4]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	e00d      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006ba0:	40021000 	.word	0x40021000
 8006ba4:	40007000 	.word	0x40007000
 8006ba8:	10908100 	.word	0x10908100
 8006bac:	2302      	movs	r3, #2
 8006bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	fa93 f3a3 	rbit	r3, r3
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	4b69      	ldr	r3, [pc, #420]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	613a      	str	r2, [r7, #16]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	fa92 f2a2 	rbit	r2, r2
 8006bc6:	60fa      	str	r2, [r7, #12]
  return result;
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	fab2 f282 	clz	r2, r2
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	f002 021f 	and.w	r2, r2, #31
 8006bda:	2101      	movs	r1, #1
 8006bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0b7      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006be6:	4b5e      	ldr	r3, [pc, #376]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	495b      	ldr	r1, [pc, #364]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d105      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c00:	4b57      	ldr	r3, [pc, #348]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	4a56      	ldr	r2, [pc, #344]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c18:	4b51      	ldr	r3, [pc, #324]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	f023 0203 	bic.w	r2, r3, #3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	494e      	ldr	r1, [pc, #312]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0320 	and.w	r3, r3, #32
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c36:	4b4a      	ldr	r3, [pc, #296]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	f023 0210 	bic.w	r2, r3, #16
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4947      	ldr	r1, [pc, #284]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d008      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c54:	4b42      	ldr	r3, [pc, #264]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	493f      	ldr	r1, [pc, #252]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c72:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	f023 0220 	bic.w	r2, r3, #32
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	4938      	ldr	r1, [pc, #224]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c90:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	4930      	ldr	r1, [pc, #192]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cae:	4b2c      	ldr	r3, [pc, #176]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	4929      	ldr	r1, [pc, #164]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006ccc:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	4921      	ldr	r1, [pc, #132]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006cea:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	491a      	ldr	r1, [pc, #104]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d008      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006d08:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	4912      	ldr	r1, [pc, #72]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006d26:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	490b      	ldr	r1, [pc, #44]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4903      	ldr	r1, [pc, #12]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3748      	adds	r7, #72	; 0x48
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40021000 	.word	0x40021000

08006d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e049      	b.n	8006e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fc fec6 	bl	8003b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f000 fb10 	bl	80073c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d001      	beq.n	8006e2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e033      	b.n	8006e94 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a19      	ldr	r2, [pc, #100]	; (8006ea0 <HAL_TIM_Base_Start+0x8c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <HAL_TIM_Base_Start+0x3e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d004      	beq.n	8006e52 <HAL_TIM_Base_Start+0x3e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <HAL_TIM_Base_Start+0x90>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d115      	bne.n	8006e7e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <HAL_TIM_Base_Start+0x94>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b06      	cmp	r3, #6
 8006e62:	d015      	beq.n	8006e90 <HAL_TIM_Base_Start+0x7c>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6a:	d011      	beq.n	8006e90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7c:	e008      	b.n	8006e90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0201 	orr.w	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e000      	b.n	8006e92 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	00010007 	.word	0x00010007

08006eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d001      	beq.n	8006ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e03b      	b.n	8006f3c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <HAL_TIM_Base_Start_IT+0x9c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_TIM_Base_Start_IT+0x4e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eee:	d004      	beq.n	8006efa <HAL_TIM_Base_Start_IT+0x4e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <HAL_TIM_Base_Start_IT+0xa0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d115      	bne.n	8006f26 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <HAL_TIM_Base_Start_IT+0xa4>)
 8006f02:	4013      	ands	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	d015      	beq.n	8006f38 <HAL_TIM_Base_Start_IT+0x8c>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f12:	d011      	beq.n	8006f38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f24:	e008      	b.n	8006f38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0201 	orr.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e000      	b.n	8006f3a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	00010007 	.word	0x00010007

08006f54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a1a      	ldr	r2, [r3, #32]
 8006f72:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f76:	4013      	ands	r3, r2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10f      	bne.n	8006f9c <HAL_TIM_Base_Stop_IT+0x48>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6a1a      	ldr	r2, [r3, #32]
 8006f82:	f240 4344 	movw	r3, #1092	; 0x444
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <HAL_TIM_Base_Stop_IT+0x48>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d122      	bne.n	800700e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d11b      	bne.n	800700e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f06f 0202 	mvn.w	r2, #2
 8006fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9c8 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 8006ffa:	e005      	b.n	8007008 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9ba 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9cb 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b04      	cmp	r3, #4
 800701a:	d122      	bne.n	8007062 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d11b      	bne.n	8007062 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f06f 0204 	mvn.w	r2, #4
 8007032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f99e 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 800704e:	e005      	b.n	800705c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f990 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9a1 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b08      	cmp	r3, #8
 800706e:	d122      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b08      	cmp	r3, #8
 800707c:	d11b      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f06f 0208 	mvn.w	r2, #8
 8007086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2204      	movs	r2, #4
 800708c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f974 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 80070a2:	e005      	b.n	80070b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f966 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f977 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d122      	bne.n	800710a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d11b      	bne.n	800710a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f06f 0210 	mvn.w	r2, #16
 80070da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2208      	movs	r2, #8
 80070e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f94a 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 80070f6:	e005      	b.n	8007104 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f93c 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f94d 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d10e      	bne.n	8007136 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b01      	cmp	r3, #1
 8007124:	d107      	bne.n	8007136 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f06f 0201 	mvn.w	r2, #1
 800712e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f916 	bl	8007362 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d10e      	bne.n	8007162 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d107      	bne.n	8007162 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 faab 	bl	80076b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007170:	d10e      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d107      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa9e 	bl	80076cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8fb 	bl	80073b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0220 	mvn.w	r2, #32
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa5e 	bl	80076a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_TIM_ConfigClockSource+0x18>
 8007204:	2302      	movs	r3, #2
 8007206:	e0a8      	b.n	800735a <HAL_TIM_ConfigClockSource+0x16a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800722a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007232:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d067      	beq.n	8007314 <HAL_TIM_ConfigClockSource+0x124>
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d80b      	bhi.n	8007260 <HAL_TIM_ConfigClockSource+0x70>
 8007248:	2b10      	cmp	r3, #16
 800724a:	d073      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x144>
 800724c:	2b10      	cmp	r3, #16
 800724e:	d802      	bhi.n	8007256 <HAL_TIM_ConfigClockSource+0x66>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d06f      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007254:	e078      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007256:	2b20      	cmp	r3, #32
 8007258:	d06c      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x144>
 800725a:	2b30      	cmp	r3, #48	; 0x30
 800725c:	d06a      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800725e:	e073      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007260:	2b70      	cmp	r3, #112	; 0x70
 8007262:	d00d      	beq.n	8007280 <HAL_TIM_ConfigClockSource+0x90>
 8007264:	2b70      	cmp	r3, #112	; 0x70
 8007266:	d804      	bhi.n	8007272 <HAL_TIM_ConfigClockSource+0x82>
 8007268:	2b50      	cmp	r3, #80	; 0x50
 800726a:	d033      	beq.n	80072d4 <HAL_TIM_ConfigClockSource+0xe4>
 800726c:	2b60      	cmp	r3, #96	; 0x60
 800726e:	d041      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007270:	e06a      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007276:	d066      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x156>
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727c:	d017      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800727e:	e063      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	6899      	ldr	r1, [r3, #8]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f000 f982 	bl	8007598 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
      break;
 80072ac:	e04c      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6899      	ldr	r1, [r3, #8]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f000 f96b 	bl	8007598 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d0:	609a      	str	r2, [r3, #8]
      break;
 80072d2:	e039      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6859      	ldr	r1, [r3, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f000 f8df 	bl	80074a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2150      	movs	r1, #80	; 0x50
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 f938 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 80072f2:	e029      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	6859      	ldr	r1, [r3, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	461a      	mov	r2, r3
 8007302:	f000 f8fe 	bl	8007502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2160      	movs	r1, #96	; 0x60
 800730c:	4618      	mov	r0, r3
 800730e:	f000 f928 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8007312:	e019      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	461a      	mov	r2, r3
 8007322:	f000 f8bf 	bl	80074a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2140      	movs	r1, #64	; 0x40
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f918 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8007332:	e009      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f000 f90f 	bl	8007562 <TIM_ITRx_SetConfig>
        break;
 8007344:	e000      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2e      	ldr	r2, [pc, #184]	; (8007494 <TIM_Base_SetConfig+0xcc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x20>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a25      	ldr	r2, [pc, #148]	; (8007494 <TIM_Base_SetConfig+0xcc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00f      	beq.n	8007422 <TIM_Base_SetConfig+0x5a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d00b      	beq.n	8007422 <TIM_Base_SetConfig+0x5a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a22      	ldr	r2, [pc, #136]	; (8007498 <TIM_Base_SetConfig+0xd0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <TIM_Base_SetConfig+0x5a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a21      	ldr	r2, [pc, #132]	; (800749c <TIM_Base_SetConfig+0xd4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_Base_SetConfig+0x5a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a20      	ldr	r2, [pc, #128]	; (80074a0 <TIM_Base_SetConfig+0xd8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a0e      	ldr	r2, [pc, #56]	; (8007494 <TIM_Base_SetConfig+0xcc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_Base_SetConfig+0xb0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a0d      	ldr	r2, [pc, #52]	; (8007498 <TIM_Base_SetConfig+0xd0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_Base_SetConfig+0xb0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a0c      	ldr	r2, [pc, #48]	; (800749c <TIM_Base_SetConfig+0xd4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_Base_SetConfig+0xb0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a0b      	ldr	r2, [pc, #44]	; (80074a0 <TIM_Base_SetConfig+0xd8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d103      	bne.n	8007480 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	615a      	str	r2, [r3, #20]
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 030a 	bic.w	r3, r3, #10
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0210 	bic.w	r2, r3, #16
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800752c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	f043 0307 	orr.w	r3, r3, #7
 8007584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	021a      	lsls	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e04f      	b.n	8007690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a21      	ldr	r2, [pc, #132]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d108      	bne.n	800762c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007620:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a14      	ldr	r2, [pc, #80]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007658:	d004      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a10      	ldr	r2, [pc, #64]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d10c      	bne.n	800767e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800766a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40014000 	.word	0x40014000

080076a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e040      	b.n	8007774 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fc fa96 	bl	8003c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2224      	movs	r2, #36	; 0x24
 800770c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fbf8 	bl	8007f14 <UART_SetConfig>
 8007724:	4603      	mov	r3, r0
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e022      	b.n	8007774 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd24 	bl	8008184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800774a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800775a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fdab 	bl	80082c8 <UART_CheckIdleState>
 8007772:	4603      	mov	r3, r0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af02      	add	r7, sp, #8
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	4613      	mov	r3, r2
 800778a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007790:	2b20      	cmp	r3, #32
 8007792:	f040 8082 	bne.w	800789a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_UART_Transmit+0x26>
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e07a      	b.n	800789c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_UART_Transmit+0x38>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e073      	b.n	800789c <HAL_UART_Transmit+0x120>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2221      	movs	r2, #33	; 0x21
 80077c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ca:	f7fc fc8f 	bl	80040ec <HAL_GetTick>
 80077ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	88fa      	ldrh	r2, [r7, #6]
 80077d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e8:	d108      	bne.n	80077fc <HAL_UART_Transmit+0x80>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e003      	b.n	8007804 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800780c:	e02d      	b.n	800786a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2200      	movs	r2, #0
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 fd9e 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e039      	b.n	800789c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	881a      	ldrh	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800783a:	b292      	uxth	r2, r2
 800783c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	3302      	adds	r3, #2
 8007842:	61bb      	str	r3, [r7, #24]
 8007844:	e008      	b.n	8007858 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	b292      	uxth	r2, r2
 8007850:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	3301      	adds	r3, #1
 8007856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007870:	b29b      	uxth	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1cb      	bne.n	800780e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2200      	movs	r2, #0
 800787e:	2140      	movs	r1, #64	; 0x40
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fd6a 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e005      	b.n	800789c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	e000      	b.n	800789c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800789a:	2302      	movs	r3, #2
  }
}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08a      	sub	sp, #40	; 0x28
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4613      	mov	r3, r2
 80078b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	f040 80bf 	bne.w	8007a3c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_UART_Receive+0x26>
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e0b7      	b.n	8007a3e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_UART_Receive+0x38>
 80078d8:	2302      	movs	r3, #2
 80078da:	e0b0      	b.n	8007a3e <HAL_UART_Receive+0x19a>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2222      	movs	r2, #34	; 0x22
 80078f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078f8:	f7fc fbf8 	bl	80040ec <HAL_GetTick>
 80078fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	88fa      	ldrh	r2, [r7, #6]
 8007902:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007916:	d10e      	bne.n	8007936 <HAL_UART_Receive+0x92>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d105      	bne.n	800792c <HAL_UART_Receive+0x88>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007926:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800792a:	e02d      	b.n	8007988 <HAL_UART_Receive+0xe4>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	22ff      	movs	r2, #255	; 0xff
 8007930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007934:	e028      	b.n	8007988 <HAL_UART_Receive+0xe4>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10d      	bne.n	800795a <HAL_UART_Receive+0xb6>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_UART_Receive+0xac>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	22ff      	movs	r2, #255	; 0xff
 800794a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800794e:	e01b      	b.n	8007988 <HAL_UART_Receive+0xe4>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	227f      	movs	r2, #127	; 0x7f
 8007954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007958:	e016      	b.n	8007988 <HAL_UART_Receive+0xe4>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007962:	d10d      	bne.n	8007980 <HAL_UART_Receive+0xdc>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d104      	bne.n	8007976 <HAL_UART_Receive+0xd2>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	227f      	movs	r2, #127	; 0x7f
 8007970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007974:	e008      	b.n	8007988 <HAL_UART_Receive+0xe4>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	223f      	movs	r2, #63	; 0x3f
 800797a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800797e:	e003      	b.n	8007988 <HAL_UART_Receive+0xe4>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800798e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007998:	d108      	bne.n	80079ac <HAL_UART_Receive+0x108>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e003      	b.n	80079b4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80079bc:	e033      	b.n	8007a26 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2120      	movs	r1, #32
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fcc6 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e032      	b.n	8007a3e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10c      	bne.n	80079f8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	8a7b      	ldrh	r3, [r7, #18]
 80079e8:	4013      	ands	r3, r2
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	3302      	adds	r3, #2
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e00d      	b.n	8007a14 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	8a7b      	ldrh	r3, [r7, #18]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4013      	ands	r3, r2
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1c5      	bne.n	80079be <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e000      	b.n	8007a3e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007a3c:	2302      	movs	r3, #2
  }
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3720      	adds	r7, #32
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d12c      	bne.n	8007ab6 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_UART_Receive_DMA+0x22>
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e025      	b.n	8007ab8 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_UART_Receive_DMA+0x34>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e01e      	b.n	8007ab8 <HAL_UART_Receive_DMA+0x72>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007aa4:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fcd1 	bl	8008454 <UART_Start_Receive_DMA>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	e000      	b.n	8007ab8 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007ab6:	2302      	movs	r3, #2
  }
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d113      	bne.n	8007b18 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00e      	beq.n	8007b18 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 81cd 	beq.w	8007ea8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
      }
      return;
 8007b16:	e1c7      	b.n	8007ea8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80e3 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	4ba5      	ldr	r3, [pc, #660]	; (8007dc4 <HAL_UART_IRQHandler+0x304>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 80d8 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <HAL_UART_IRQHandler+0xa2>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b58:	f043 0201 	orr.w	r2, r3, #1
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d010      	beq.n	8007b8e <HAL_UART_IRQHandler+0xce>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b84:	f043 0204 	orr.w	r2, r3, #4
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d010      	beq.n	8007bba <HAL_UART_IRQHandler+0xfa>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb0:	f043 0202 	orr.w	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d015      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be6:	f043 0208 	orr.w	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d011      	beq.n	8007c1e <HAL_UART_IRQHandler+0x15e>
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c14:	f043 0220 	orr.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8141 	beq.w	8007eac <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b40      	cmp	r3, #64	; 0x40
 8007c62:	d004      	beq.n	8007c6e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d031      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fc71 	bl	8008556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d123      	bne.n	8007cca <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	4a4a      	ldr	r2, [pc, #296]	; (8007dc8 <HAL_UART_IRQHandler+0x308>)
 8007ca0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fc fc3e 	bl	8004528 <HAL_DMA_Abort_IT>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d017      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc0:	e00f      	b.n	8007ce2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f910 	bl	8007ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e00b      	b.n	8007ce2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f90c 	bl	8007ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e007      	b.n	8007ce2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f908 	bl	8007ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007ce0:	e0e4      	b.n	8007eac <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce2:	bf00      	nop
    return;
 8007ce4:	e0e2      	b.n	8007eac <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	f040 80a7 	bne.w	8007e3e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80a1 	beq.w	8007e3e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 809b 	beq.w	8007e3e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2210      	movs	r2, #16
 8007d0e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b40      	cmp	r3, #64	; 0x40
 8007d1c:	d156      	bne.n	8007dcc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007d28:	893b      	ldrh	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80c0 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d36:	893a      	ldrh	r2, [r7, #8]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	f080 80b9 	bcs.w	8007eb0 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	893a      	ldrh	r2, [r7, #8]
 8007d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d02a      	beq.n	8007da6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d5e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0210 	bic.w	r2, r2, #16
 8007d9a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fc fb88 	bl	80044b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f89e 	bl	8007efc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007dc0:	e076      	b.n	8007eb0 <HAL_UART_IRQHandler+0x3f0>
 8007dc2:	bf00      	nop
 8007dc4:	04000120 	.word	0x04000120
 8007dc8:	080086fb 	.word	0x080086fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d064      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8007dea:	897b      	ldrh	r3, [r7, #10]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d061      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dfe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0210 	bic.w	r2, r2, #16
 8007e30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e32:	897b      	ldrh	r3, [r7, #10]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f860 	bl	8007efc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e3c:	e03a      	b.n	8007eb4 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00d      	beq.n	8007e64 <HAL_UART_IRQHandler+0x3a4>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fc7b 	bl	8008758 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e62:	e02a      	b.n	8007eba <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d008      	beq.n	8007e8a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01b      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
    }
    return;
 8007e88:	e016      	b.n	8007eb8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d012      	beq.n	8007eba <HAL_UART_IRQHandler+0x3fa>
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00d      	beq.n	8007eba <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fc41 	bl	8008726 <UART_EndTransmit_IT>
    return;
 8007ea4:	bf00      	nop
 8007ea6:	e008      	b.n	8007eba <HAL_UART_IRQHandler+0x3fa>
      return;
 8007ea8:	bf00      	nop
 8007eaa:	e006      	b.n	8007eba <HAL_UART_IRQHandler+0x3fa>
    return;
 8007eac:	bf00      	nop
 8007eae:	e004      	b.n	8007eba <HAL_UART_IRQHandler+0x3fa>
      return;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <HAL_UART_IRQHandler+0x3fa>
      return;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_UART_IRQHandler+0x3fa>
    return;
 8007eb8:	bf00      	nop
  }

}
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b8b      	ldr	r3, [pc, #556]	; (800816c <UART_SetConfig+0x258>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a79      	ldr	r2, [pc, #484]	; (8008170 <UART_SetConfig+0x25c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d121      	bne.n	8007fd4 <UART_SetConfig+0xc0>
 8007f90:	4b78      	ldr	r3, [pc, #480]	; (8008174 <UART_SetConfig+0x260>)
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	f003 0303 	and.w	r3, r3, #3
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d817      	bhi.n	8007fcc <UART_SetConfig+0xb8>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0x90>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fb5 	.word	0x08007fb5
 8007fa8:	08007fc1 	.word	0x08007fc1
 8007fac:	08007fc7 	.word	0x08007fc7
 8007fb0:	08007fbb 	.word	0x08007fbb
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e01e      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e01b      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e018      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e015      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	bf00      	nop
 8007fd2:	e011      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a67      	ldr	r2, [pc, #412]	; (8008178 <UART_SetConfig+0x264>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d102      	bne.n	8007fe4 <UART_SetConfig+0xd0>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	77fb      	strb	r3, [r7, #31]
 8007fe2:	e009      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a64      	ldr	r2, [pc, #400]	; (800817c <UART_SetConfig+0x268>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d102      	bne.n	8007ff4 <UART_SetConfig+0xe0>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e001      	b.n	8007ff8 <UART_SetConfig+0xe4>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008000:	d15c      	bne.n	80080bc <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8008002:	7ffb      	ldrb	r3, [r7, #31]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d828      	bhi.n	800805a <UART_SetConfig+0x146>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0xfc>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008035 	.word	0x08008035
 8008014:	0800803d 	.word	0x0800803d
 8008018:	08008045 	.word	0x08008045
 800801c:	0800805b 	.word	0x0800805b
 8008020:	0800804b 	.word	0x0800804b
 8008024:	0800805b 	.word	0x0800805b
 8008028:	0800805b 	.word	0x0800805b
 800802c:	0800805b 	.word	0x0800805b
 8008030:	08008053 	.word	0x08008053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008034:	f7fe fcc0 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8008038:	61b8      	str	r0, [r7, #24]
        break;
 800803a:	e013      	b.n	8008064 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800803c:	f7fe fcde 	bl	80069fc <HAL_RCC_GetPCLK2Freq>
 8008040:	61b8      	str	r0, [r7, #24]
        break;
 8008042:	e00f      	b.n	8008064 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008044:	4b4e      	ldr	r3, [pc, #312]	; (8008180 <UART_SetConfig+0x26c>)
 8008046:	61bb      	str	r3, [r7, #24]
        break;
 8008048:	e00c      	b.n	8008064 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800804a:	f7fe fc3f 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 800804e:	61b8      	str	r0, [r7, #24]
        break;
 8008050:	e008      	b.n	8008064 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008056:	61bb      	str	r3, [r7, #24]
        break;
 8008058:	e004      	b.n	8008064 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	77bb      	strb	r3, [r7, #30]
        break;
 8008062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d074      	beq.n	8008154 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	005a      	lsls	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	fbb2 f3f3 	udiv	r3, r2, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2b0f      	cmp	r3, #15
 8008086:	d916      	bls.n	80080b6 <UART_SetConfig+0x1a2>
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800808e:	d212      	bcs.n	80080b6 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f023 030f 	bic.w	r3, r3, #15
 8008098:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	89fb      	ldrh	r3, [r7, #14]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	89fa      	ldrh	r2, [r7, #14]
 80080b2:	60da      	str	r2, [r3, #12]
 80080b4:	e04e      	b.n	8008154 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	77bb      	strb	r3, [r7, #30]
 80080ba:	e04b      	b.n	8008154 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080bc:	7ffb      	ldrb	r3, [r7, #31]
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d827      	bhi.n	8008112 <UART_SetConfig+0x1fe>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x1b4>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	08008113 	.word	0x08008113
 80080d8:	08008103 	.word	0x08008103
 80080dc:	08008113 	.word	0x08008113
 80080e0:	08008113 	.word	0x08008113
 80080e4:	08008113 	.word	0x08008113
 80080e8:	0800810b 	.word	0x0800810b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ec:	f7fe fc64 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80080f0:	61b8      	str	r0, [r7, #24]
        break;
 80080f2:	e013      	b.n	800811c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080f4:	f7fe fc82 	bl	80069fc <HAL_RCC_GetPCLK2Freq>
 80080f8:	61b8      	str	r0, [r7, #24]
        break;
 80080fa:	e00f      	b.n	800811c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <UART_SetConfig+0x26c>)
 80080fe:	61bb      	str	r3, [r7, #24]
        break;
 8008100:	e00c      	b.n	800811c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008102:	f7fe fbe3 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 8008106:	61b8      	str	r0, [r7, #24]
        break;
 8008108:	e008      	b.n	800811c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800810a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810e:	61bb      	str	r3, [r7, #24]
        break;
 8008110:	e004      	b.n	800811c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	77bb      	strb	r3, [r7, #30]
        break;
 800811a:	bf00      	nop
    }

    if (pclk != 0U)
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d018      	beq.n	8008154 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	085a      	lsrs	r2, r3, #1
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	441a      	add	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	b29b      	uxth	r3, r3
 8008136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b0f      	cmp	r3, #15
 800813c:	d908      	bls.n	8008150 <UART_SetConfig+0x23c>
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008144:	d204      	bcs.n	8008150 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	e001      	b.n	8008154 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008160:	7fbb      	ldrb	r3, [r7, #30]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	efff69f3 	.word	0xefff69f3
 8008170:	40013800 	.word	0x40013800
 8008174:	40021000 	.word	0x40021000
 8008178:	40004400 	.word	0x40004400
 800817c:	40004800 	.word	0x40004800
 8008180:	007a1200 	.word	0x007a1200

08008184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008282:	d10a      	bne.n	800829a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d8:	f7fb ff08 	bl	80040ec <HAL_GetTick>
 80082dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d10e      	bne.n	800830a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f82d 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e023      	b.n	8008352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d10e      	bne.n	8008336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f817 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e00d      	b.n	8008352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800836a:	e05e      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d05a      	beq.n	800842a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008374:	f7fb feba 	bl	80040ec <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	429a      	cmp	r2, r3
 8008382:	d302      	bcc.n	800838a <UART_WaitOnFlagUntilTimeout+0x30>
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d11b      	bne.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008398:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0201 	bic.w	r2, r2, #1
 80083a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e043      	b.n	800844a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d02c      	beq.n	800842a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083de:	d124      	bne.n	800842a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2220      	movs	r2, #32
 800840e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2220      	movs	r2, #32
 800841a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e00f      	b.n	800844a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4013      	ands	r3, r2
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	bf0c      	ite	eq
 800843a:	2301      	moveq	r3, #1
 800843c:	2300      	movne	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	461a      	mov	r2, r3
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	429a      	cmp	r2, r3
 8008446:	d091      	beq.n	800836c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2222      	movs	r2, #34	; 0x22
 800847c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008482:	2b00      	cmp	r3, #0
 8008484:	d02b      	beq.n	80084de <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	4a25      	ldr	r2, [pc, #148]	; (8008520 <UART_Start_Receive_DMA+0xcc>)
 800848c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	4a24      	ldr	r2, [pc, #144]	; (8008524 <UART_Start_Receive_DMA+0xd0>)
 8008494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	4a23      	ldr	r2, [pc, #140]	; (8008528 <UART_Start_Receive_DMA+0xd4>)
 800849c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	2200      	movs	r2, #0
 80084a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3324      	adds	r3, #36	; 0x24
 80084b0:	4619      	mov	r1, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	461a      	mov	r2, r3
 80084b8:	88fb      	ldrh	r3, [r7, #6]
 80084ba:	f7fb ff9d 	bl	80043f8 <HAL_DMA_Start_IT>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00c      	beq.n	80084de <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2210      	movs	r2, #16
 80084c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e01c      	b.n	8008518 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084f4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008514:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	080085b5 	.word	0x080085b5
 8008524:	08008647 	.word	0x08008647
 8008528:	0800867f 	.word	0x0800867f

0800852c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008542:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	679a      	str	r2, [r3, #120]	; 0x78
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800856c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0201 	bic.w	r2, r2, #1
 800857c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008582:	2b01      	cmp	r3, #1
 8008584:	d107      	bne.n	8008596 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0210 	bic.w	r2, r2, #16
 8008594:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d02a      	beq.n	8008620 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0201 	bic.w	r2, r2, #1
 80085f0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008600:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2220      	movs	r2, #32
 8008606:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800860c:	2b01      	cmp	r3, #1
 800860e:	d107      	bne.n	8008620 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0210 	bic.w	r2, r2, #16
 800861e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008624:	2b01      	cmp	r3, #1
 8008626:	d107      	bne.n	8008638 <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800862e:	4619      	mov	r1, r3
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fc63 	bl	8007efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008636:	e002      	b.n	800863e <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7f9 faed 	bl	8001c18 <HAL_UART_RxCpltCallback>
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008658:	2b01      	cmp	r3, #1
 800865a:	d109      	bne.n	8008670 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008662:	085b      	lsrs	r3, r3, #1
 8008664:	b29b      	uxth	r3, r3
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fc47 	bl	8007efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800866e:	e002      	b.n	8008676 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7ff fc2f 	bl	8007ed4 <HAL_UART_RxHalfCpltCallback>
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008690:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008696:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	2b80      	cmp	r3, #128	; 0x80
 80086a4:	d109      	bne.n	80086ba <UART_DMAError+0x3c>
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b21      	cmp	r3, #33	; 0x21
 80086aa:	d106      	bne.n	80086ba <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f7ff ff39 	bl	800852c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d109      	bne.n	80086dc <UART_DMAError+0x5e>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b22      	cmp	r3, #34	; 0x22
 80086cc:	d106      	bne.n	80086dc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80086d6:	6978      	ldr	r0, [r7, #20]
 80086d8:	f7ff ff3d 	bl	8008556 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e2:	f043 0210 	orr.w	r2, r3, #16
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086ec:	6978      	ldr	r0, [r7, #20]
 80086ee:	f7ff fbfb 	bl	8007ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086f2:	bf00      	nop
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff fbe5 	bl	8007ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff fbb8 	bl	8007ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <atof>:
 800876c:	2100      	movs	r1, #0
 800876e:	f001 babf 	b.w	8009cf0 <strtod>
	...

08008774 <__errno>:
 8008774:	4b01      	ldr	r3, [pc, #4]	; (800877c <__errno+0x8>)
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000024 	.word	0x20000024

08008780 <__libc_init_array>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4e0d      	ldr	r6, [pc, #52]	; (80087b8 <__libc_init_array+0x38>)
 8008784:	4c0d      	ldr	r4, [pc, #52]	; (80087bc <__libc_init_array+0x3c>)
 8008786:	1ba4      	subs	r4, r4, r6
 8008788:	10a4      	asrs	r4, r4, #2
 800878a:	2500      	movs	r5, #0
 800878c:	42a5      	cmp	r5, r4
 800878e:	d109      	bne.n	80087a4 <__libc_init_array+0x24>
 8008790:	4e0b      	ldr	r6, [pc, #44]	; (80087c0 <__libc_init_array+0x40>)
 8008792:	4c0c      	ldr	r4, [pc, #48]	; (80087c4 <__libc_init_array+0x44>)
 8008794:	f004 fd2e 	bl	800d1f4 <_init>
 8008798:	1ba4      	subs	r4, r4, r6
 800879a:	10a4      	asrs	r4, r4, #2
 800879c:	2500      	movs	r5, #0
 800879e:	42a5      	cmp	r5, r4
 80087a0:	d105      	bne.n	80087ae <__libc_init_array+0x2e>
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087a8:	4798      	blx	r3
 80087aa:	3501      	adds	r5, #1
 80087ac:	e7ee      	b.n	800878c <__libc_init_array+0xc>
 80087ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087b2:	4798      	blx	r3
 80087b4:	3501      	adds	r5, #1
 80087b6:	e7f2      	b.n	800879e <__libc_init_array+0x1e>
 80087b8:	0800d5b8 	.word	0x0800d5b8
 80087bc:	0800d5b8 	.word	0x0800d5b8
 80087c0:	0800d5b8 	.word	0x0800d5b8
 80087c4:	0800d5bc 	.word	0x0800d5bc

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <__cvt>:
 80087d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	ec55 4b10 	vmov	r4, r5, d0
 80087e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80087e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	460e      	mov	r6, r1
 80087ea:	4691      	mov	r9, r2
 80087ec:	4619      	mov	r1, r3
 80087ee:	bfb8      	it	lt
 80087f0:	4622      	movlt	r2, r4
 80087f2:	462b      	mov	r3, r5
 80087f4:	f027 0720 	bic.w	r7, r7, #32
 80087f8:	bfbb      	ittet	lt
 80087fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087fe:	461d      	movlt	r5, r3
 8008800:	2300      	movge	r3, #0
 8008802:	232d      	movlt	r3, #45	; 0x2d
 8008804:	bfb8      	it	lt
 8008806:	4614      	movlt	r4, r2
 8008808:	2f46      	cmp	r7, #70	; 0x46
 800880a:	700b      	strb	r3, [r1, #0]
 800880c:	d004      	beq.n	8008818 <__cvt+0x40>
 800880e:	2f45      	cmp	r7, #69	; 0x45
 8008810:	d100      	bne.n	8008814 <__cvt+0x3c>
 8008812:	3601      	adds	r6, #1
 8008814:	2102      	movs	r1, #2
 8008816:	e000      	b.n	800881a <__cvt+0x42>
 8008818:	2103      	movs	r1, #3
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	ab02      	add	r3, sp, #8
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	4632      	mov	r2, r6
 8008824:	4653      	mov	r3, sl
 8008826:	ec45 4b10 	vmov	d0, r4, r5
 800882a:	f001 fb01 	bl	8009e30 <_dtoa_r>
 800882e:	2f47      	cmp	r7, #71	; 0x47
 8008830:	4680      	mov	r8, r0
 8008832:	d102      	bne.n	800883a <__cvt+0x62>
 8008834:	f019 0f01 	tst.w	r9, #1
 8008838:	d026      	beq.n	8008888 <__cvt+0xb0>
 800883a:	2f46      	cmp	r7, #70	; 0x46
 800883c:	eb08 0906 	add.w	r9, r8, r6
 8008840:	d111      	bne.n	8008866 <__cvt+0x8e>
 8008842:	f898 3000 	ldrb.w	r3, [r8]
 8008846:	2b30      	cmp	r3, #48	; 0x30
 8008848:	d10a      	bne.n	8008860 <__cvt+0x88>
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8008856:	b918      	cbnz	r0, 8008860 <__cvt+0x88>
 8008858:	f1c6 0601 	rsb	r6, r6, #1
 800885c:	f8ca 6000 	str.w	r6, [sl]
 8008860:	f8da 3000 	ldr.w	r3, [sl]
 8008864:	4499      	add	r9, r3
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	f7f8 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008872:	b938      	cbnz	r0, 8008884 <__cvt+0xac>
 8008874:	2230      	movs	r2, #48	; 0x30
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	454b      	cmp	r3, r9
 800887a:	d205      	bcs.n	8008888 <__cvt+0xb0>
 800887c:	1c59      	adds	r1, r3, #1
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	e7f8      	b.n	8008876 <__cvt+0x9e>
 8008884:	f8cd 900c 	str.w	r9, [sp, #12]
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800888c:	eba3 0308 	sub.w	r3, r3, r8
 8008890:	4640      	mov	r0, r8
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	b004      	add	sp, #16
 8008896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800889a <__exponent>:
 800889a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800889c:	2900      	cmp	r1, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	bfba      	itte	lt
 80088a2:	4249      	neglt	r1, r1
 80088a4:	232d      	movlt	r3, #45	; 0x2d
 80088a6:	232b      	movge	r3, #43	; 0x2b
 80088a8:	2909      	cmp	r1, #9
 80088aa:	f804 2b02 	strb.w	r2, [r4], #2
 80088ae:	7043      	strb	r3, [r0, #1]
 80088b0:	dd20      	ble.n	80088f4 <__exponent+0x5a>
 80088b2:	f10d 0307 	add.w	r3, sp, #7
 80088b6:	461f      	mov	r7, r3
 80088b8:	260a      	movs	r6, #10
 80088ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80088be:	fb06 1115 	mls	r1, r6, r5, r1
 80088c2:	3130      	adds	r1, #48	; 0x30
 80088c4:	2d09      	cmp	r5, #9
 80088c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ca:	f103 32ff 	add.w	r2, r3, #4294967295
 80088ce:	4629      	mov	r1, r5
 80088d0:	dc09      	bgt.n	80088e6 <__exponent+0x4c>
 80088d2:	3130      	adds	r1, #48	; 0x30
 80088d4:	3b02      	subs	r3, #2
 80088d6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088da:	42bb      	cmp	r3, r7
 80088dc:	4622      	mov	r2, r4
 80088de:	d304      	bcc.n	80088ea <__exponent+0x50>
 80088e0:	1a10      	subs	r0, r2, r0
 80088e2:	b003      	add	sp, #12
 80088e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e6:	4613      	mov	r3, r2
 80088e8:	e7e7      	b.n	80088ba <__exponent+0x20>
 80088ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ee:	f804 2b01 	strb.w	r2, [r4], #1
 80088f2:	e7f2      	b.n	80088da <__exponent+0x40>
 80088f4:	2330      	movs	r3, #48	; 0x30
 80088f6:	4419      	add	r1, r3
 80088f8:	7083      	strb	r3, [r0, #2]
 80088fa:	1d02      	adds	r2, r0, #4
 80088fc:	70c1      	strb	r1, [r0, #3]
 80088fe:	e7ef      	b.n	80088e0 <__exponent+0x46>

08008900 <_printf_float>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	b08d      	sub	sp, #52	; 0x34
 8008906:	460c      	mov	r4, r1
 8008908:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800890c:	4616      	mov	r6, r2
 800890e:	461f      	mov	r7, r3
 8008910:	4605      	mov	r5, r0
 8008912:	f002 fb6d 	bl	800aff0 <_localeconv_r>
 8008916:	6803      	ldr	r3, [r0, #0]
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f7 fc58 	bl	80001d0 <strlen>
 8008920:	2300      	movs	r3, #0
 8008922:	930a      	str	r3, [sp, #40]	; 0x28
 8008924:	f8d8 3000 	ldr.w	r3, [r8]
 8008928:	9005      	str	r0, [sp, #20]
 800892a:	3307      	adds	r3, #7
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	f103 0208 	add.w	r2, r3, #8
 8008934:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008938:	f8d4 b000 	ldr.w	fp, [r4]
 800893c:	f8c8 2000 	str.w	r2, [r8]
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008948:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800894c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008950:	9307      	str	r3, [sp, #28]
 8008952:	f8cd 8018 	str.w	r8, [sp, #24]
 8008956:	f04f 32ff 	mov.w	r2, #4294967295
 800895a:	4ba7      	ldr	r3, [pc, #668]	; (8008bf8 <_printf_float+0x2f8>)
 800895c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008960:	f7f8 f8e4 	bl	8000b2c <__aeabi_dcmpun>
 8008964:	bb70      	cbnz	r0, 80089c4 <_printf_float+0xc4>
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	4ba3      	ldr	r3, [pc, #652]	; (8008bf8 <_printf_float+0x2f8>)
 800896c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008970:	f7f8 f8be 	bl	8000af0 <__aeabi_dcmple>
 8008974:	bb30      	cbnz	r0, 80089c4 <_printf_float+0xc4>
 8008976:	2200      	movs	r2, #0
 8008978:	2300      	movs	r3, #0
 800897a:	4640      	mov	r0, r8
 800897c:	4649      	mov	r1, r9
 800897e:	f7f8 f8ad 	bl	8000adc <__aeabi_dcmplt>
 8008982:	b110      	cbz	r0, 800898a <_printf_float+0x8a>
 8008984:	232d      	movs	r3, #45	; 0x2d
 8008986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800898a:	4a9c      	ldr	r2, [pc, #624]	; (8008bfc <_printf_float+0x2fc>)
 800898c:	4b9c      	ldr	r3, [pc, #624]	; (8008c00 <_printf_float+0x300>)
 800898e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008992:	bf8c      	ite	hi
 8008994:	4690      	movhi	r8, r2
 8008996:	4698      	movls	r8, r3
 8008998:	2303      	movs	r3, #3
 800899a:	f02b 0204 	bic.w	r2, fp, #4
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	6022      	str	r2, [r4, #0]
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	9700      	str	r7, [sp, #0]
 80089a8:	4633      	mov	r3, r6
 80089aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80089ac:	4621      	mov	r1, r4
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f9e6 	bl	8008d80 <_printf_common>
 80089b4:	3001      	adds	r0, #1
 80089b6:	f040 808d 	bne.w	8008ad4 <_printf_float+0x1d4>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	b00d      	add	sp, #52	; 0x34
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c4:	4642      	mov	r2, r8
 80089c6:	464b      	mov	r3, r9
 80089c8:	4640      	mov	r0, r8
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f8 f8ae 	bl	8000b2c <__aeabi_dcmpun>
 80089d0:	b110      	cbz	r0, 80089d8 <_printf_float+0xd8>
 80089d2:	4a8c      	ldr	r2, [pc, #560]	; (8008c04 <_printf_float+0x304>)
 80089d4:	4b8c      	ldr	r3, [pc, #560]	; (8008c08 <_printf_float+0x308>)
 80089d6:	e7da      	b.n	800898e <_printf_float+0x8e>
 80089d8:	6861      	ldr	r1, [r4, #4]
 80089da:	1c4b      	adds	r3, r1, #1
 80089dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80089e0:	a80a      	add	r0, sp, #40	; 0x28
 80089e2:	d13e      	bne.n	8008a62 <_printf_float+0x162>
 80089e4:	2306      	movs	r3, #6
 80089e6:	6063      	str	r3, [r4, #4]
 80089e8:	2300      	movs	r3, #0
 80089ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089ee:	ab09      	add	r3, sp, #36	; 0x24
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	ec49 8b10 	vmov	d0, r8, r9
 80089f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	f8cd a004 	str.w	sl, [sp, #4]
 8008a00:	6861      	ldr	r1, [r4, #4]
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7ff fee8 	bl	80087d8 <__cvt>
 8008a08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008a0c:	2b47      	cmp	r3, #71	; 0x47
 8008a0e:	4680      	mov	r8, r0
 8008a10:	d109      	bne.n	8008a26 <_printf_float+0x126>
 8008a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a14:	1cd8      	adds	r0, r3, #3
 8008a16:	db02      	blt.n	8008a1e <_printf_float+0x11e>
 8008a18:	6862      	ldr	r2, [r4, #4]
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	dd47      	ble.n	8008aae <_printf_float+0x1ae>
 8008a1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a22:	fa5f fa8a 	uxtb.w	sl, sl
 8008a26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2c:	d824      	bhi.n	8008a78 <_printf_float+0x178>
 8008a2e:	3901      	subs	r1, #1
 8008a30:	4652      	mov	r2, sl
 8008a32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a36:	9109      	str	r1, [sp, #36]	; 0x24
 8008a38:	f7ff ff2f 	bl	800889a <__exponent>
 8008a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a3e:	1813      	adds	r3, r2, r0
 8008a40:	2a01      	cmp	r2, #1
 8008a42:	4681      	mov	r9, r0
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	dc02      	bgt.n	8008a4e <_printf_float+0x14e>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	07d1      	lsls	r1, r2, #31
 8008a4c:	d501      	bpl.n	8008a52 <_printf_float+0x152>
 8008a4e:	3301      	adds	r3, #1
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0a5      	beq.n	80089a6 <_printf_float+0xa6>
 8008a5a:	232d      	movs	r3, #45	; 0x2d
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a60:	e7a1      	b.n	80089a6 <_printf_float+0xa6>
 8008a62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008a66:	f000 8177 	beq.w	8008d58 <_printf_float+0x458>
 8008a6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a6e:	d1bb      	bne.n	80089e8 <_printf_float+0xe8>
 8008a70:	2900      	cmp	r1, #0
 8008a72:	d1b9      	bne.n	80089e8 <_printf_float+0xe8>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7b6      	b.n	80089e6 <_printf_float+0xe6>
 8008a78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008a7c:	d119      	bne.n	8008ab2 <_printf_float+0x1b2>
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	dd0c      	ble.n	8008a9e <_printf_float+0x19e>
 8008a84:	6121      	str	r1, [r4, #16]
 8008a86:	b913      	cbnz	r3, 8008a8e <_printf_float+0x18e>
 8008a88:	6822      	ldr	r2, [r4, #0]
 8008a8a:	07d2      	lsls	r2, r2, #31
 8008a8c:	d502      	bpl.n	8008a94 <_printf_float+0x194>
 8008a8e:	3301      	adds	r3, #1
 8008a90:	440b      	add	r3, r1
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	e7d9      	b.n	8008a52 <_printf_float+0x152>
 8008a9e:	b913      	cbnz	r3, 8008aa6 <_printf_float+0x1a6>
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	07d0      	lsls	r0, r2, #31
 8008aa4:	d501      	bpl.n	8008aaa <_printf_float+0x1aa>
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	e7f3      	b.n	8008a92 <_printf_float+0x192>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e7f1      	b.n	8008a92 <_printf_float+0x192>
 8008aae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008ab2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	db05      	blt.n	8008ac6 <_printf_float+0x1c6>
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	07d1      	lsls	r1, r2, #31
 8008ac0:	d5e8      	bpl.n	8008a94 <_printf_float+0x194>
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	e7e5      	b.n	8008a92 <_printf_float+0x192>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bfd4      	ite	le
 8008aca:	f1c3 0302 	rsble	r3, r3, #2
 8008ace:	2301      	movgt	r3, #1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	e7de      	b.n	8008a92 <_printf_float+0x192>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	055a      	lsls	r2, r3, #21
 8008ad8:	d407      	bmi.n	8008aea <_printf_float+0x1ea>
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	4642      	mov	r2, r8
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d12b      	bne.n	8008b40 <_printf_float+0x240>
 8008ae8:	e767      	b.n	80089ba <_printf_float+0xba>
 8008aea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008aee:	f240 80dc 	bls.w	8008caa <_printf_float+0x3aa>
 8008af2:	2200      	movs	r2, #0
 8008af4:	2300      	movs	r3, #0
 8008af6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008afa:	f7f7 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d033      	beq.n	8008b6a <_printf_float+0x26a>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4a41      	ldr	r2, [pc, #260]	; (8008c0c <_printf_float+0x30c>)
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f af54 	beq.w	80089ba <_printf_float+0xba>
 8008b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b16:	429a      	cmp	r2, r3
 8008b18:	db02      	blt.n	8008b20 <_printf_float+0x220>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	07d8      	lsls	r0, r3, #31
 8008b1e:	d50f      	bpl.n	8008b40 <_printf_float+0x240>
 8008b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af45 	beq.w	80089ba <_printf_float+0xba>
 8008b30:	f04f 0800 	mov.w	r8, #0
 8008b34:	f104 091a 	add.w	r9, r4, #26
 8008b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	4543      	cmp	r3, r8
 8008b3e:	dc09      	bgt.n	8008b54 <_printf_float+0x254>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	079b      	lsls	r3, r3, #30
 8008b44:	f100 8103 	bmi.w	8008d4e <_printf_float+0x44e>
 8008b48:	68e0      	ldr	r0, [r4, #12]
 8008b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4c:	4298      	cmp	r0, r3
 8008b4e:	bfb8      	it	lt
 8008b50:	4618      	movlt	r0, r3
 8008b52:	e734      	b.n	80089be <_printf_float+0xbe>
 8008b54:	2301      	movs	r3, #1
 8008b56:	464a      	mov	r2, r9
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f af2b 	beq.w	80089ba <_printf_float+0xba>
 8008b64:	f108 0801 	add.w	r8, r8, #1
 8008b68:	e7e6      	b.n	8008b38 <_printf_float+0x238>
 8008b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dc2b      	bgt.n	8008bc8 <_printf_float+0x2c8>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4a26      	ldr	r2, [pc, #152]	; (8008c0c <_printf_float+0x30c>)
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f43f af1d 	beq.w	80089ba <_printf_float+0xba>
 8008b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b82:	b923      	cbnz	r3, 8008b8e <_printf_float+0x28e>
 8008b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b86:	b913      	cbnz	r3, 8008b8e <_printf_float+0x28e>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	d5d8      	bpl.n	8008b40 <_printf_float+0x240>
 8008b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f43f af0e 	beq.w	80089ba <_printf_float+0xba>
 8008b9e:	f04f 0900 	mov.w	r9, #0
 8008ba2:	f104 0a1a 	add.w	sl, r4, #26
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	425b      	negs	r3, r3
 8008baa:	454b      	cmp	r3, r9
 8008bac:	dc01      	bgt.n	8008bb2 <_printf_float+0x2b2>
 8008bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb0:	e794      	b.n	8008adc <_printf_float+0x1dc>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f aefc 	beq.w	80089ba <_printf_float+0xba>
 8008bc2:	f109 0901 	add.w	r9, r9, #1
 8008bc6:	e7ee      	b.n	8008ba6 <_printf_float+0x2a6>
 8008bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	bfa8      	it	ge
 8008bd0:	461a      	movge	r2, r3
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	4691      	mov	r9, r2
 8008bd6:	dd07      	ble.n	8008be8 <_printf_float+0x2e8>
 8008bd8:	4613      	mov	r3, r2
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4642      	mov	r2, r8
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f aee9 	beq.w	80089ba <_printf_float+0xba>
 8008be8:	f104 031a 	add.w	r3, r4, #26
 8008bec:	f04f 0b00 	mov.w	fp, #0
 8008bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bf4:	9306      	str	r3, [sp, #24]
 8008bf6:	e015      	b.n	8008c24 <_printf_float+0x324>
 8008bf8:	7fefffff 	.word	0x7fefffff
 8008bfc:	0800d27c 	.word	0x0800d27c
 8008c00:	0800d278 	.word	0x0800d278
 8008c04:	0800d284 	.word	0x0800d284
 8008c08:	0800d280 	.word	0x0800d280
 8008c0c:	0800d288 	.word	0x0800d288
 8008c10:	2301      	movs	r3, #1
 8008c12:	9a06      	ldr	r2, [sp, #24]
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	f43f aecd 	beq.w	80089ba <_printf_float+0xba>
 8008c20:	f10b 0b01 	add.w	fp, fp, #1
 8008c24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c28:	ebaa 0309 	sub.w	r3, sl, r9
 8008c2c:	455b      	cmp	r3, fp
 8008c2e:	dcef      	bgt.n	8008c10 <_printf_float+0x310>
 8008c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c34:	429a      	cmp	r2, r3
 8008c36:	44d0      	add	r8, sl
 8008c38:	db15      	blt.n	8008c66 <_printf_float+0x366>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	07da      	lsls	r2, r3, #31
 8008c3e:	d412      	bmi.n	8008c66 <_printf_float+0x366>
 8008c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c44:	eba3 020a 	sub.w	r2, r3, sl
 8008c48:	eba3 0a01 	sub.w	sl, r3, r1
 8008c4c:	4592      	cmp	sl, r2
 8008c4e:	bfa8      	it	ge
 8008c50:	4692      	movge	sl, r2
 8008c52:	f1ba 0f00 	cmp.w	sl, #0
 8008c56:	dc0e      	bgt.n	8008c76 <_printf_float+0x376>
 8008c58:	f04f 0800 	mov.w	r8, #0
 8008c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c60:	f104 091a 	add.w	r9, r4, #26
 8008c64:	e019      	b.n	8008c9a <_printf_float+0x39a>
 8008c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	d1e5      	bne.n	8008c40 <_printf_float+0x340>
 8008c74:	e6a1      	b.n	80089ba <_printf_float+0xba>
 8008c76:	4653      	mov	r3, sl
 8008c78:	4642      	mov	r2, r8
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	d1e9      	bne.n	8008c58 <_printf_float+0x358>
 8008c84:	e699      	b.n	80089ba <_printf_float+0xba>
 8008c86:	2301      	movs	r3, #1
 8008c88:	464a      	mov	r2, r9
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b8      	blx	r7
 8008c90:	3001      	adds	r0, #1
 8008c92:	f43f ae92 	beq.w	80089ba <_printf_float+0xba>
 8008c96:	f108 0801 	add.w	r8, r8, #1
 8008c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	eba3 030a 	sub.w	r3, r3, sl
 8008ca4:	4543      	cmp	r3, r8
 8008ca6:	dcee      	bgt.n	8008c86 <_printf_float+0x386>
 8008ca8:	e74a      	b.n	8008b40 <_printf_float+0x240>
 8008caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cac:	2a01      	cmp	r2, #1
 8008cae:	dc01      	bgt.n	8008cb4 <_printf_float+0x3b4>
 8008cb0:	07db      	lsls	r3, r3, #31
 8008cb2:	d53a      	bpl.n	8008d2a <_printf_float+0x42a>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	f43f ae7b 	beq.w	80089ba <_printf_float+0xba>
 8008cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4628      	mov	r0, r5
 8008ccc:	47b8      	blx	r7
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f108 0801 	add.w	r8, r8, #1
 8008cd4:	f43f ae71 	beq.w	80089ba <_printf_float+0xba>
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f103 3aff 	add.w	sl, r3, #4294967295
 8008ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f7f7 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cea:	b9c8      	cbnz	r0, 8008d20 <_printf_float+0x420>
 8008cec:	4653      	mov	r3, sl
 8008cee:	4642      	mov	r2, r8
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b8      	blx	r7
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d10e      	bne.n	8008d18 <_printf_float+0x418>
 8008cfa:	e65e      	b.n	80089ba <_printf_float+0xba>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4652      	mov	r2, sl
 8008d00:	4631      	mov	r1, r6
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f ae57 	beq.w	80089ba <_printf_float+0xba>
 8008d0c:	f108 0801 	add.w	r8, r8, #1
 8008d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d12:	3b01      	subs	r3, #1
 8008d14:	4543      	cmp	r3, r8
 8008d16:	dcf1      	bgt.n	8008cfc <_printf_float+0x3fc>
 8008d18:	464b      	mov	r3, r9
 8008d1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d1e:	e6de      	b.n	8008ade <_printf_float+0x1de>
 8008d20:	f04f 0800 	mov.w	r8, #0
 8008d24:	f104 0a1a 	add.w	sl, r4, #26
 8008d28:	e7f2      	b.n	8008d10 <_printf_float+0x410>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7df      	b.n	8008cee <_printf_float+0x3ee>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	464a      	mov	r2, r9
 8008d32:	4631      	mov	r1, r6
 8008d34:	4628      	mov	r0, r5
 8008d36:	47b8      	blx	r7
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f43f ae3e 	beq.w	80089ba <_printf_float+0xba>
 8008d3e:	f108 0801 	add.w	r8, r8, #1
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	4543      	cmp	r3, r8
 8008d4a:	dcf0      	bgt.n	8008d2e <_printf_float+0x42e>
 8008d4c:	e6fc      	b.n	8008b48 <_printf_float+0x248>
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	f104 0919 	add.w	r9, r4, #25
 8008d56:	e7f4      	b.n	8008d42 <_printf_float+0x442>
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	f43f ae8b 	beq.w	8008a74 <_printf_float+0x174>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d64:	ab09      	add	r3, sp, #36	; 0x24
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	ec49 8b10 	vmov	d0, r8, r9
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	f8cd a004 	str.w	sl, [sp, #4]
 8008d72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d76:	4628      	mov	r0, r5
 8008d78:	f7ff fd2e 	bl	80087d8 <__cvt>
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	e648      	b.n	8008a12 <_printf_float+0x112>

08008d80 <_printf_common>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	4691      	mov	r9, r2
 8008d86:	461f      	mov	r7, r3
 8008d88:	688a      	ldr	r2, [r1, #8]
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfb8      	it	lt
 8008d94:	4613      	movlt	r3, r2
 8008d96:	f8c9 3000 	str.w	r3, [r9]
 8008d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	b112      	cbz	r2, 8008daa <_printf_common+0x2a>
 8008da4:	3301      	adds	r3, #1
 8008da6:	f8c9 3000 	str.w	r3, [r9]
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	0699      	lsls	r1, r3, #26
 8008dae:	bf42      	ittt	mi
 8008db0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008db4:	3302      	addmi	r3, #2
 8008db6:	f8c9 3000 	strmi.w	r3, [r9]
 8008dba:	6825      	ldr	r5, [r4, #0]
 8008dbc:	f015 0506 	ands.w	r5, r5, #6
 8008dc0:	d107      	bne.n	8008dd2 <_printf_common+0x52>
 8008dc2:	f104 0a19 	add.w	sl, r4, #25
 8008dc6:	68e3      	ldr	r3, [r4, #12]
 8008dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8008dcc:	1a9b      	subs	r3, r3, r2
 8008dce:	42ab      	cmp	r3, r5
 8008dd0:	dc28      	bgt.n	8008e24 <_printf_common+0xa4>
 8008dd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dd6:	6822      	ldr	r2, [r4, #0]
 8008dd8:	3300      	adds	r3, #0
 8008dda:	bf18      	it	ne
 8008ddc:	2301      	movne	r3, #1
 8008dde:	0692      	lsls	r2, r2, #26
 8008de0:	d42d      	bmi.n	8008e3e <_printf_common+0xbe>
 8008de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008de6:	4639      	mov	r1, r7
 8008de8:	4630      	mov	r0, r6
 8008dea:	47c0      	blx	r8
 8008dec:	3001      	adds	r0, #1
 8008dee:	d020      	beq.n	8008e32 <_printf_common+0xb2>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	68e5      	ldr	r5, [r4, #12]
 8008df4:	f8d9 2000 	ldr.w	r2, [r9]
 8008df8:	f003 0306 	and.w	r3, r3, #6
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	bf08      	it	eq
 8008e00:	1aad      	subeq	r5, r5, r2
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	6922      	ldr	r2, [r4, #16]
 8008e06:	bf0c      	ite	eq
 8008e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e0c:	2500      	movne	r5, #0
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bfc4      	itt	gt
 8008e12:	1a9b      	subgt	r3, r3, r2
 8008e14:	18ed      	addgt	r5, r5, r3
 8008e16:	f04f 0900 	mov.w	r9, #0
 8008e1a:	341a      	adds	r4, #26
 8008e1c:	454d      	cmp	r5, r9
 8008e1e:	d11a      	bne.n	8008e56 <_printf_common+0xd6>
 8008e20:	2000      	movs	r0, #0
 8008e22:	e008      	b.n	8008e36 <_printf_common+0xb6>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4652      	mov	r2, sl
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d103      	bne.n	8008e3a <_printf_common+0xba>
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	3501      	adds	r5, #1
 8008e3c:	e7c3      	b.n	8008dc6 <_printf_common+0x46>
 8008e3e:	18e1      	adds	r1, r4, r3
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	2030      	movs	r0, #48	; 0x30
 8008e44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e48:	4422      	add	r2, r4
 8008e4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e52:	3302      	adds	r3, #2
 8008e54:	e7c5      	b.n	8008de2 <_printf_common+0x62>
 8008e56:	2301      	movs	r3, #1
 8008e58:	4622      	mov	r2, r4
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	47c0      	blx	r8
 8008e60:	3001      	adds	r0, #1
 8008e62:	d0e6      	beq.n	8008e32 <_printf_common+0xb2>
 8008e64:	f109 0901 	add.w	r9, r9, #1
 8008e68:	e7d8      	b.n	8008e1c <_printf_common+0x9c>
	...

08008e6c <_printf_i>:
 8008e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e74:	460c      	mov	r4, r1
 8008e76:	7e09      	ldrb	r1, [r1, #24]
 8008e78:	b085      	sub	sp, #20
 8008e7a:	296e      	cmp	r1, #110	; 0x6e
 8008e7c:	4617      	mov	r7, r2
 8008e7e:	4606      	mov	r6, r0
 8008e80:	4698      	mov	r8, r3
 8008e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e84:	f000 80b3 	beq.w	8008fee <_printf_i+0x182>
 8008e88:	d822      	bhi.n	8008ed0 <_printf_i+0x64>
 8008e8a:	2963      	cmp	r1, #99	; 0x63
 8008e8c:	d036      	beq.n	8008efc <_printf_i+0x90>
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x3a>
 8008e90:	2900      	cmp	r1, #0
 8008e92:	f000 80b9 	beq.w	8009008 <_printf_i+0x19c>
 8008e96:	2958      	cmp	r1, #88	; 0x58
 8008e98:	f000 8083 	beq.w	8008fa2 <_printf_i+0x136>
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ea4:	e032      	b.n	8008f0c <_printf_i+0xa0>
 8008ea6:	2964      	cmp	r1, #100	; 0x64
 8008ea8:	d001      	beq.n	8008eae <_printf_i+0x42>
 8008eaa:	2969      	cmp	r1, #105	; 0x69
 8008eac:	d1f6      	bne.n	8008e9c <_printf_i+0x30>
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	6813      	ldr	r3, [r2, #0]
 8008eb2:	0605      	lsls	r5, r0, #24
 8008eb4:	f103 0104 	add.w	r1, r3, #4
 8008eb8:	d52a      	bpl.n	8008f10 <_printf_i+0xa4>
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	da03      	bge.n	8008eca <_printf_i+0x5e>
 8008ec2:	222d      	movs	r2, #45	; 0x2d
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008eca:	486f      	ldr	r0, [pc, #444]	; (8009088 <_printf_i+0x21c>)
 8008ecc:	220a      	movs	r2, #10
 8008ece:	e039      	b.n	8008f44 <_printf_i+0xd8>
 8008ed0:	2973      	cmp	r1, #115	; 0x73
 8008ed2:	f000 809d 	beq.w	8009010 <_printf_i+0x1a4>
 8008ed6:	d808      	bhi.n	8008eea <_printf_i+0x7e>
 8008ed8:	296f      	cmp	r1, #111	; 0x6f
 8008eda:	d020      	beq.n	8008f1e <_printf_i+0xb2>
 8008edc:	2970      	cmp	r1, #112	; 0x70
 8008ede:	d1dd      	bne.n	8008e9c <_printf_i+0x30>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	f043 0320 	orr.w	r3, r3, #32
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	e003      	b.n	8008ef2 <_printf_i+0x86>
 8008eea:	2975      	cmp	r1, #117	; 0x75
 8008eec:	d017      	beq.n	8008f1e <_printf_i+0xb2>
 8008eee:	2978      	cmp	r1, #120	; 0x78
 8008ef0:	d1d4      	bne.n	8008e9c <_printf_i+0x30>
 8008ef2:	2378      	movs	r3, #120	; 0x78
 8008ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ef8:	4864      	ldr	r0, [pc, #400]	; (800908c <_printf_i+0x220>)
 8008efa:	e055      	b.n	8008fa8 <_printf_i+0x13c>
 8008efc:	6813      	ldr	r3, [r2, #0]
 8008efe:	1d19      	adds	r1, r3, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6011      	str	r1, [r2, #0]
 8008f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e08c      	b.n	800902a <_printf_i+0x1be>
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6011      	str	r1, [r2, #0]
 8008f14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f18:	bf18      	it	ne
 8008f1a:	b21b      	sxthne	r3, r3
 8008f1c:	e7cf      	b.n	8008ebe <_printf_i+0x52>
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	1d18      	adds	r0, r3, #4
 8008f24:	6010      	str	r0, [r2, #0]
 8008f26:	0628      	lsls	r0, r5, #24
 8008f28:	d501      	bpl.n	8008f2e <_printf_i+0xc2>
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	e002      	b.n	8008f34 <_printf_i+0xc8>
 8008f2e:	0668      	lsls	r0, r5, #25
 8008f30:	d5fb      	bpl.n	8008f2a <_printf_i+0xbe>
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	4854      	ldr	r0, [pc, #336]	; (8009088 <_printf_i+0x21c>)
 8008f36:	296f      	cmp	r1, #111	; 0x6f
 8008f38:	bf14      	ite	ne
 8008f3a:	220a      	movne	r2, #10
 8008f3c:	2208      	moveq	r2, #8
 8008f3e:	2100      	movs	r1, #0
 8008f40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f44:	6865      	ldr	r5, [r4, #4]
 8008f46:	60a5      	str	r5, [r4, #8]
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	f2c0 8095 	blt.w	8009078 <_printf_i+0x20c>
 8008f4e:	6821      	ldr	r1, [r4, #0]
 8008f50:	f021 0104 	bic.w	r1, r1, #4
 8008f54:	6021      	str	r1, [r4, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d13d      	bne.n	8008fd6 <_printf_i+0x16a>
 8008f5a:	2d00      	cmp	r5, #0
 8008f5c:	f040 808e 	bne.w	800907c <_printf_i+0x210>
 8008f60:	4665      	mov	r5, ip
 8008f62:	2a08      	cmp	r2, #8
 8008f64:	d10b      	bne.n	8008f7e <_printf_i+0x112>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	07db      	lsls	r3, r3, #31
 8008f6a:	d508      	bpl.n	8008f7e <_printf_i+0x112>
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	6862      	ldr	r2, [r4, #4]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	bfde      	ittt	le
 8008f74:	2330      	movle	r3, #48	; 0x30
 8008f76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f7e:	ebac 0305 	sub.w	r3, ip, r5
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	f8cd 8000 	str.w	r8, [sp]
 8008f88:	463b      	mov	r3, r7
 8008f8a:	aa03      	add	r2, sp, #12
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7ff fef6 	bl	8008d80 <_printf_common>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d14d      	bne.n	8009034 <_printf_i+0x1c8>
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	b005      	add	sp, #20
 8008f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	4839      	ldr	r0, [pc, #228]	; (8009088 <_printf_i+0x21c>)
 8008fa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008fa8:	6813      	ldr	r3, [r2, #0]
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	1d1d      	adds	r5, r3, #4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6015      	str	r5, [r2, #0]
 8008fb2:	060a      	lsls	r2, r1, #24
 8008fb4:	d50b      	bpl.n	8008fce <_printf_i+0x162>
 8008fb6:	07ca      	lsls	r2, r1, #31
 8008fb8:	bf44      	itt	mi
 8008fba:	f041 0120 	orrmi.w	r1, r1, #32
 8008fbe:	6021      	strmi	r1, [r4, #0]
 8008fc0:	b91b      	cbnz	r3, 8008fca <_printf_i+0x15e>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	f022 0220 	bic.w	r2, r2, #32
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	2210      	movs	r2, #16
 8008fcc:	e7b7      	b.n	8008f3e <_printf_i+0xd2>
 8008fce:	064d      	lsls	r5, r1, #25
 8008fd0:	bf48      	it	mi
 8008fd2:	b29b      	uxthmi	r3, r3
 8008fd4:	e7ef      	b.n	8008fb6 <_printf_i+0x14a>
 8008fd6:	4665      	mov	r5, ip
 8008fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fdc:	fb02 3311 	mls	r3, r2, r1, r3
 8008fe0:	5cc3      	ldrb	r3, [r0, r3]
 8008fe2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d1f5      	bne.n	8008fd8 <_printf_i+0x16c>
 8008fec:	e7b9      	b.n	8008f62 <_printf_i+0xf6>
 8008fee:	6813      	ldr	r3, [r2, #0]
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	6961      	ldr	r1, [r4, #20]
 8008ff4:	1d18      	adds	r0, r3, #4
 8008ff6:	6010      	str	r0, [r2, #0]
 8008ff8:	0628      	lsls	r0, r5, #24
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	d501      	bpl.n	8009002 <_printf_i+0x196>
 8008ffe:	6019      	str	r1, [r3, #0]
 8009000:	e002      	b.n	8009008 <_printf_i+0x19c>
 8009002:	066a      	lsls	r2, r5, #25
 8009004:	d5fb      	bpl.n	8008ffe <_printf_i+0x192>
 8009006:	8019      	strh	r1, [r3, #0]
 8009008:	2300      	movs	r3, #0
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	4665      	mov	r5, ip
 800900e:	e7b9      	b.n	8008f84 <_printf_i+0x118>
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	1d19      	adds	r1, r3, #4
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	681d      	ldr	r5, [r3, #0]
 8009018:	6862      	ldr	r2, [r4, #4]
 800901a:	2100      	movs	r1, #0
 800901c:	4628      	mov	r0, r5
 800901e:	f7f7 f8df 	bl	80001e0 <memchr>
 8009022:	b108      	cbz	r0, 8009028 <_printf_i+0x1bc>
 8009024:	1b40      	subs	r0, r0, r5
 8009026:	6060      	str	r0, [r4, #4]
 8009028:	6863      	ldr	r3, [r4, #4]
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	2300      	movs	r3, #0
 800902e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009032:	e7a7      	b.n	8008f84 <_printf_i+0x118>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	462a      	mov	r2, r5
 8009038:	4639      	mov	r1, r7
 800903a:	4630      	mov	r0, r6
 800903c:	47c0      	blx	r8
 800903e:	3001      	adds	r0, #1
 8009040:	d0aa      	beq.n	8008f98 <_printf_i+0x12c>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	079b      	lsls	r3, r3, #30
 8009046:	d413      	bmi.n	8009070 <_printf_i+0x204>
 8009048:	68e0      	ldr	r0, [r4, #12]
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	4298      	cmp	r0, r3
 800904e:	bfb8      	it	lt
 8009050:	4618      	movlt	r0, r3
 8009052:	e7a3      	b.n	8008f9c <_printf_i+0x130>
 8009054:	2301      	movs	r3, #1
 8009056:	464a      	mov	r2, r9
 8009058:	4639      	mov	r1, r7
 800905a:	4630      	mov	r0, r6
 800905c:	47c0      	blx	r8
 800905e:	3001      	adds	r0, #1
 8009060:	d09a      	beq.n	8008f98 <_printf_i+0x12c>
 8009062:	3501      	adds	r5, #1
 8009064:	68e3      	ldr	r3, [r4, #12]
 8009066:	9a03      	ldr	r2, [sp, #12]
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	42ab      	cmp	r3, r5
 800906c:	dcf2      	bgt.n	8009054 <_printf_i+0x1e8>
 800906e:	e7eb      	b.n	8009048 <_printf_i+0x1dc>
 8009070:	2500      	movs	r5, #0
 8009072:	f104 0919 	add.w	r9, r4, #25
 8009076:	e7f5      	b.n	8009064 <_printf_i+0x1f8>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1ac      	bne.n	8008fd6 <_printf_i+0x16a>
 800907c:	7803      	ldrb	r3, [r0, #0]
 800907e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009086:	e76c      	b.n	8008f62 <_printf_i+0xf6>
 8009088:	0800d28a 	.word	0x0800d28a
 800908c:	0800d29b 	.word	0x0800d29b

08009090 <siprintf>:
 8009090:	b40e      	push	{r1, r2, r3}
 8009092:	b500      	push	{lr}
 8009094:	b09c      	sub	sp, #112	; 0x70
 8009096:	ab1d      	add	r3, sp, #116	; 0x74
 8009098:	9002      	str	r0, [sp, #8]
 800909a:	9006      	str	r0, [sp, #24]
 800909c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090a0:	4809      	ldr	r0, [pc, #36]	; (80090c8 <siprintf+0x38>)
 80090a2:	9107      	str	r1, [sp, #28]
 80090a4:	9104      	str	r1, [sp, #16]
 80090a6:	4909      	ldr	r1, [pc, #36]	; (80090cc <siprintf+0x3c>)
 80090a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ac:	9105      	str	r1, [sp, #20]
 80090ae:	6800      	ldr	r0, [r0, #0]
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	a902      	add	r1, sp, #8
 80090b4:	f002 fcde 	bl	800ba74 <_svfiprintf_r>
 80090b8:	9b02      	ldr	r3, [sp, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	b01c      	add	sp, #112	; 0x70
 80090c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090c4:	b003      	add	sp, #12
 80090c6:	4770      	bx	lr
 80090c8:	20000024 	.word	0x20000024
 80090cc:	ffff0208 	.word	0xffff0208

080090d0 <sulp>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4604      	mov	r4, r0
 80090d4:	460d      	mov	r5, r1
 80090d6:	ec45 4b10 	vmov	d0, r4, r5
 80090da:	4616      	mov	r6, r2
 80090dc:	f002 fa86 	bl	800b5ec <__ulp>
 80090e0:	ec51 0b10 	vmov	r0, r1, d0
 80090e4:	b17e      	cbz	r6, 8009106 <sulp+0x36>
 80090e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80090ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dd09      	ble.n	8009106 <sulp+0x36>
 80090f2:	051b      	lsls	r3, r3, #20
 80090f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80090f8:	2400      	movs	r4, #0
 80090fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80090fe:	4622      	mov	r2, r4
 8009100:	462b      	mov	r3, r5
 8009102:	f7f7 fa79 	bl	80005f8 <__aeabi_dmul>
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <_strtod_l>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	461f      	mov	r7, r3
 800910e:	b0a1      	sub	sp, #132	; 0x84
 8009110:	2300      	movs	r3, #0
 8009112:	4681      	mov	r9, r0
 8009114:	4638      	mov	r0, r7
 8009116:	460e      	mov	r6, r1
 8009118:	9217      	str	r2, [sp, #92]	; 0x5c
 800911a:	931c      	str	r3, [sp, #112]	; 0x70
 800911c:	f001 ff66 	bl	800afec <__localeconv_l>
 8009120:	4680      	mov	r8, r0
 8009122:	6800      	ldr	r0, [r0, #0]
 8009124:	f7f7 f854 	bl	80001d0 <strlen>
 8009128:	f04f 0a00 	mov.w	sl, #0
 800912c:	4604      	mov	r4, r0
 800912e:	f04f 0b00 	mov.w	fp, #0
 8009132:	961b      	str	r6, [sp, #108]	; 0x6c
 8009134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	2a0d      	cmp	r2, #13
 800913a:	d832      	bhi.n	80091a2 <_strtod_l+0x9a>
 800913c:	2a09      	cmp	r2, #9
 800913e:	d236      	bcs.n	80091ae <_strtod_l+0xa6>
 8009140:	2a00      	cmp	r2, #0
 8009142:	d03e      	beq.n	80091c2 <_strtod_l+0xba>
 8009144:	2300      	movs	r3, #0
 8009146:	930d      	str	r3, [sp, #52]	; 0x34
 8009148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800914a:	782b      	ldrb	r3, [r5, #0]
 800914c:	2b30      	cmp	r3, #48	; 0x30
 800914e:	f040 80ac 	bne.w	80092aa <_strtod_l+0x1a2>
 8009152:	786b      	ldrb	r3, [r5, #1]
 8009154:	2b58      	cmp	r3, #88	; 0x58
 8009156:	d001      	beq.n	800915c <_strtod_l+0x54>
 8009158:	2b78      	cmp	r3, #120	; 0x78
 800915a:	d167      	bne.n	800922c <_strtod_l+0x124>
 800915c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	ab1c      	add	r3, sp, #112	; 0x70
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	9702      	str	r7, [sp, #8]
 8009166:	ab1d      	add	r3, sp, #116	; 0x74
 8009168:	4a88      	ldr	r2, [pc, #544]	; (800938c <_strtod_l+0x284>)
 800916a:	a91b      	add	r1, sp, #108	; 0x6c
 800916c:	4648      	mov	r0, r9
 800916e:	f001 fc66 	bl	800aa3e <__gethex>
 8009172:	f010 0407 	ands.w	r4, r0, #7
 8009176:	4606      	mov	r6, r0
 8009178:	d005      	beq.n	8009186 <_strtod_l+0x7e>
 800917a:	2c06      	cmp	r4, #6
 800917c:	d12b      	bne.n	80091d6 <_strtod_l+0xce>
 800917e:	3501      	adds	r5, #1
 8009180:	2300      	movs	r3, #0
 8009182:	951b      	str	r5, [sp, #108]	; 0x6c
 8009184:	930d      	str	r3, [sp, #52]	; 0x34
 8009186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009188:	2b00      	cmp	r3, #0
 800918a:	f040 859a 	bne.w	8009cc2 <_strtod_l+0xbba>
 800918e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009190:	b1e3      	cbz	r3, 80091cc <_strtod_l+0xc4>
 8009192:	4652      	mov	r2, sl
 8009194:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009198:	ec43 2b10 	vmov	d0, r2, r3
 800919c:	b021      	add	sp, #132	; 0x84
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a2:	2a2b      	cmp	r2, #43	; 0x2b
 80091a4:	d015      	beq.n	80091d2 <_strtod_l+0xca>
 80091a6:	2a2d      	cmp	r2, #45	; 0x2d
 80091a8:	d004      	beq.n	80091b4 <_strtod_l+0xac>
 80091aa:	2a20      	cmp	r2, #32
 80091ac:	d1ca      	bne.n	8009144 <_strtod_l+0x3c>
 80091ae:	3301      	adds	r3, #1
 80091b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80091b2:	e7bf      	b.n	8009134 <_strtod_l+0x2c>
 80091b4:	2201      	movs	r2, #1
 80091b6:	920d      	str	r2, [sp, #52]	; 0x34
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1c2      	bne.n	8009148 <_strtod_l+0x40>
 80091c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f040 8579 	bne.w	8009cbe <_strtod_l+0xbb6>
 80091cc:	4652      	mov	r2, sl
 80091ce:	465b      	mov	r3, fp
 80091d0:	e7e2      	b.n	8009198 <_strtod_l+0x90>
 80091d2:	2200      	movs	r2, #0
 80091d4:	e7ef      	b.n	80091b6 <_strtod_l+0xae>
 80091d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80091d8:	b13a      	cbz	r2, 80091ea <_strtod_l+0xe2>
 80091da:	2135      	movs	r1, #53	; 0x35
 80091dc:	a81e      	add	r0, sp, #120	; 0x78
 80091de:	f002 fafd 	bl	800b7dc <__copybits>
 80091e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091e4:	4648      	mov	r0, r9
 80091e6:	f001 ff6a 	bl	800b0be <_Bfree>
 80091ea:	3c01      	subs	r4, #1
 80091ec:	2c04      	cmp	r4, #4
 80091ee:	d806      	bhi.n	80091fe <_strtod_l+0xf6>
 80091f0:	e8df f004 	tbb	[pc, r4]
 80091f4:	1714030a 	.word	0x1714030a
 80091f8:	0a          	.byte	0x0a
 80091f9:	00          	.byte	0x00
 80091fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80091fe:	0730      	lsls	r0, r6, #28
 8009200:	d5c1      	bpl.n	8009186 <_strtod_l+0x7e>
 8009202:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009206:	e7be      	b.n	8009186 <_strtod_l+0x7e>
 8009208:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800920c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800920e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009212:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009216:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800921a:	e7f0      	b.n	80091fe <_strtod_l+0xf6>
 800921c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009390 <_strtod_l+0x288>
 8009220:	e7ed      	b.n	80091fe <_strtod_l+0xf6>
 8009222:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009226:	f04f 3aff 	mov.w	sl, #4294967295
 800922a:	e7e8      	b.n	80091fe <_strtod_l+0xf6>
 800922c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	921b      	str	r2, [sp, #108]	; 0x6c
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b30      	cmp	r3, #48	; 0x30
 8009236:	d0f9      	beq.n	800922c <_strtod_l+0x124>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0a4      	beq.n	8009186 <_strtod_l+0x7e>
 800923c:	2301      	movs	r3, #1
 800923e:	2500      	movs	r5, #0
 8009240:	9306      	str	r3, [sp, #24]
 8009242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009244:	9308      	str	r3, [sp, #32]
 8009246:	9507      	str	r5, [sp, #28]
 8009248:	9505      	str	r5, [sp, #20]
 800924a:	220a      	movs	r2, #10
 800924c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800924e:	7807      	ldrb	r7, [r0, #0]
 8009250:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009254:	b2d9      	uxtb	r1, r3
 8009256:	2909      	cmp	r1, #9
 8009258:	d929      	bls.n	80092ae <_strtod_l+0x1a6>
 800925a:	4622      	mov	r2, r4
 800925c:	f8d8 1000 	ldr.w	r1, [r8]
 8009260:	f002 fd10 	bl	800bc84 <strncmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	d031      	beq.n	80092cc <_strtod_l+0x1c4>
 8009268:	2000      	movs	r0, #0
 800926a:	9c05      	ldr	r4, [sp, #20]
 800926c:	9004      	str	r0, [sp, #16]
 800926e:	463b      	mov	r3, r7
 8009270:	4602      	mov	r2, r0
 8009272:	2b65      	cmp	r3, #101	; 0x65
 8009274:	d001      	beq.n	800927a <_strtod_l+0x172>
 8009276:	2b45      	cmp	r3, #69	; 0x45
 8009278:	d114      	bne.n	80092a4 <_strtod_l+0x19c>
 800927a:	b924      	cbnz	r4, 8009286 <_strtod_l+0x17e>
 800927c:	b910      	cbnz	r0, 8009284 <_strtod_l+0x17c>
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d09e      	beq.n	80091c2 <_strtod_l+0xba>
 8009284:	2400      	movs	r4, #0
 8009286:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009288:	1c73      	adds	r3, r6, #1
 800928a:	931b      	str	r3, [sp, #108]	; 0x6c
 800928c:	7873      	ldrb	r3, [r6, #1]
 800928e:	2b2b      	cmp	r3, #43	; 0x2b
 8009290:	d078      	beq.n	8009384 <_strtod_l+0x27c>
 8009292:	2b2d      	cmp	r3, #45	; 0x2d
 8009294:	d070      	beq.n	8009378 <_strtod_l+0x270>
 8009296:	f04f 0c00 	mov.w	ip, #0
 800929a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800929e:	2f09      	cmp	r7, #9
 80092a0:	d97c      	bls.n	800939c <_strtod_l+0x294>
 80092a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80092a4:	f04f 0e00 	mov.w	lr, #0
 80092a8:	e09a      	b.n	80093e0 <_strtod_l+0x2d8>
 80092aa:	2300      	movs	r3, #0
 80092ac:	e7c7      	b.n	800923e <_strtod_l+0x136>
 80092ae:	9905      	ldr	r1, [sp, #20]
 80092b0:	2908      	cmp	r1, #8
 80092b2:	bfdd      	ittte	le
 80092b4:	9907      	ldrle	r1, [sp, #28]
 80092b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80092ba:	9307      	strle	r3, [sp, #28]
 80092bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	3001      	adds	r0, #1
 80092c4:	3301      	adds	r3, #1
 80092c6:	9305      	str	r3, [sp, #20]
 80092c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80092ca:	e7bf      	b.n	800924c <_strtod_l+0x144>
 80092cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092ce:	191a      	adds	r2, r3, r4
 80092d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80092d2:	9a05      	ldr	r2, [sp, #20]
 80092d4:	5d1b      	ldrb	r3, [r3, r4]
 80092d6:	2a00      	cmp	r2, #0
 80092d8:	d037      	beq.n	800934a <_strtod_l+0x242>
 80092da:	9c05      	ldr	r4, [sp, #20]
 80092dc:	4602      	mov	r2, r0
 80092de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80092e2:	2909      	cmp	r1, #9
 80092e4:	d913      	bls.n	800930e <_strtod_l+0x206>
 80092e6:	2101      	movs	r1, #1
 80092e8:	9104      	str	r1, [sp, #16]
 80092ea:	e7c2      	b.n	8009272 <_strtod_l+0x16a>
 80092ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	3001      	adds	r0, #1
 80092f6:	2b30      	cmp	r3, #48	; 0x30
 80092f8:	d0f8      	beq.n	80092ec <_strtod_l+0x1e4>
 80092fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80092fe:	2a08      	cmp	r2, #8
 8009300:	f200 84e4 	bhi.w	8009ccc <_strtod_l+0xbc4>
 8009304:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009306:	9208      	str	r2, [sp, #32]
 8009308:	4602      	mov	r2, r0
 800930a:	2000      	movs	r0, #0
 800930c:	4604      	mov	r4, r0
 800930e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009312:	f100 0101 	add.w	r1, r0, #1
 8009316:	d012      	beq.n	800933e <_strtod_l+0x236>
 8009318:	440a      	add	r2, r1
 800931a:	eb00 0c04 	add.w	ip, r0, r4
 800931e:	4621      	mov	r1, r4
 8009320:	270a      	movs	r7, #10
 8009322:	458c      	cmp	ip, r1
 8009324:	d113      	bne.n	800934e <_strtod_l+0x246>
 8009326:	1821      	adds	r1, r4, r0
 8009328:	2908      	cmp	r1, #8
 800932a:	f104 0401 	add.w	r4, r4, #1
 800932e:	4404      	add	r4, r0
 8009330:	dc19      	bgt.n	8009366 <_strtod_l+0x25e>
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	210a      	movs	r1, #10
 8009336:	fb01 e303 	mla	r3, r1, r3, lr
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	2100      	movs	r1, #0
 800933e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009340:	1c58      	adds	r0, r3, #1
 8009342:	901b      	str	r0, [sp, #108]	; 0x6c
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	4608      	mov	r0, r1
 8009348:	e7c9      	b.n	80092de <_strtod_l+0x1d6>
 800934a:	9805      	ldr	r0, [sp, #20]
 800934c:	e7d3      	b.n	80092f6 <_strtod_l+0x1ee>
 800934e:	2908      	cmp	r1, #8
 8009350:	f101 0101 	add.w	r1, r1, #1
 8009354:	dc03      	bgt.n	800935e <_strtod_l+0x256>
 8009356:	9b07      	ldr	r3, [sp, #28]
 8009358:	437b      	muls	r3, r7
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	e7e1      	b.n	8009322 <_strtod_l+0x21a>
 800935e:	2910      	cmp	r1, #16
 8009360:	bfd8      	it	le
 8009362:	437d      	mulle	r5, r7
 8009364:	e7dd      	b.n	8009322 <_strtod_l+0x21a>
 8009366:	2c10      	cmp	r4, #16
 8009368:	bfdc      	itt	le
 800936a:	210a      	movle	r1, #10
 800936c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009370:	e7e4      	b.n	800933c <_strtod_l+0x234>
 8009372:	2301      	movs	r3, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	e781      	b.n	800927c <_strtod_l+0x174>
 8009378:	f04f 0c01 	mov.w	ip, #1
 800937c:	1cb3      	adds	r3, r6, #2
 800937e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009380:	78b3      	ldrb	r3, [r6, #2]
 8009382:	e78a      	b.n	800929a <_strtod_l+0x192>
 8009384:	f04f 0c00 	mov.w	ip, #0
 8009388:	e7f8      	b.n	800937c <_strtod_l+0x274>
 800938a:	bf00      	nop
 800938c:	0800d2ac 	.word	0x0800d2ac
 8009390:	7ff00000 	.word	0x7ff00000
 8009394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009396:	1c5f      	adds	r7, r3, #1
 8009398:	971b      	str	r7, [sp, #108]	; 0x6c
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2b30      	cmp	r3, #48	; 0x30
 800939e:	d0f9      	beq.n	8009394 <_strtod_l+0x28c>
 80093a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80093a4:	2f08      	cmp	r7, #8
 80093a6:	f63f af7d 	bhi.w	80092a4 <_strtod_l+0x19c>
 80093aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80093ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093b0:	930a      	str	r3, [sp, #40]	; 0x28
 80093b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093b4:	1c5f      	adds	r7, r3, #1
 80093b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80093be:	f1b8 0f09 	cmp.w	r8, #9
 80093c2:	d937      	bls.n	8009434 <_strtod_l+0x32c>
 80093c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093c6:	1a7f      	subs	r7, r7, r1
 80093c8:	2f08      	cmp	r7, #8
 80093ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80093ce:	dc37      	bgt.n	8009440 <_strtod_l+0x338>
 80093d0:	45be      	cmp	lr, r7
 80093d2:	bfa8      	it	ge
 80093d4:	46be      	movge	lr, r7
 80093d6:	f1bc 0f00 	cmp.w	ip, #0
 80093da:	d001      	beq.n	80093e0 <_strtod_l+0x2d8>
 80093dc:	f1ce 0e00 	rsb	lr, lr, #0
 80093e0:	2c00      	cmp	r4, #0
 80093e2:	d151      	bne.n	8009488 <_strtod_l+0x380>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f47f aece 	bne.w	8009186 <_strtod_l+0x7e>
 80093ea:	9a06      	ldr	r2, [sp, #24]
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	f47f aeca 	bne.w	8009186 <_strtod_l+0x7e>
 80093f2:	9a04      	ldr	r2, [sp, #16]
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f47f aee4 	bne.w	80091c2 <_strtod_l+0xba>
 80093fa:	2b4e      	cmp	r3, #78	; 0x4e
 80093fc:	d027      	beq.n	800944e <_strtod_l+0x346>
 80093fe:	dc21      	bgt.n	8009444 <_strtod_l+0x33c>
 8009400:	2b49      	cmp	r3, #73	; 0x49
 8009402:	f47f aede 	bne.w	80091c2 <_strtod_l+0xba>
 8009406:	49a0      	ldr	r1, [pc, #640]	; (8009688 <_strtod_l+0x580>)
 8009408:	a81b      	add	r0, sp, #108	; 0x6c
 800940a:	f001 fd4b 	bl	800aea4 <__match>
 800940e:	2800      	cmp	r0, #0
 8009410:	f43f aed7 	beq.w	80091c2 <_strtod_l+0xba>
 8009414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009416:	499d      	ldr	r1, [pc, #628]	; (800968c <_strtod_l+0x584>)
 8009418:	3b01      	subs	r3, #1
 800941a:	a81b      	add	r0, sp, #108	; 0x6c
 800941c:	931b      	str	r3, [sp, #108]	; 0x6c
 800941e:	f001 fd41 	bl	800aea4 <__match>
 8009422:	b910      	cbnz	r0, 800942a <_strtod_l+0x322>
 8009424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009426:	3301      	adds	r3, #1
 8009428:	931b      	str	r3, [sp, #108]	; 0x6c
 800942a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80096a0 <_strtod_l+0x598>
 800942e:	f04f 0a00 	mov.w	sl, #0
 8009432:	e6a8      	b.n	8009186 <_strtod_l+0x7e>
 8009434:	210a      	movs	r1, #10
 8009436:	fb01 3e0e 	mla	lr, r1, lr, r3
 800943a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800943e:	e7b8      	b.n	80093b2 <_strtod_l+0x2aa>
 8009440:	46be      	mov	lr, r7
 8009442:	e7c8      	b.n	80093d6 <_strtod_l+0x2ce>
 8009444:	2b69      	cmp	r3, #105	; 0x69
 8009446:	d0de      	beq.n	8009406 <_strtod_l+0x2fe>
 8009448:	2b6e      	cmp	r3, #110	; 0x6e
 800944a:	f47f aeba 	bne.w	80091c2 <_strtod_l+0xba>
 800944e:	4990      	ldr	r1, [pc, #576]	; (8009690 <_strtod_l+0x588>)
 8009450:	a81b      	add	r0, sp, #108	; 0x6c
 8009452:	f001 fd27 	bl	800aea4 <__match>
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f aeb3 	beq.w	80091c2 <_strtod_l+0xba>
 800945c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b28      	cmp	r3, #40	; 0x28
 8009462:	d10e      	bne.n	8009482 <_strtod_l+0x37a>
 8009464:	aa1e      	add	r2, sp, #120	; 0x78
 8009466:	498b      	ldr	r1, [pc, #556]	; (8009694 <_strtod_l+0x58c>)
 8009468:	a81b      	add	r0, sp, #108	; 0x6c
 800946a:	f001 fd2f 	bl	800aecc <__hexnan>
 800946e:	2805      	cmp	r0, #5
 8009470:	d107      	bne.n	8009482 <_strtod_l+0x37a>
 8009472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009474:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009478:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800947c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009480:	e681      	b.n	8009186 <_strtod_l+0x7e>
 8009482:	f8df b224 	ldr.w	fp, [pc, #548]	; 80096a8 <_strtod_l+0x5a0>
 8009486:	e7d2      	b.n	800942e <_strtod_l+0x326>
 8009488:	ebae 0302 	sub.w	r3, lr, r2
 800948c:	9306      	str	r3, [sp, #24]
 800948e:	9b05      	ldr	r3, [sp, #20]
 8009490:	9807      	ldr	r0, [sp, #28]
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf08      	it	eq
 8009496:	4623      	moveq	r3, r4
 8009498:	2c10      	cmp	r4, #16
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	46a0      	mov	r8, r4
 800949e:	bfa8      	it	ge
 80094a0:	f04f 0810 	movge.w	r8, #16
 80094a4:	f7f7 f82e 	bl	8000504 <__aeabi_ui2d>
 80094a8:	2c09      	cmp	r4, #9
 80094aa:	4682      	mov	sl, r0
 80094ac:	468b      	mov	fp, r1
 80094ae:	dc13      	bgt.n	80094d8 <_strtod_l+0x3d0>
 80094b0:	9b06      	ldr	r3, [sp, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f43f ae67 	beq.w	8009186 <_strtod_l+0x7e>
 80094b8:	9b06      	ldr	r3, [sp, #24]
 80094ba:	dd7a      	ble.n	80095b2 <_strtod_l+0x4aa>
 80094bc:	2b16      	cmp	r3, #22
 80094be:	dc61      	bgt.n	8009584 <_strtod_l+0x47c>
 80094c0:	4a75      	ldr	r2, [pc, #468]	; (8009698 <_strtod_l+0x590>)
 80094c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80094c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80094ca:	4652      	mov	r2, sl
 80094cc:	465b      	mov	r3, fp
 80094ce:	f7f7 f893 	bl	80005f8 <__aeabi_dmul>
 80094d2:	4682      	mov	sl, r0
 80094d4:	468b      	mov	fp, r1
 80094d6:	e656      	b.n	8009186 <_strtod_l+0x7e>
 80094d8:	4b6f      	ldr	r3, [pc, #444]	; (8009698 <_strtod_l+0x590>)
 80094da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80094de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80094e2:	f7f7 f889 	bl	80005f8 <__aeabi_dmul>
 80094e6:	4606      	mov	r6, r0
 80094e8:	4628      	mov	r0, r5
 80094ea:	460f      	mov	r7, r1
 80094ec:	f7f7 f80a 	bl	8000504 <__aeabi_ui2d>
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4630      	mov	r0, r6
 80094f6:	4639      	mov	r1, r7
 80094f8:	f7f6 fec8 	bl	800028c <__adddf3>
 80094fc:	2c0f      	cmp	r4, #15
 80094fe:	4682      	mov	sl, r0
 8009500:	468b      	mov	fp, r1
 8009502:	ddd5      	ble.n	80094b0 <_strtod_l+0x3a8>
 8009504:	9b06      	ldr	r3, [sp, #24]
 8009506:	eba4 0808 	sub.w	r8, r4, r8
 800950a:	4498      	add	r8, r3
 800950c:	f1b8 0f00 	cmp.w	r8, #0
 8009510:	f340 8096 	ble.w	8009640 <_strtod_l+0x538>
 8009514:	f018 030f 	ands.w	r3, r8, #15
 8009518:	d00a      	beq.n	8009530 <_strtod_l+0x428>
 800951a:	495f      	ldr	r1, [pc, #380]	; (8009698 <_strtod_l+0x590>)
 800951c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009520:	4652      	mov	r2, sl
 8009522:	465b      	mov	r3, fp
 8009524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009528:	f7f7 f866 	bl	80005f8 <__aeabi_dmul>
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	f038 080f 	bics.w	r8, r8, #15
 8009534:	d073      	beq.n	800961e <_strtod_l+0x516>
 8009536:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800953a:	dd47      	ble.n	80095cc <_strtod_l+0x4c4>
 800953c:	2400      	movs	r4, #0
 800953e:	46a0      	mov	r8, r4
 8009540:	9407      	str	r4, [sp, #28]
 8009542:	9405      	str	r4, [sp, #20]
 8009544:	2322      	movs	r3, #34	; 0x22
 8009546:	f8df b158 	ldr.w	fp, [pc, #344]	; 80096a0 <_strtod_l+0x598>
 800954a:	f8c9 3000 	str.w	r3, [r9]
 800954e:	f04f 0a00 	mov.w	sl, #0
 8009552:	9b07      	ldr	r3, [sp, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f43f ae16 	beq.w	8009186 <_strtod_l+0x7e>
 800955a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800955c:	4648      	mov	r0, r9
 800955e:	f001 fdae 	bl	800b0be <_Bfree>
 8009562:	9905      	ldr	r1, [sp, #20]
 8009564:	4648      	mov	r0, r9
 8009566:	f001 fdaa 	bl	800b0be <_Bfree>
 800956a:	4641      	mov	r1, r8
 800956c:	4648      	mov	r0, r9
 800956e:	f001 fda6 	bl	800b0be <_Bfree>
 8009572:	9907      	ldr	r1, [sp, #28]
 8009574:	4648      	mov	r0, r9
 8009576:	f001 fda2 	bl	800b0be <_Bfree>
 800957a:	4621      	mov	r1, r4
 800957c:	4648      	mov	r0, r9
 800957e:	f001 fd9e 	bl	800b0be <_Bfree>
 8009582:	e600      	b.n	8009186 <_strtod_l+0x7e>
 8009584:	9a06      	ldr	r2, [sp, #24]
 8009586:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800958a:	4293      	cmp	r3, r2
 800958c:	dbba      	blt.n	8009504 <_strtod_l+0x3fc>
 800958e:	4d42      	ldr	r5, [pc, #264]	; (8009698 <_strtod_l+0x590>)
 8009590:	f1c4 040f 	rsb	r4, r4, #15
 8009594:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009598:	4652      	mov	r2, sl
 800959a:	465b      	mov	r3, fp
 800959c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a0:	f7f7 f82a 	bl	80005f8 <__aeabi_dmul>
 80095a4:	9b06      	ldr	r3, [sp, #24]
 80095a6:	1b1c      	subs	r4, r3, r4
 80095a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80095ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095b0:	e78d      	b.n	80094ce <_strtod_l+0x3c6>
 80095b2:	f113 0f16 	cmn.w	r3, #22
 80095b6:	dba5      	blt.n	8009504 <_strtod_l+0x3fc>
 80095b8:	4a37      	ldr	r2, [pc, #220]	; (8009698 <_strtod_l+0x590>)
 80095ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80095be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80095c2:	4650      	mov	r0, sl
 80095c4:	4659      	mov	r1, fp
 80095c6:	f7f7 f941 	bl	800084c <__aeabi_ddiv>
 80095ca:	e782      	b.n	80094d2 <_strtod_l+0x3ca>
 80095cc:	2300      	movs	r3, #0
 80095ce:	4e33      	ldr	r6, [pc, #204]	; (800969c <_strtod_l+0x594>)
 80095d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80095d4:	4650      	mov	r0, sl
 80095d6:	4659      	mov	r1, fp
 80095d8:	461d      	mov	r5, r3
 80095da:	f1b8 0f01 	cmp.w	r8, #1
 80095de:	dc21      	bgt.n	8009624 <_strtod_l+0x51c>
 80095e0:	b10b      	cbz	r3, 80095e6 <_strtod_l+0x4de>
 80095e2:	4682      	mov	sl, r0
 80095e4:	468b      	mov	fp, r1
 80095e6:	4b2d      	ldr	r3, [pc, #180]	; (800969c <_strtod_l+0x594>)
 80095e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80095ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80095f0:	4652      	mov	r2, sl
 80095f2:	465b      	mov	r3, fp
 80095f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <_strtod_l+0x598>)
 80095fe:	460a      	mov	r2, r1
 8009600:	400b      	ands	r3, r1
 8009602:	4928      	ldr	r1, [pc, #160]	; (80096a4 <_strtod_l+0x59c>)
 8009604:	428b      	cmp	r3, r1
 8009606:	4682      	mov	sl, r0
 8009608:	d898      	bhi.n	800953c <_strtod_l+0x434>
 800960a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800960e:	428b      	cmp	r3, r1
 8009610:	bf86      	itte	hi
 8009612:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80096ac <_strtod_l+0x5a4>
 8009616:	f04f 3aff 	movhi.w	sl, #4294967295
 800961a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800961e:	2300      	movs	r3, #0
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	e077      	b.n	8009714 <_strtod_l+0x60c>
 8009624:	f018 0f01 	tst.w	r8, #1
 8009628:	d006      	beq.n	8009638 <_strtod_l+0x530>
 800962a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 ffe1 	bl	80005f8 <__aeabi_dmul>
 8009636:	2301      	movs	r3, #1
 8009638:	3501      	adds	r5, #1
 800963a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800963e:	e7cc      	b.n	80095da <_strtod_l+0x4d2>
 8009640:	d0ed      	beq.n	800961e <_strtod_l+0x516>
 8009642:	f1c8 0800 	rsb	r8, r8, #0
 8009646:	f018 020f 	ands.w	r2, r8, #15
 800964a:	d00a      	beq.n	8009662 <_strtod_l+0x55a>
 800964c:	4b12      	ldr	r3, [pc, #72]	; (8009698 <_strtod_l+0x590>)
 800964e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009652:	4650      	mov	r0, sl
 8009654:	4659      	mov	r1, fp
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f7 f8f7 	bl	800084c <__aeabi_ddiv>
 800965e:	4682      	mov	sl, r0
 8009660:	468b      	mov	fp, r1
 8009662:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009666:	d0da      	beq.n	800961e <_strtod_l+0x516>
 8009668:	f1b8 0f1f 	cmp.w	r8, #31
 800966c:	dd20      	ble.n	80096b0 <_strtod_l+0x5a8>
 800966e:	2400      	movs	r4, #0
 8009670:	46a0      	mov	r8, r4
 8009672:	9407      	str	r4, [sp, #28]
 8009674:	9405      	str	r4, [sp, #20]
 8009676:	2322      	movs	r3, #34	; 0x22
 8009678:	f04f 0a00 	mov.w	sl, #0
 800967c:	f04f 0b00 	mov.w	fp, #0
 8009680:	f8c9 3000 	str.w	r3, [r9]
 8009684:	e765      	b.n	8009552 <_strtod_l+0x44a>
 8009686:	bf00      	nop
 8009688:	0800d27d 	.word	0x0800d27d
 800968c:	0800d303 	.word	0x0800d303
 8009690:	0800d285 	.word	0x0800d285
 8009694:	0800d2c0 	.word	0x0800d2c0
 8009698:	0800d340 	.word	0x0800d340
 800969c:	0800d318 	.word	0x0800d318
 80096a0:	7ff00000 	.word	0x7ff00000
 80096a4:	7ca00000 	.word	0x7ca00000
 80096a8:	fff80000 	.word	0xfff80000
 80096ac:	7fefffff 	.word	0x7fefffff
 80096b0:	f018 0310 	ands.w	r3, r8, #16
 80096b4:	bf18      	it	ne
 80096b6:	236a      	movne	r3, #106	; 0x6a
 80096b8:	4da0      	ldr	r5, [pc, #640]	; (800993c <_strtod_l+0x834>)
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	4650      	mov	r0, sl
 80096be:	4659      	mov	r1, fp
 80096c0:	2300      	movs	r3, #0
 80096c2:	f1b8 0f00 	cmp.w	r8, #0
 80096c6:	f300 810a 	bgt.w	80098de <_strtod_l+0x7d6>
 80096ca:	b10b      	cbz	r3, 80096d0 <_strtod_l+0x5c8>
 80096cc:	4682      	mov	sl, r0
 80096ce:	468b      	mov	fp, r1
 80096d0:	9b04      	ldr	r3, [sp, #16]
 80096d2:	b1bb      	cbz	r3, 8009704 <_strtod_l+0x5fc>
 80096d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80096d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096dc:	2b00      	cmp	r3, #0
 80096de:	4659      	mov	r1, fp
 80096e0:	dd10      	ble.n	8009704 <_strtod_l+0x5fc>
 80096e2:	2b1f      	cmp	r3, #31
 80096e4:	f340 8107 	ble.w	80098f6 <_strtod_l+0x7ee>
 80096e8:	2b34      	cmp	r3, #52	; 0x34
 80096ea:	bfde      	ittt	le
 80096ec:	3b20      	suble	r3, #32
 80096ee:	f04f 32ff 	movle.w	r2, #4294967295
 80096f2:	fa02 f303 	lslle.w	r3, r2, r3
 80096f6:	f04f 0a00 	mov.w	sl, #0
 80096fa:	bfcc      	ite	gt
 80096fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009700:	ea03 0b01 	andle.w	fp, r3, r1
 8009704:	2200      	movs	r2, #0
 8009706:	2300      	movs	r3, #0
 8009708:	4650      	mov	r0, sl
 800970a:	4659      	mov	r1, fp
 800970c:	f7f7 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009710:	2800      	cmp	r0, #0
 8009712:	d1ac      	bne.n	800966e <_strtod_l+0x566>
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	9a05      	ldr	r2, [sp, #20]
 800971a:	9908      	ldr	r1, [sp, #32]
 800971c:	4623      	mov	r3, r4
 800971e:	4648      	mov	r0, r9
 8009720:	f001 fd1f 	bl	800b162 <__s2b>
 8009724:	9007      	str	r0, [sp, #28]
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f af08 	beq.w	800953c <_strtod_l+0x434>
 800972c:	9a06      	ldr	r2, [sp, #24]
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	2a00      	cmp	r2, #0
 8009732:	f1c3 0300 	rsb	r3, r3, #0
 8009736:	bfa8      	it	ge
 8009738:	2300      	movge	r3, #0
 800973a:	930e      	str	r3, [sp, #56]	; 0x38
 800973c:	2400      	movs	r4, #0
 800973e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009742:	9316      	str	r3, [sp, #88]	; 0x58
 8009744:	46a0      	mov	r8, r4
 8009746:	9b07      	ldr	r3, [sp, #28]
 8009748:	4648      	mov	r0, r9
 800974a:	6859      	ldr	r1, [r3, #4]
 800974c:	f001 fc83 	bl	800b056 <_Balloc>
 8009750:	9005      	str	r0, [sp, #20]
 8009752:	2800      	cmp	r0, #0
 8009754:	f43f aef6 	beq.w	8009544 <_strtod_l+0x43c>
 8009758:	9b07      	ldr	r3, [sp, #28]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	3202      	adds	r2, #2
 800975e:	f103 010c 	add.w	r1, r3, #12
 8009762:	0092      	lsls	r2, r2, #2
 8009764:	300c      	adds	r0, #12
 8009766:	f001 fc6b 	bl	800b040 <memcpy>
 800976a:	aa1e      	add	r2, sp, #120	; 0x78
 800976c:	a91d      	add	r1, sp, #116	; 0x74
 800976e:	ec4b ab10 	vmov	d0, sl, fp
 8009772:	4648      	mov	r0, r9
 8009774:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009778:	f001 ffae 	bl	800b6d8 <__d2b>
 800977c:	901c      	str	r0, [sp, #112]	; 0x70
 800977e:	2800      	cmp	r0, #0
 8009780:	f43f aee0 	beq.w	8009544 <_strtod_l+0x43c>
 8009784:	2101      	movs	r1, #1
 8009786:	4648      	mov	r0, r9
 8009788:	f001 fd77 	bl	800b27a <__i2b>
 800978c:	4680      	mov	r8, r0
 800978e:	2800      	cmp	r0, #0
 8009790:	f43f aed8 	beq.w	8009544 <_strtod_l+0x43c>
 8009794:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009796:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009798:	2e00      	cmp	r6, #0
 800979a:	bfab      	itete	ge
 800979c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800979e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80097a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80097a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80097a4:	bfac      	ite	ge
 80097a6:	18f7      	addge	r7, r6, r3
 80097a8:	1b9d      	sublt	r5, r3, r6
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	1af6      	subs	r6, r6, r3
 80097ae:	4416      	add	r6, r2
 80097b0:	4b63      	ldr	r3, [pc, #396]	; (8009940 <_strtod_l+0x838>)
 80097b2:	3e01      	subs	r6, #1
 80097b4:	429e      	cmp	r6, r3
 80097b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80097ba:	f280 80af 	bge.w	800991c <_strtod_l+0x814>
 80097be:	1b9b      	subs	r3, r3, r6
 80097c0:	2b1f      	cmp	r3, #31
 80097c2:	eba2 0203 	sub.w	r2, r2, r3
 80097c6:	f04f 0101 	mov.w	r1, #1
 80097ca:	f300 809b 	bgt.w	8009904 <_strtod_l+0x7fc>
 80097ce:	fa01 f303 	lsl.w	r3, r1, r3
 80097d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80097d4:	2300      	movs	r3, #0
 80097d6:	930a      	str	r3, [sp, #40]	; 0x28
 80097d8:	18be      	adds	r6, r7, r2
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	42b7      	cmp	r7, r6
 80097de:	4415      	add	r5, r2
 80097e0:	441d      	add	r5, r3
 80097e2:	463b      	mov	r3, r7
 80097e4:	bfa8      	it	ge
 80097e6:	4633      	movge	r3, r6
 80097e8:	42ab      	cmp	r3, r5
 80097ea:	bfa8      	it	ge
 80097ec:	462b      	movge	r3, r5
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfc2      	ittt	gt
 80097f2:	1af6      	subgt	r6, r6, r3
 80097f4:	1aed      	subgt	r5, r5, r3
 80097f6:	1aff      	subgt	r7, r7, r3
 80097f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097fa:	b1bb      	cbz	r3, 800982c <_strtod_l+0x724>
 80097fc:	4641      	mov	r1, r8
 80097fe:	461a      	mov	r2, r3
 8009800:	4648      	mov	r0, r9
 8009802:	f001 fdd9 	bl	800b3b8 <__pow5mult>
 8009806:	4680      	mov	r8, r0
 8009808:	2800      	cmp	r0, #0
 800980a:	f43f ae9b 	beq.w	8009544 <_strtod_l+0x43c>
 800980e:	4601      	mov	r1, r0
 8009810:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009812:	4648      	mov	r0, r9
 8009814:	f001 fd3a 	bl	800b28c <__multiply>
 8009818:	900c      	str	r0, [sp, #48]	; 0x30
 800981a:	2800      	cmp	r0, #0
 800981c:	f43f ae92 	beq.w	8009544 <_strtod_l+0x43c>
 8009820:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009822:	4648      	mov	r0, r9
 8009824:	f001 fc4b 	bl	800b0be <_Bfree>
 8009828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800982a:	931c      	str	r3, [sp, #112]	; 0x70
 800982c:	2e00      	cmp	r6, #0
 800982e:	dc7a      	bgt.n	8009926 <_strtod_l+0x81e>
 8009830:	9b06      	ldr	r3, [sp, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	dd08      	ble.n	8009848 <_strtod_l+0x740>
 8009836:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009838:	9905      	ldr	r1, [sp, #20]
 800983a:	4648      	mov	r0, r9
 800983c:	f001 fdbc 	bl	800b3b8 <__pow5mult>
 8009840:	9005      	str	r0, [sp, #20]
 8009842:	2800      	cmp	r0, #0
 8009844:	f43f ae7e 	beq.w	8009544 <_strtod_l+0x43c>
 8009848:	2d00      	cmp	r5, #0
 800984a:	dd08      	ble.n	800985e <_strtod_l+0x756>
 800984c:	462a      	mov	r2, r5
 800984e:	9905      	ldr	r1, [sp, #20]
 8009850:	4648      	mov	r0, r9
 8009852:	f001 fdff 	bl	800b454 <__lshift>
 8009856:	9005      	str	r0, [sp, #20]
 8009858:	2800      	cmp	r0, #0
 800985a:	f43f ae73 	beq.w	8009544 <_strtod_l+0x43c>
 800985e:	2f00      	cmp	r7, #0
 8009860:	dd08      	ble.n	8009874 <_strtod_l+0x76c>
 8009862:	4641      	mov	r1, r8
 8009864:	463a      	mov	r2, r7
 8009866:	4648      	mov	r0, r9
 8009868:	f001 fdf4 	bl	800b454 <__lshift>
 800986c:	4680      	mov	r8, r0
 800986e:	2800      	cmp	r0, #0
 8009870:	f43f ae68 	beq.w	8009544 <_strtod_l+0x43c>
 8009874:	9a05      	ldr	r2, [sp, #20]
 8009876:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009878:	4648      	mov	r0, r9
 800987a:	f001 fe59 	bl	800b530 <__mdiff>
 800987e:	4604      	mov	r4, r0
 8009880:	2800      	cmp	r0, #0
 8009882:	f43f ae5f 	beq.w	8009544 <_strtod_l+0x43c>
 8009886:	68c3      	ldr	r3, [r0, #12]
 8009888:	930c      	str	r3, [sp, #48]	; 0x30
 800988a:	2300      	movs	r3, #0
 800988c:	60c3      	str	r3, [r0, #12]
 800988e:	4641      	mov	r1, r8
 8009890:	f001 fe34 	bl	800b4fc <__mcmp>
 8009894:	2800      	cmp	r0, #0
 8009896:	da55      	bge.n	8009944 <_strtod_l+0x83c>
 8009898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800989a:	b9e3      	cbnz	r3, 80098d6 <_strtod_l+0x7ce>
 800989c:	f1ba 0f00 	cmp.w	sl, #0
 80098a0:	d119      	bne.n	80098d6 <_strtod_l+0x7ce>
 80098a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098a6:	b9b3      	cbnz	r3, 80098d6 <_strtod_l+0x7ce>
 80098a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098ac:	0d1b      	lsrs	r3, r3, #20
 80098ae:	051b      	lsls	r3, r3, #20
 80098b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80098b4:	d90f      	bls.n	80098d6 <_strtod_l+0x7ce>
 80098b6:	6963      	ldr	r3, [r4, #20]
 80098b8:	b913      	cbnz	r3, 80098c0 <_strtod_l+0x7b8>
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	dd0a      	ble.n	80098d6 <_strtod_l+0x7ce>
 80098c0:	4621      	mov	r1, r4
 80098c2:	2201      	movs	r2, #1
 80098c4:	4648      	mov	r0, r9
 80098c6:	f001 fdc5 	bl	800b454 <__lshift>
 80098ca:	4641      	mov	r1, r8
 80098cc:	4604      	mov	r4, r0
 80098ce:	f001 fe15 	bl	800b4fc <__mcmp>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	dc67      	bgt.n	80099a6 <_strtod_l+0x89e>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d171      	bne.n	80099c0 <_strtod_l+0x8b8>
 80098dc:	e63d      	b.n	800955a <_strtod_l+0x452>
 80098de:	f018 0f01 	tst.w	r8, #1
 80098e2:	d004      	beq.n	80098ee <_strtod_l+0x7e6>
 80098e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098e8:	f7f6 fe86 	bl	80005f8 <__aeabi_dmul>
 80098ec:	2301      	movs	r3, #1
 80098ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098f2:	3508      	adds	r5, #8
 80098f4:	e6e5      	b.n	80096c2 <_strtod_l+0x5ba>
 80098f6:	f04f 32ff 	mov.w	r2, #4294967295
 80098fa:	fa02 f303 	lsl.w	r3, r2, r3
 80098fe:	ea03 0a0a 	and.w	sl, r3, sl
 8009902:	e6ff      	b.n	8009704 <_strtod_l+0x5fc>
 8009904:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009908:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800990c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009910:	36e2      	adds	r6, #226	; 0xe2
 8009912:	fa01 f306 	lsl.w	r3, r1, r6
 8009916:	930a      	str	r3, [sp, #40]	; 0x28
 8009918:	910f      	str	r1, [sp, #60]	; 0x3c
 800991a:	e75d      	b.n	80097d8 <_strtod_l+0x6d0>
 800991c:	2300      	movs	r3, #0
 800991e:	930a      	str	r3, [sp, #40]	; 0x28
 8009920:	2301      	movs	r3, #1
 8009922:	930f      	str	r3, [sp, #60]	; 0x3c
 8009924:	e758      	b.n	80097d8 <_strtod_l+0x6d0>
 8009926:	4632      	mov	r2, r6
 8009928:	991c      	ldr	r1, [sp, #112]	; 0x70
 800992a:	4648      	mov	r0, r9
 800992c:	f001 fd92 	bl	800b454 <__lshift>
 8009930:	901c      	str	r0, [sp, #112]	; 0x70
 8009932:	2800      	cmp	r0, #0
 8009934:	f47f af7c 	bne.w	8009830 <_strtod_l+0x728>
 8009938:	e604      	b.n	8009544 <_strtod_l+0x43c>
 800993a:	bf00      	nop
 800993c:	0800d2d8 	.word	0x0800d2d8
 8009940:	fffffc02 	.word	0xfffffc02
 8009944:	465d      	mov	r5, fp
 8009946:	f040 8086 	bne.w	8009a56 <_strtod_l+0x94e>
 800994a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800994c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009950:	b32a      	cbz	r2, 800999e <_strtod_l+0x896>
 8009952:	4aaf      	ldr	r2, [pc, #700]	; (8009c10 <_strtod_l+0xb08>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d153      	bne.n	8009a00 <_strtod_l+0x8f8>
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	4650      	mov	r0, sl
 800995c:	b1d3      	cbz	r3, 8009994 <_strtod_l+0x88c>
 800995e:	4aad      	ldr	r2, [pc, #692]	; (8009c14 <_strtod_l+0xb0c>)
 8009960:	402a      	ands	r2, r5
 8009962:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009966:	f04f 31ff 	mov.w	r1, #4294967295
 800996a:	d816      	bhi.n	800999a <_strtod_l+0x892>
 800996c:	0d12      	lsrs	r2, r2, #20
 800996e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009972:	fa01 f303 	lsl.w	r3, r1, r3
 8009976:	4298      	cmp	r0, r3
 8009978:	d142      	bne.n	8009a00 <_strtod_l+0x8f8>
 800997a:	4ba7      	ldr	r3, [pc, #668]	; (8009c18 <_strtod_l+0xb10>)
 800997c:	429d      	cmp	r5, r3
 800997e:	d102      	bne.n	8009986 <_strtod_l+0x87e>
 8009980:	3001      	adds	r0, #1
 8009982:	f43f addf 	beq.w	8009544 <_strtod_l+0x43c>
 8009986:	4ba3      	ldr	r3, [pc, #652]	; (8009c14 <_strtod_l+0xb0c>)
 8009988:	402b      	ands	r3, r5
 800998a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800998e:	f04f 0a00 	mov.w	sl, #0
 8009992:	e7a0      	b.n	80098d6 <_strtod_l+0x7ce>
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	e7ed      	b.n	8009976 <_strtod_l+0x86e>
 800999a:	460b      	mov	r3, r1
 800999c:	e7eb      	b.n	8009976 <_strtod_l+0x86e>
 800999e:	bb7b      	cbnz	r3, 8009a00 <_strtod_l+0x8f8>
 80099a0:	f1ba 0f00 	cmp.w	sl, #0
 80099a4:	d12c      	bne.n	8009a00 <_strtod_l+0x8f8>
 80099a6:	9904      	ldr	r1, [sp, #16]
 80099a8:	4a9a      	ldr	r2, [pc, #616]	; (8009c14 <_strtod_l+0xb0c>)
 80099aa:	465b      	mov	r3, fp
 80099ac:	b1f1      	cbz	r1, 80099ec <_strtod_l+0x8e4>
 80099ae:	ea02 010b 	and.w	r1, r2, fp
 80099b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099b6:	dc19      	bgt.n	80099ec <_strtod_l+0x8e4>
 80099b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099bc:	f77f ae5b 	ble.w	8009676 <_strtod_l+0x56e>
 80099c0:	4a96      	ldr	r2, [pc, #600]	; (8009c1c <_strtod_l+0xb14>)
 80099c2:	2300      	movs	r3, #0
 80099c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80099c8:	4650      	mov	r0, sl
 80099ca:	4659      	mov	r1, fp
 80099cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80099d0:	f7f6 fe12 	bl	80005f8 <__aeabi_dmul>
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	2900      	cmp	r1, #0
 80099da:	f47f adbe 	bne.w	800955a <_strtod_l+0x452>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f47f adbb 	bne.w	800955a <_strtod_l+0x452>
 80099e4:	2322      	movs	r3, #34	; 0x22
 80099e6:	f8c9 3000 	str.w	r3, [r9]
 80099ea:	e5b6      	b.n	800955a <_strtod_l+0x452>
 80099ec:	4013      	ands	r3, r2
 80099ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80099f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80099f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80099fa:	f04f 3aff 	mov.w	sl, #4294967295
 80099fe:	e76a      	b.n	80098d6 <_strtod_l+0x7ce>
 8009a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a02:	b193      	cbz	r3, 8009a2a <_strtod_l+0x922>
 8009a04:	422b      	tst	r3, r5
 8009a06:	f43f af66 	beq.w	80098d6 <_strtod_l+0x7ce>
 8009a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a0c:	9a04      	ldr	r2, [sp, #16]
 8009a0e:	4650      	mov	r0, sl
 8009a10:	4659      	mov	r1, fp
 8009a12:	b173      	cbz	r3, 8009a32 <_strtod_l+0x92a>
 8009a14:	f7ff fb5c 	bl	80090d0 <sulp>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a20:	f7f6 fc34 	bl	800028c <__adddf3>
 8009a24:	4682      	mov	sl, r0
 8009a26:	468b      	mov	fp, r1
 8009a28:	e755      	b.n	80098d6 <_strtod_l+0x7ce>
 8009a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a2c:	ea13 0f0a 	tst.w	r3, sl
 8009a30:	e7e9      	b.n	8009a06 <_strtod_l+0x8fe>
 8009a32:	f7ff fb4d 	bl	80090d0 <sulp>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a3e:	f7f6 fc23 	bl	8000288 <__aeabi_dsub>
 8009a42:	2200      	movs	r2, #0
 8009a44:	2300      	movs	r3, #0
 8009a46:	4682      	mov	sl, r0
 8009a48:	468b      	mov	fp, r1
 8009a4a:	f7f7 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f47f ae11 	bne.w	8009676 <_strtod_l+0x56e>
 8009a54:	e73f      	b.n	80098d6 <_strtod_l+0x7ce>
 8009a56:	4641      	mov	r1, r8
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f001 fe8c 	bl	800b776 <__ratio>
 8009a5e:	ec57 6b10 	vmov	r6, r7, d0
 8009a62:	2200      	movs	r2, #0
 8009a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a68:	ee10 0a10 	vmov	r0, s0
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f7 f83f 	bl	8000af0 <__aeabi_dcmple>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d077      	beq.n	8009b66 <_strtod_l+0xa5e>
 8009a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d04a      	beq.n	8009b12 <_strtod_l+0xa0a>
 8009a7c:	4b68      	ldr	r3, [pc, #416]	; (8009c20 <_strtod_l+0xb18>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009a84:	4f66      	ldr	r7, [pc, #408]	; (8009c20 <_strtod_l+0xb18>)
 8009a86:	2600      	movs	r6, #0
 8009a88:	4b62      	ldr	r3, [pc, #392]	; (8009c14 <_strtod_l+0xb0c>)
 8009a8a:	402b      	ands	r3, r5
 8009a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a90:	4b64      	ldr	r3, [pc, #400]	; (8009c24 <_strtod_l+0xb1c>)
 8009a92:	429a      	cmp	r2, r3
 8009a94:	f040 80ce 	bne.w	8009c34 <_strtod_l+0xb2c>
 8009a98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009aa0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009aa4:	ec4b ab10 	vmov	d0, sl, fp
 8009aa8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009aac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ab0:	f001 fd9c 	bl	800b5ec <__ulp>
 8009ab4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ab8:	ec53 2b10 	vmov	r2, r3, d0
 8009abc:	f7f6 fd9c 	bl	80005f8 <__aeabi_dmul>
 8009ac0:	4652      	mov	r2, sl
 8009ac2:	465b      	mov	r3, fp
 8009ac4:	f7f6 fbe2 	bl	800028c <__adddf3>
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4952      	ldr	r1, [pc, #328]	; (8009c14 <_strtod_l+0xb0c>)
 8009acc:	4a56      	ldr	r2, [pc, #344]	; (8009c28 <_strtod_l+0xb20>)
 8009ace:	4019      	ands	r1, r3
 8009ad0:	4291      	cmp	r1, r2
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	d95b      	bls.n	8009b8e <_strtod_l+0xa86>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d103      	bne.n	8009ae8 <_strtod_l+0x9e0>
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	f43f ad2e 	beq.w	8009544 <_strtod_l+0x43c>
 8009ae8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009c18 <_strtod_l+0xb10>
 8009aec:	f04f 3aff 	mov.w	sl, #4294967295
 8009af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009af2:	4648      	mov	r0, r9
 8009af4:	f001 fae3 	bl	800b0be <_Bfree>
 8009af8:	9905      	ldr	r1, [sp, #20]
 8009afa:	4648      	mov	r0, r9
 8009afc:	f001 fadf 	bl	800b0be <_Bfree>
 8009b00:	4641      	mov	r1, r8
 8009b02:	4648      	mov	r0, r9
 8009b04:	f001 fadb 	bl	800b0be <_Bfree>
 8009b08:	4621      	mov	r1, r4
 8009b0a:	4648      	mov	r0, r9
 8009b0c:	f001 fad7 	bl	800b0be <_Bfree>
 8009b10:	e619      	b.n	8009746 <_strtod_l+0x63e>
 8009b12:	f1ba 0f00 	cmp.w	sl, #0
 8009b16:	d11a      	bne.n	8009b4e <_strtod_l+0xa46>
 8009b18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b1c:	b9eb      	cbnz	r3, 8009b5a <_strtod_l+0xa52>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	4b3f      	ldr	r3, [pc, #252]	; (8009c20 <_strtod_l+0xb18>)
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 ffd9 	bl	8000adc <__aeabi_dcmplt>
 8009b2a:	b9c8      	cbnz	r0, 8009b60 <_strtod_l+0xa58>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	4639      	mov	r1, r7
 8009b30:	2200      	movs	r2, #0
 8009b32:	4b3e      	ldr	r3, [pc, #248]	; (8009c2c <_strtod_l+0xb24>)
 8009b34:	f7f6 fd60 	bl	80005f8 <__aeabi_dmul>
 8009b38:	4606      	mov	r6, r0
 8009b3a:	460f      	mov	r7, r1
 8009b3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009b40:	9618      	str	r6, [sp, #96]	; 0x60
 8009b42:	9319      	str	r3, [sp, #100]	; 0x64
 8009b44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009b48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b4c:	e79c      	b.n	8009a88 <_strtod_l+0x980>
 8009b4e:	f1ba 0f01 	cmp.w	sl, #1
 8009b52:	d102      	bne.n	8009b5a <_strtod_l+0xa52>
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	f43f ad8e 	beq.w	8009676 <_strtod_l+0x56e>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4b34      	ldr	r3, [pc, #208]	; (8009c30 <_strtod_l+0xb28>)
 8009b5e:	e78f      	b.n	8009a80 <_strtod_l+0x978>
 8009b60:	2600      	movs	r6, #0
 8009b62:	4f32      	ldr	r7, [pc, #200]	; (8009c2c <_strtod_l+0xb24>)
 8009b64:	e7ea      	b.n	8009b3c <_strtod_l+0xa34>
 8009b66:	4b31      	ldr	r3, [pc, #196]	; (8009c2c <_strtod_l+0xb24>)
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f7f6 fd43 	bl	80005f8 <__aeabi_dmul>
 8009b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b74:	4606      	mov	r6, r0
 8009b76:	460f      	mov	r7, r1
 8009b78:	b933      	cbnz	r3, 8009b88 <_strtod_l+0xa80>
 8009b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b7e:	9010      	str	r0, [sp, #64]	; 0x40
 8009b80:	9311      	str	r3, [sp, #68]	; 0x44
 8009b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b86:	e7df      	b.n	8009b48 <_strtod_l+0xa40>
 8009b88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009b8c:	e7f9      	b.n	8009b82 <_strtod_l+0xa7a>
 8009b8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009b92:	9b04      	ldr	r3, [sp, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1ab      	bne.n	8009af0 <_strtod_l+0x9e8>
 8009b98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b9c:	0d1b      	lsrs	r3, r3, #20
 8009b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ba0:	051b      	lsls	r3, r3, #20
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	465d      	mov	r5, fp
 8009ba6:	d1a3      	bne.n	8009af0 <_strtod_l+0x9e8>
 8009ba8:	4639      	mov	r1, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7f6 ffd4 	bl	8000b58 <__aeabi_d2iz>
 8009bb0:	f7f6 fcb8 	bl	8000524 <__aeabi_i2d>
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7f6 fb64 	bl	8000288 <__aeabi_dsub>
 8009bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	b933      	cbnz	r3, 8009bd6 <_strtod_l+0xace>
 8009bc8:	f1ba 0f00 	cmp.w	sl, #0
 8009bcc:	d103      	bne.n	8009bd6 <_strtod_l+0xace>
 8009bce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	d06d      	beq.n	8009cb2 <_strtod_l+0xbaa>
 8009bd6:	a30a      	add	r3, pc, #40	; (adr r3, 8009c00 <_strtod_l+0xaf8>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 ff7c 	bl	8000adc <__aeabi_dcmplt>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f47f acb8 	bne.w	800955a <_strtod_l+0x452>
 8009bea:	a307      	add	r3, pc, #28	; (adr r3, 8009c08 <_strtod_l+0xb00>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	f7f6 ff90 	bl	8000b18 <__aeabi_dcmpgt>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	f43f af79 	beq.w	8009af0 <_strtod_l+0x9e8>
 8009bfe:	e4ac      	b.n	800955a <_strtod_l+0x452>
 8009c00:	94a03595 	.word	0x94a03595
 8009c04:	3fdfffff 	.word	0x3fdfffff
 8009c08:	35afe535 	.word	0x35afe535
 8009c0c:	3fe00000 	.word	0x3fe00000
 8009c10:	000fffff 	.word	0x000fffff
 8009c14:	7ff00000 	.word	0x7ff00000
 8009c18:	7fefffff 	.word	0x7fefffff
 8009c1c:	39500000 	.word	0x39500000
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	7fe00000 	.word	0x7fe00000
 8009c28:	7c9fffff 	.word	0x7c9fffff
 8009c2c:	3fe00000 	.word	0x3fe00000
 8009c30:	bff00000 	.word	0xbff00000
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	b333      	cbz	r3, 8009c86 <_strtod_l+0xb7e>
 8009c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c3e:	d822      	bhi.n	8009c86 <_strtod_l+0xb7e>
 8009c40:	a327      	add	r3, pc, #156	; (adr r3, 8009ce0 <_strtod_l+0xbd8>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	4630      	mov	r0, r6
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 ff51 	bl	8000af0 <__aeabi_dcmple>
 8009c4e:	b1a0      	cbz	r0, 8009c7a <_strtod_l+0xb72>
 8009c50:	4639      	mov	r1, r7
 8009c52:	4630      	mov	r0, r6
 8009c54:	f7f6 ffa8 	bl	8000ba8 <__aeabi_d2uiz>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	bf08      	it	eq
 8009c5c:	2001      	moveq	r0, #1
 8009c5e:	f7f6 fc51 	bl	8000504 <__aeabi_ui2d>
 8009c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	bb03      	cbnz	r3, 8009cac <_strtod_l+0xba4>
 8009c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c6e:	9012      	str	r0, [sp, #72]	; 0x48
 8009c70:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009c76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009c8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009c8e:	f001 fcad 	bl	800b5ec <__ulp>
 8009c92:	4650      	mov	r0, sl
 8009c94:	ec53 2b10 	vmov	r2, r3, d0
 8009c98:	4659      	mov	r1, fp
 8009c9a:	f7f6 fcad 	bl	80005f8 <__aeabi_dmul>
 8009c9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ca2:	f7f6 faf3 	bl	800028c <__adddf3>
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	468b      	mov	fp, r1
 8009caa:	e772      	b.n	8009b92 <_strtod_l+0xa8a>
 8009cac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009cb0:	e7df      	b.n	8009c72 <_strtod_l+0xb6a>
 8009cb2:	a30d      	add	r3, pc, #52	; (adr r3, 8009ce8 <_strtod_l+0xbe0>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 ff10 	bl	8000adc <__aeabi_dcmplt>
 8009cbc:	e79c      	b.n	8009bf8 <_strtod_l+0xaf0>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	f7ff ba61 	b.w	800918e <_strtod_l+0x86>
 8009ccc:	2b65      	cmp	r3, #101	; 0x65
 8009cce:	f04f 0200 	mov.w	r2, #0
 8009cd2:	f43f ab4e 	beq.w	8009372 <_strtod_l+0x26a>
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	4614      	mov	r4, r2
 8009cda:	9104      	str	r1, [sp, #16]
 8009cdc:	f7ff bacb 	b.w	8009276 <_strtod_l+0x16e>
 8009ce0:	ffc00000 	.word	0xffc00000
 8009ce4:	41dfffff 	.word	0x41dfffff
 8009ce8:	94a03595 	.word	0x94a03595
 8009cec:	3fcfffff 	.word	0x3fcfffff

08009cf0 <strtod>:
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <strtod+0x20>)
 8009cf2:	4a08      	ldr	r2, [pc, #32]	; (8009d14 <strtod+0x24>)
 8009cf4:	b410      	push	{r4}
 8009cf6:	681c      	ldr	r4, [r3, #0]
 8009cf8:	6a23      	ldr	r3, [r4, #32]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bf08      	it	eq
 8009cfe:	4613      	moveq	r3, r2
 8009d00:	460a      	mov	r2, r1
 8009d02:	4601      	mov	r1, r0
 8009d04:	4620      	mov	r0, r4
 8009d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0a:	f7ff b9fd 	b.w	8009108 <_strtod_l>
 8009d0e:	bf00      	nop
 8009d10:	20000024 	.word	0x20000024
 8009d14:	20000088 	.word	0x20000088

08009d18 <quorem>:
 8009d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	6903      	ldr	r3, [r0, #16]
 8009d1e:	690c      	ldr	r4, [r1, #16]
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	4680      	mov	r8, r0
 8009d24:	f2c0 8082 	blt.w	8009e2c <quorem+0x114>
 8009d28:	3c01      	subs	r4, #1
 8009d2a:	f101 0714 	add.w	r7, r1, #20
 8009d2e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009d32:	f100 0614 	add.w	r6, r0, #20
 8009d36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d3e:	eb06 030c 	add.w	r3, r6, ip
 8009d42:	3501      	adds	r5, #1
 8009d44:	eb07 090c 	add.w	r9, r7, ip
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d4e:	b395      	cbz	r5, 8009db6 <quorem+0x9e>
 8009d50:	f04f 0a00 	mov.w	sl, #0
 8009d54:	4638      	mov	r0, r7
 8009d56:	46b6      	mov	lr, r6
 8009d58:	46d3      	mov	fp, sl
 8009d5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d5e:	b293      	uxth	r3, r2
 8009d60:	fb05 a303 	mla	r3, r5, r3, sl
 8009d64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	ebab 0303 	sub.w	r3, fp, r3
 8009d6e:	0c12      	lsrs	r2, r2, #16
 8009d70:	f8de b000 	ldr.w	fp, [lr]
 8009d74:	fb05 a202 	mla	r2, r5, r2, sl
 8009d78:	fa13 f38b 	uxtah	r3, r3, fp
 8009d7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d80:	fa1f fb82 	uxth.w	fp, r2
 8009d84:	f8de 2000 	ldr.w	r2, [lr]
 8009d88:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d96:	4581      	cmp	r9, r0
 8009d98:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d9c:	f84e 3b04 	str.w	r3, [lr], #4
 8009da0:	d2db      	bcs.n	8009d5a <quorem+0x42>
 8009da2:	f856 300c 	ldr.w	r3, [r6, ip]
 8009da6:	b933      	cbnz	r3, 8009db6 <quorem+0x9e>
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	3b04      	subs	r3, #4
 8009dac:	429e      	cmp	r6, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	d330      	bcc.n	8009e14 <quorem+0xfc>
 8009db2:	f8c8 4010 	str.w	r4, [r8, #16]
 8009db6:	4640      	mov	r0, r8
 8009db8:	f001 fba0 	bl	800b4fc <__mcmp>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	db25      	blt.n	8009e0c <quorem+0xf4>
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f04f 0c00 	mov.w	ip, #0
 8009dc8:	f857 2b04 	ldr.w	r2, [r7], #4
 8009dcc:	f8d0 e000 	ldr.w	lr, [r0]
 8009dd0:	b293      	uxth	r3, r2
 8009dd2:	ebac 0303 	sub.w	r3, ip, r3
 8009dd6:	0c12      	lsrs	r2, r2, #16
 8009dd8:	fa13 f38e 	uxtah	r3, r3, lr
 8009ddc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dea:	45b9      	cmp	r9, r7
 8009dec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009df0:	f840 3b04 	str.w	r3, [r0], #4
 8009df4:	d2e8      	bcs.n	8009dc8 <quorem+0xb0>
 8009df6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009dfa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009dfe:	b92a      	cbnz	r2, 8009e0c <quorem+0xf4>
 8009e00:	3b04      	subs	r3, #4
 8009e02:	429e      	cmp	r6, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	d30b      	bcc.n	8009e20 <quorem+0x108>
 8009e08:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	b003      	add	sp, #12
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	6812      	ldr	r2, [r2, #0]
 8009e16:	3b04      	subs	r3, #4
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	d1ca      	bne.n	8009db2 <quorem+0x9a>
 8009e1c:	3c01      	subs	r4, #1
 8009e1e:	e7c5      	b.n	8009dac <quorem+0x94>
 8009e20:	6812      	ldr	r2, [r2, #0]
 8009e22:	3b04      	subs	r3, #4
 8009e24:	2a00      	cmp	r2, #0
 8009e26:	d1ef      	bne.n	8009e08 <quorem+0xf0>
 8009e28:	3c01      	subs	r4, #1
 8009e2a:	e7ea      	b.n	8009e02 <quorem+0xea>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7ee      	b.n	8009e0e <quorem+0xf6>

08009e30 <_dtoa_r>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	ec57 6b10 	vmov	r6, r7, d0
 8009e38:	b097      	sub	sp, #92	; 0x5c
 8009e3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e3c:	9106      	str	r1, [sp, #24]
 8009e3e:	4604      	mov	r4, r0
 8009e40:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e42:	9312      	str	r3, [sp, #72]	; 0x48
 8009e44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e48:	e9cd 6700 	strd	r6, r7, [sp]
 8009e4c:	b93d      	cbnz	r5, 8009e5e <_dtoa_r+0x2e>
 8009e4e:	2010      	movs	r0, #16
 8009e50:	f001 f8dc 	bl	800b00c <malloc>
 8009e54:	6260      	str	r0, [r4, #36]	; 0x24
 8009e56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e5a:	6005      	str	r5, [r0, #0]
 8009e5c:	60c5      	str	r5, [r0, #12]
 8009e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e60:	6819      	ldr	r1, [r3, #0]
 8009e62:	b151      	cbz	r1, 8009e7a <_dtoa_r+0x4a>
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	604a      	str	r2, [r1, #4]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	4093      	lsls	r3, r2
 8009e6c:	608b      	str	r3, [r1, #8]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f001 f925 	bl	800b0be <_Bfree>
 8009e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	1e3b      	subs	r3, r7, #0
 8009e7c:	bfbb      	ittet	lt
 8009e7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e82:	9301      	strlt	r3, [sp, #4]
 8009e84:	2300      	movge	r3, #0
 8009e86:	2201      	movlt	r2, #1
 8009e88:	bfac      	ite	ge
 8009e8a:	f8c8 3000 	strge.w	r3, [r8]
 8009e8e:	f8c8 2000 	strlt.w	r2, [r8]
 8009e92:	4baf      	ldr	r3, [pc, #700]	; (800a150 <_dtoa_r+0x320>)
 8009e94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e98:	ea33 0308 	bics.w	r3, r3, r8
 8009e9c:	d114      	bne.n	8009ec8 <_dtoa_r+0x98>
 8009e9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ea0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	9b00      	ldr	r3, [sp, #0]
 8009ea8:	b923      	cbnz	r3, 8009eb4 <_dtoa_r+0x84>
 8009eaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f000 8542 	beq.w	800a938 <_dtoa_r+0xb08>
 8009eb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a164 <_dtoa_r+0x334>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 8544 	beq.w	800a948 <_dtoa_r+0xb18>
 8009ec0:	f10b 0303 	add.w	r3, fp, #3
 8009ec4:	f000 bd3e 	b.w	800a944 <_dtoa_r+0xb14>
 8009ec8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	f7f6 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed8:	4681      	mov	r9, r0
 8009eda:	b168      	cbz	r0, 8009ef8 <_dtoa_r+0xc8>
 8009edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ede:	2301      	movs	r3, #1
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 8524 	beq.w	800a932 <_dtoa_r+0xb02>
 8009eea:	4b9a      	ldr	r3, [pc, #616]	; (800a154 <_dtoa_r+0x324>)
 8009eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009eee:	f103 3bff 	add.w	fp, r3, #4294967295
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	f000 bd28 	b.w	800a948 <_dtoa_r+0xb18>
 8009ef8:	aa14      	add	r2, sp, #80	; 0x50
 8009efa:	a915      	add	r1, sp, #84	; 0x54
 8009efc:	ec47 6b10 	vmov	d0, r6, r7
 8009f00:	4620      	mov	r0, r4
 8009f02:	f001 fbe9 	bl	800b6d8 <__d2b>
 8009f06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f0a:	9004      	str	r0, [sp, #16]
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	d07c      	beq.n	800a00a <_dtoa_r+0x1da>
 8009f10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009f18:	46b2      	mov	sl, r6
 8009f1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009f26:	2200      	movs	r2, #0
 8009f28:	4b8b      	ldr	r3, [pc, #556]	; (800a158 <_dtoa_r+0x328>)
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	4659      	mov	r1, fp
 8009f2e:	f7f6 f9ab 	bl	8000288 <__aeabi_dsub>
 8009f32:	a381      	add	r3, pc, #516	; (adr r3, 800a138 <_dtoa_r+0x308>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	a380      	add	r3, pc, #512	; (adr r3, 800a140 <_dtoa_r+0x310>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f9a3 	bl	800028c <__adddf3>
 8009f46:	4606      	mov	r6, r0
 8009f48:	4628      	mov	r0, r5
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	f7f6 faea 	bl	8000524 <__aeabi_i2d>
 8009f50:	a37d      	add	r3, pc, #500	; (adr r3, 800a148 <_dtoa_r+0x318>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4630      	mov	r0, r6
 8009f60:	4639      	mov	r1, r7
 8009f62:	f7f6 f993 	bl	800028c <__adddf3>
 8009f66:	4606      	mov	r6, r0
 8009f68:	460f      	mov	r7, r1
 8009f6a:	f7f6 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	4682      	mov	sl, r0
 8009f72:	2300      	movs	r3, #0
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	f7f6 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8009f7c:	b148      	cbz	r0, 8009f92 <_dtoa_r+0x162>
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7f6 fad0 	bl	8000524 <__aeabi_i2d>
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	f7f6 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f8c:	b908      	cbnz	r0, 8009f92 <_dtoa_r+0x162>
 8009f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f92:	f1ba 0f16 	cmp.w	sl, #22
 8009f96:	d859      	bhi.n	800a04c <_dtoa_r+0x21c>
 8009f98:	4970      	ldr	r1, [pc, #448]	; (800a15c <_dtoa_r+0x32c>)
 8009f9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa6:	f7f6 fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d050      	beq.n	800a050 <_dtoa_r+0x220>
 8009fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb8:	1b5d      	subs	r5, r3, r5
 8009fba:	f1b5 0801 	subs.w	r8, r5, #1
 8009fbe:	bf49      	itett	mi
 8009fc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8009fc4:	2300      	movpl	r3, #0
 8009fc6:	9305      	strmi	r3, [sp, #20]
 8009fc8:	f04f 0800 	movmi.w	r8, #0
 8009fcc:	bf58      	it	pl
 8009fce:	9305      	strpl	r3, [sp, #20]
 8009fd0:	f1ba 0f00 	cmp.w	sl, #0
 8009fd4:	db3e      	blt.n	800a054 <_dtoa_r+0x224>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	44d0      	add	r8, sl
 8009fda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009fde:	9307      	str	r3, [sp, #28]
 8009fe0:	9b06      	ldr	r3, [sp, #24]
 8009fe2:	2b09      	cmp	r3, #9
 8009fe4:	f200 8090 	bhi.w	800a108 <_dtoa_r+0x2d8>
 8009fe8:	2b05      	cmp	r3, #5
 8009fea:	bfc4      	itt	gt
 8009fec:	3b04      	subgt	r3, #4
 8009fee:	9306      	strgt	r3, [sp, #24]
 8009ff0:	9b06      	ldr	r3, [sp, #24]
 8009ff2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ff6:	bfcc      	ite	gt
 8009ff8:	2500      	movgt	r5, #0
 8009ffa:	2501      	movle	r5, #1
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	f200 808f 	bhi.w	800a120 <_dtoa_r+0x2f0>
 800a002:	e8df f003 	tbb	[pc, r3]
 800a006:	7f7d      	.short	0x7f7d
 800a008:	7131      	.short	0x7131
 800a00a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a00e:	441d      	add	r5, r3
 800a010:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a014:	2820      	cmp	r0, #32
 800a016:	dd13      	ble.n	800a040 <_dtoa_r+0x210>
 800a018:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a01c:	9b00      	ldr	r3, [sp, #0]
 800a01e:	fa08 f800 	lsl.w	r8, r8, r0
 800a022:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a026:	fa23 f000 	lsr.w	r0, r3, r0
 800a02a:	ea48 0000 	orr.w	r0, r8, r0
 800a02e:	f7f6 fa69 	bl	8000504 <__aeabi_ui2d>
 800a032:	2301      	movs	r3, #1
 800a034:	4682      	mov	sl, r0
 800a036:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a03a:	3d01      	subs	r5, #1
 800a03c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a03e:	e772      	b.n	8009f26 <_dtoa_r+0xf6>
 800a040:	9b00      	ldr	r3, [sp, #0]
 800a042:	f1c0 0020 	rsb	r0, r0, #32
 800a046:	fa03 f000 	lsl.w	r0, r3, r0
 800a04a:	e7f0      	b.n	800a02e <_dtoa_r+0x1fe>
 800a04c:	2301      	movs	r3, #1
 800a04e:	e7b1      	b.n	8009fb4 <_dtoa_r+0x184>
 800a050:	900f      	str	r0, [sp, #60]	; 0x3c
 800a052:	e7b0      	b.n	8009fb6 <_dtoa_r+0x186>
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	eba3 030a 	sub.w	r3, r3, sl
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	f1ca 0300 	rsb	r3, sl, #0
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	2300      	movs	r3, #0
 800a064:	930e      	str	r3, [sp, #56]	; 0x38
 800a066:	e7bb      	b.n	8009fe0 <_dtoa_r+0x1b0>
 800a068:	2301      	movs	r3, #1
 800a06a:	930a      	str	r3, [sp, #40]	; 0x28
 800a06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dd59      	ble.n	800a126 <_dtoa_r+0x2f6>
 800a072:	9302      	str	r3, [sp, #8]
 800a074:	4699      	mov	r9, r3
 800a076:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a078:	2200      	movs	r2, #0
 800a07a:	6072      	str	r2, [r6, #4]
 800a07c:	2204      	movs	r2, #4
 800a07e:	f102 0014 	add.w	r0, r2, #20
 800a082:	4298      	cmp	r0, r3
 800a084:	6871      	ldr	r1, [r6, #4]
 800a086:	d953      	bls.n	800a130 <_dtoa_r+0x300>
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 ffe4 	bl	800b056 <_Balloc>
 800a08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a090:	6030      	str	r0, [r6, #0]
 800a092:	f1b9 0f0e 	cmp.w	r9, #14
 800a096:	f8d3 b000 	ldr.w	fp, [r3]
 800a09a:	f200 80e6 	bhi.w	800a26a <_dtoa_r+0x43a>
 800a09e:	2d00      	cmp	r5, #0
 800a0a0:	f000 80e3 	beq.w	800a26a <_dtoa_r+0x43a>
 800a0a4:	ed9d 7b00 	vldr	d7, [sp]
 800a0a8:	f1ba 0f00 	cmp.w	sl, #0
 800a0ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a0b0:	dd74      	ble.n	800a19c <_dtoa_r+0x36c>
 800a0b2:	4a2a      	ldr	r2, [pc, #168]	; (800a15c <_dtoa_r+0x32c>)
 800a0b4:	f00a 030f 	and.w	r3, sl, #15
 800a0b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0bc:	ed93 7b00 	vldr	d7, [r3]
 800a0c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a0c4:	06f0      	lsls	r0, r6, #27
 800a0c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a0ca:	d565      	bpl.n	800a198 <_dtoa_r+0x368>
 800a0cc:	4b24      	ldr	r3, [pc, #144]	; (800a160 <_dtoa_r+0x330>)
 800a0ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0d6:	f7f6 fbb9 	bl	800084c <__aeabi_ddiv>
 800a0da:	e9cd 0100 	strd	r0, r1, [sp]
 800a0de:	f006 060f 	and.w	r6, r6, #15
 800a0e2:	2503      	movs	r5, #3
 800a0e4:	4f1e      	ldr	r7, [pc, #120]	; (800a160 <_dtoa_r+0x330>)
 800a0e6:	e04c      	b.n	800a182 <_dtoa_r+0x352>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ee:	4453      	add	r3, sl
 800a0f0:	f103 0901 	add.w	r9, r3, #1
 800a0f4:	9302      	str	r3, [sp, #8]
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	bfb8      	it	lt
 800a0fc:	2301      	movlt	r3, #1
 800a0fe:	e7ba      	b.n	800a076 <_dtoa_r+0x246>
 800a100:	2300      	movs	r3, #0
 800a102:	e7b2      	b.n	800a06a <_dtoa_r+0x23a>
 800a104:	2300      	movs	r3, #0
 800a106:	e7f0      	b.n	800a0ea <_dtoa_r+0x2ba>
 800a108:	2501      	movs	r5, #1
 800a10a:	2300      	movs	r3, #0
 800a10c:	9306      	str	r3, [sp, #24]
 800a10e:	950a      	str	r5, [sp, #40]	; 0x28
 800a110:	f04f 33ff 	mov.w	r3, #4294967295
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	4699      	mov	r9, r3
 800a118:	2200      	movs	r2, #0
 800a11a:	2312      	movs	r3, #18
 800a11c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a11e:	e7aa      	b.n	800a076 <_dtoa_r+0x246>
 800a120:	2301      	movs	r3, #1
 800a122:	930a      	str	r3, [sp, #40]	; 0x28
 800a124:	e7f4      	b.n	800a110 <_dtoa_r+0x2e0>
 800a126:	2301      	movs	r3, #1
 800a128:	9302      	str	r3, [sp, #8]
 800a12a:	4699      	mov	r9, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	e7f5      	b.n	800a11c <_dtoa_r+0x2ec>
 800a130:	3101      	adds	r1, #1
 800a132:	6071      	str	r1, [r6, #4]
 800a134:	0052      	lsls	r2, r2, #1
 800a136:	e7a2      	b.n	800a07e <_dtoa_r+0x24e>
 800a138:	636f4361 	.word	0x636f4361
 800a13c:	3fd287a7 	.word	0x3fd287a7
 800a140:	8b60c8b3 	.word	0x8b60c8b3
 800a144:	3fc68a28 	.word	0x3fc68a28
 800a148:	509f79fb 	.word	0x509f79fb
 800a14c:	3fd34413 	.word	0x3fd34413
 800a150:	7ff00000 	.word	0x7ff00000
 800a154:	0800d289 	.word	0x0800d289
 800a158:	3ff80000 	.word	0x3ff80000
 800a15c:	0800d340 	.word	0x0800d340
 800a160:	0800d318 	.word	0x0800d318
 800a164:	0800d309 	.word	0x0800d309
 800a168:	07f1      	lsls	r1, r6, #31
 800a16a:	d508      	bpl.n	800a17e <_dtoa_r+0x34e>
 800a16c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a17c:	3501      	adds	r5, #1
 800a17e:	1076      	asrs	r6, r6, #1
 800a180:	3708      	adds	r7, #8
 800a182:	2e00      	cmp	r6, #0
 800a184:	d1f0      	bne.n	800a168 <_dtoa_r+0x338>
 800a186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a18a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a18e:	f7f6 fb5d 	bl	800084c <__aeabi_ddiv>
 800a192:	e9cd 0100 	strd	r0, r1, [sp]
 800a196:	e01a      	b.n	800a1ce <_dtoa_r+0x39e>
 800a198:	2502      	movs	r5, #2
 800a19a:	e7a3      	b.n	800a0e4 <_dtoa_r+0x2b4>
 800a19c:	f000 80a0 	beq.w	800a2e0 <_dtoa_r+0x4b0>
 800a1a0:	f1ca 0600 	rsb	r6, sl, #0
 800a1a4:	4b9f      	ldr	r3, [pc, #636]	; (800a424 <_dtoa_r+0x5f4>)
 800a1a6:	4fa0      	ldr	r7, [pc, #640]	; (800a428 <_dtoa_r+0x5f8>)
 800a1a8:	f006 020f 	and.w	r2, r6, #15
 800a1ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1b8:	f7f6 fa1e 	bl	80005f8 <__aeabi_dmul>
 800a1bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a1c0:	1136      	asrs	r6, r6, #4
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2502      	movs	r5, #2
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	d17f      	bne.n	800a2ca <_dtoa_r+0x49a>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e1      	bne.n	800a192 <_dtoa_r+0x362>
 800a1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8087 	beq.w	800a2e4 <_dtoa_r+0x4b4>
 800a1d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4b93      	ldr	r3, [pc, #588]	; (800a42c <_dtoa_r+0x5fc>)
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d07c      	beq.n	800a2e4 <_dtoa_r+0x4b4>
 800a1ea:	f1b9 0f00 	cmp.w	r9, #0
 800a1ee:	d079      	beq.n	800a2e4 <_dtoa_r+0x4b4>
 800a1f0:	9b02      	ldr	r3, [sp, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd35      	ble.n	800a262 <_dtoa_r+0x432>
 800a1f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1fa:	9308      	str	r3, [sp, #32]
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	2200      	movs	r2, #0
 800a200:	4b8b      	ldr	r3, [pc, #556]	; (800a430 <_dtoa_r+0x600>)
 800a202:	4630      	mov	r0, r6
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	e9cd 0100 	strd	r0, r1, [sp]
 800a20c:	9f02      	ldr	r7, [sp, #8]
 800a20e:	3501      	adds	r5, #1
 800a210:	4628      	mov	r0, r5
 800a212:	f7f6 f987 	bl	8000524 <__aeabi_i2d>
 800a216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a21a:	f7f6 f9ed 	bl	80005f8 <__aeabi_dmul>
 800a21e:	2200      	movs	r2, #0
 800a220:	4b84      	ldr	r3, [pc, #528]	; (800a434 <_dtoa_r+0x604>)
 800a222:	f7f6 f833 	bl	800028c <__adddf3>
 800a226:	4605      	mov	r5, r0
 800a228:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	d15d      	bne.n	800a2ec <_dtoa_r+0x4bc>
 800a230:	2200      	movs	r2, #0
 800a232:	4b81      	ldr	r3, [pc, #516]	; (800a438 <_dtoa_r+0x608>)
 800a234:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a238:	f7f6 f826 	bl	8000288 <__aeabi_dsub>
 800a23c:	462a      	mov	r2, r5
 800a23e:	4633      	mov	r3, r6
 800a240:	e9cd 0100 	strd	r0, r1, [sp]
 800a244:	f7f6 fc68 	bl	8000b18 <__aeabi_dcmpgt>
 800a248:	2800      	cmp	r0, #0
 800a24a:	f040 8288 	bne.w	800a75e <_dtoa_r+0x92e>
 800a24e:	462a      	mov	r2, r5
 800a250:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a258:	f7f6 fc40 	bl	8000adc <__aeabi_dcmplt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	f040 827c 	bne.w	800a75a <_dtoa_r+0x92a>
 800a262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a266:	e9cd 2300 	strd	r2, r3, [sp]
 800a26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f2c0 8150 	blt.w	800a512 <_dtoa_r+0x6e2>
 800a272:	f1ba 0f0e 	cmp.w	sl, #14
 800a276:	f300 814c 	bgt.w	800a512 <_dtoa_r+0x6e2>
 800a27a:	4b6a      	ldr	r3, [pc, #424]	; (800a424 <_dtoa_r+0x5f4>)
 800a27c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a280:	ed93 7b00 	vldr	d7, [r3]
 800a284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a286:	2b00      	cmp	r3, #0
 800a288:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a28c:	f280 80d8 	bge.w	800a440 <_dtoa_r+0x610>
 800a290:	f1b9 0f00 	cmp.w	r9, #0
 800a294:	f300 80d4 	bgt.w	800a440 <_dtoa_r+0x610>
 800a298:	f040 825e 	bne.w	800a758 <_dtoa_r+0x928>
 800a29c:	2200      	movs	r2, #0
 800a29e:	4b66      	ldr	r3, [pc, #408]	; (800a438 <_dtoa_r+0x608>)
 800a2a0:	ec51 0b17 	vmov	r0, r1, d7
 800a2a4:	f7f6 f9a8 	bl	80005f8 <__aeabi_dmul>
 800a2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ac:	f7f6 fc2a 	bl	8000b04 <__aeabi_dcmpge>
 800a2b0:	464f      	mov	r7, r9
 800a2b2:	464e      	mov	r6, r9
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f040 8234 	bne.w	800a722 <_dtoa_r+0x8f2>
 800a2ba:	2331      	movs	r3, #49	; 0x31
 800a2bc:	f10b 0501 	add.w	r5, fp, #1
 800a2c0:	f88b 3000 	strb.w	r3, [fp]
 800a2c4:	f10a 0a01 	add.w	sl, sl, #1
 800a2c8:	e22f      	b.n	800a72a <_dtoa_r+0x8fa>
 800a2ca:	07f2      	lsls	r2, r6, #31
 800a2cc:	d505      	bpl.n	800a2da <_dtoa_r+0x4aa>
 800a2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	3501      	adds	r5, #1
 800a2d8:	2301      	movs	r3, #1
 800a2da:	1076      	asrs	r6, r6, #1
 800a2dc:	3708      	adds	r7, #8
 800a2de:	e772      	b.n	800a1c6 <_dtoa_r+0x396>
 800a2e0:	2502      	movs	r5, #2
 800a2e2:	e774      	b.n	800a1ce <_dtoa_r+0x39e>
 800a2e4:	f8cd a020 	str.w	sl, [sp, #32]
 800a2e8:	464f      	mov	r7, r9
 800a2ea:	e791      	b.n	800a210 <_dtoa_r+0x3e0>
 800a2ec:	4b4d      	ldr	r3, [pc, #308]	; (800a424 <_dtoa_r+0x5f4>)
 800a2ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d047      	beq.n	800a38c <_dtoa_r+0x55c>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	2000      	movs	r0, #0
 800a302:	494e      	ldr	r1, [pc, #312]	; (800a43c <_dtoa_r+0x60c>)
 800a304:	f7f6 faa2 	bl	800084c <__aeabi_ddiv>
 800a308:	462a      	mov	r2, r5
 800a30a:	4633      	mov	r3, r6
 800a30c:	f7f5 ffbc 	bl	8000288 <__aeabi_dsub>
 800a310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a314:	465d      	mov	r5, fp
 800a316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a31a:	f7f6 fc1d 	bl	8000b58 <__aeabi_d2iz>
 800a31e:	4606      	mov	r6, r0
 800a320:	f7f6 f900 	bl	8000524 <__aeabi_i2d>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	3630      	adds	r6, #48	; 0x30
 800a332:	f805 6b01 	strb.w	r6, [r5], #1
 800a336:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a33a:	e9cd 0100 	strd	r0, r1, [sp]
 800a33e:	f7f6 fbcd 	bl	8000adc <__aeabi_dcmplt>
 800a342:	2800      	cmp	r0, #0
 800a344:	d163      	bne.n	800a40e <_dtoa_r+0x5de>
 800a346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a34a:	2000      	movs	r0, #0
 800a34c:	4937      	ldr	r1, [pc, #220]	; (800a42c <_dtoa_r+0x5fc>)
 800a34e:	f7f5 ff9b 	bl	8000288 <__aeabi_dsub>
 800a352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a356:	f7f6 fbc1 	bl	8000adc <__aeabi_dcmplt>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f040 80b7 	bne.w	800a4ce <_dtoa_r+0x69e>
 800a360:	eba5 030b 	sub.w	r3, r5, fp
 800a364:	429f      	cmp	r7, r3
 800a366:	f77f af7c 	ble.w	800a262 <_dtoa_r+0x432>
 800a36a:	2200      	movs	r2, #0
 800a36c:	4b30      	ldr	r3, [pc, #192]	; (800a430 <_dtoa_r+0x600>)
 800a36e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a372:	f7f6 f941 	bl	80005f8 <__aeabi_dmul>
 800a376:	2200      	movs	r2, #0
 800a378:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a37c:	4b2c      	ldr	r3, [pc, #176]	; (800a430 <_dtoa_r+0x600>)
 800a37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	e9cd 0100 	strd	r0, r1, [sp]
 800a38a:	e7c4      	b.n	800a316 <_dtoa_r+0x4e6>
 800a38c:	462a      	mov	r2, r5
 800a38e:	4633      	mov	r3, r6
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a398:	eb0b 0507 	add.w	r5, fp, r7
 800a39c:	465e      	mov	r6, fp
 800a39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3a2:	f7f6 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	f7f6 f8bc 	bl	8000524 <__aeabi_i2d>
 800a3ac:	3730      	adds	r7, #48	; 0x30
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b6:	f7f5 ff67 	bl	8000288 <__aeabi_dsub>
 800a3ba:	f806 7b01 	strb.w	r7, [r6], #1
 800a3be:	42ae      	cmp	r6, r5
 800a3c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	d126      	bne.n	800a418 <_dtoa_r+0x5e8>
 800a3ca:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <_dtoa_r+0x60c>)
 800a3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3d0:	f7f5 ff5c 	bl	800028c <__adddf3>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3dc:	f7f6 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d174      	bne.n	800a4ce <_dtoa_r+0x69e>
 800a3e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	4914      	ldr	r1, [pc, #80]	; (800a43c <_dtoa_r+0x60c>)
 800a3ec:	f7f5 ff4c 	bl	8000288 <__aeabi_dsub>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f8:	f7f6 fb70 	bl	8000adc <__aeabi_dcmplt>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f43f af30 	beq.w	800a262 <_dtoa_r+0x432>
 800a402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a406:	2b30      	cmp	r3, #48	; 0x30
 800a408:	f105 32ff 	add.w	r2, r5, #4294967295
 800a40c:	d002      	beq.n	800a414 <_dtoa_r+0x5e4>
 800a40e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a412:	e04a      	b.n	800a4aa <_dtoa_r+0x67a>
 800a414:	4615      	mov	r5, r2
 800a416:	e7f4      	b.n	800a402 <_dtoa_r+0x5d2>
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <_dtoa_r+0x600>)
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	e9cd 0100 	strd	r0, r1, [sp]
 800a422:	e7bc      	b.n	800a39e <_dtoa_r+0x56e>
 800a424:	0800d340 	.word	0x0800d340
 800a428:	0800d318 	.word	0x0800d318
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	40240000 	.word	0x40240000
 800a434:	401c0000 	.word	0x401c0000
 800a438:	40140000 	.word	0x40140000
 800a43c:	3fe00000 	.word	0x3fe00000
 800a440:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a444:	465d      	mov	r5, fp
 800a446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f6 f9fd 	bl	800084c <__aeabi_ddiv>
 800a452:	f7f6 fb81 	bl	8000b58 <__aeabi_d2iz>
 800a456:	4680      	mov	r8, r0
 800a458:	f7f6 f864 	bl	8000524 <__aeabi_i2d>
 800a45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a460:	f7f6 f8ca 	bl	80005f8 <__aeabi_dmul>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4630      	mov	r0, r6
 800a46a:	4639      	mov	r1, r7
 800a46c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a470:	f7f5 ff0a 	bl	8000288 <__aeabi_dsub>
 800a474:	f805 6b01 	strb.w	r6, [r5], #1
 800a478:	eba5 060b 	sub.w	r6, r5, fp
 800a47c:	45b1      	cmp	r9, r6
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	d139      	bne.n	800a4f8 <_dtoa_r+0x6c8>
 800a484:	f7f5 ff02 	bl	800028c <__adddf3>
 800a488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	f7f6 fb42 	bl	8000b18 <__aeabi_dcmpgt>
 800a494:	b9c8      	cbnz	r0, 800a4ca <_dtoa_r+0x69a>
 800a496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a2:	b110      	cbz	r0, 800a4aa <_dtoa_r+0x67a>
 800a4a4:	f018 0f01 	tst.w	r8, #1
 800a4a8:	d10f      	bne.n	800a4ca <_dtoa_r+0x69a>
 800a4aa:	9904      	ldr	r1, [sp, #16]
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fe06 	bl	800b0be <_Bfree>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4b6:	702b      	strb	r3, [r5, #0]
 800a4b8:	f10a 0301 	add.w	r3, sl, #1
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 8241 	beq.w	800a948 <_dtoa_r+0xb18>
 800a4c6:	601d      	str	r5, [r3, #0]
 800a4c8:	e23e      	b.n	800a948 <_dtoa_r+0xb18>
 800a4ca:	f8cd a020 	str.w	sl, [sp, #32]
 800a4ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4d2:	2a39      	cmp	r2, #57	; 0x39
 800a4d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a4d8:	d108      	bne.n	800a4ec <_dtoa_r+0x6bc>
 800a4da:	459b      	cmp	fp, r3
 800a4dc:	d10a      	bne.n	800a4f4 <_dtoa_r+0x6c4>
 800a4de:	9b08      	ldr	r3, [sp, #32]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	9308      	str	r3, [sp, #32]
 800a4e4:	2330      	movs	r3, #48	; 0x30
 800a4e6:	f88b 3000 	strb.w	r3, [fp]
 800a4ea:	465b      	mov	r3, fp
 800a4ec:	781a      	ldrb	r2, [r3, #0]
 800a4ee:	3201      	adds	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	e78c      	b.n	800a40e <_dtoa_r+0x5de>
 800a4f4:	461d      	mov	r5, r3
 800a4f6:	e7ea      	b.n	800a4ce <_dtoa_r+0x69e>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4b9b      	ldr	r3, [pc, #620]	; (800a768 <_dtoa_r+0x938>)
 800a4fc:	f7f6 f87c 	bl	80005f8 <__aeabi_dmul>
 800a500:	2200      	movs	r2, #0
 800a502:	2300      	movs	r3, #0
 800a504:	4606      	mov	r6, r0
 800a506:	460f      	mov	r7, r1
 800a508:	f7f6 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d09a      	beq.n	800a446 <_dtoa_r+0x616>
 800a510:	e7cb      	b.n	800a4aa <_dtoa_r+0x67a>
 800a512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a514:	2a00      	cmp	r2, #0
 800a516:	f000 808b 	beq.w	800a630 <_dtoa_r+0x800>
 800a51a:	9a06      	ldr	r2, [sp, #24]
 800a51c:	2a01      	cmp	r2, #1
 800a51e:	dc6e      	bgt.n	800a5fe <_dtoa_r+0x7ce>
 800a520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a522:	2a00      	cmp	r2, #0
 800a524:	d067      	beq.n	800a5f6 <_dtoa_r+0x7c6>
 800a526:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a52a:	9f07      	ldr	r7, [sp, #28]
 800a52c:	9d05      	ldr	r5, [sp, #20]
 800a52e:	9a05      	ldr	r2, [sp, #20]
 800a530:	2101      	movs	r1, #1
 800a532:	441a      	add	r2, r3
 800a534:	4620      	mov	r0, r4
 800a536:	9205      	str	r2, [sp, #20]
 800a538:	4498      	add	r8, r3
 800a53a:	f000 fe9e 	bl	800b27a <__i2b>
 800a53e:	4606      	mov	r6, r0
 800a540:	2d00      	cmp	r5, #0
 800a542:	dd0c      	ble.n	800a55e <_dtoa_r+0x72e>
 800a544:	f1b8 0f00 	cmp.w	r8, #0
 800a548:	dd09      	ble.n	800a55e <_dtoa_r+0x72e>
 800a54a:	4545      	cmp	r5, r8
 800a54c:	9a05      	ldr	r2, [sp, #20]
 800a54e:	462b      	mov	r3, r5
 800a550:	bfa8      	it	ge
 800a552:	4643      	movge	r3, r8
 800a554:	1ad2      	subs	r2, r2, r3
 800a556:	9205      	str	r2, [sp, #20]
 800a558:	1aed      	subs	r5, r5, r3
 800a55a:	eba8 0803 	sub.w	r8, r8, r3
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	b1eb      	cbz	r3, 800a59e <_dtoa_r+0x76e>
 800a562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a564:	2b00      	cmp	r3, #0
 800a566:	d067      	beq.n	800a638 <_dtoa_r+0x808>
 800a568:	b18f      	cbz	r7, 800a58e <_dtoa_r+0x75e>
 800a56a:	4631      	mov	r1, r6
 800a56c:	463a      	mov	r2, r7
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 ff22 	bl	800b3b8 <__pow5mult>
 800a574:	9a04      	ldr	r2, [sp, #16]
 800a576:	4601      	mov	r1, r0
 800a578:	4606      	mov	r6, r0
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 fe86 	bl	800b28c <__multiply>
 800a580:	9904      	ldr	r1, [sp, #16]
 800a582:	9008      	str	r0, [sp, #32]
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fd9a 	bl	800b0be <_Bfree>
 800a58a:	9b08      	ldr	r3, [sp, #32]
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	9b07      	ldr	r3, [sp, #28]
 800a590:	1bda      	subs	r2, r3, r7
 800a592:	d004      	beq.n	800a59e <_dtoa_r+0x76e>
 800a594:	9904      	ldr	r1, [sp, #16]
 800a596:	4620      	mov	r0, r4
 800a598:	f000 ff0e 	bl	800b3b8 <__pow5mult>
 800a59c:	9004      	str	r0, [sp, #16]
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 fe6a 	bl	800b27a <__i2b>
 800a5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 81d0 	beq.w	800a950 <_dtoa_r+0xb20>
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 feff 	bl	800b3b8 <__pow5mult>
 800a5ba:	9b06      	ldr	r3, [sp, #24]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	4607      	mov	r7, r0
 800a5c0:	dc40      	bgt.n	800a644 <_dtoa_r+0x814>
 800a5c2:	9b00      	ldr	r3, [sp, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d139      	bne.n	800a63c <_dtoa_r+0x80c>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d136      	bne.n	800a640 <_dtoa_r+0x810>
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	b12b      	cbz	r3, 800a5ea <_dtoa_r+0x7ba>
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	f108 0801 	add.w	r8, r8, #1
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	9307      	str	r3, [sp, #28]
 800a5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d12a      	bne.n	800a648 <_dtoa_r+0x818>
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	e030      	b.n	800a658 <_dtoa_r+0x828>
 800a5f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5fc:	e795      	b.n	800a52a <_dtoa_r+0x6fa>
 800a5fe:	9b07      	ldr	r3, [sp, #28]
 800a600:	f109 37ff 	add.w	r7, r9, #4294967295
 800a604:	42bb      	cmp	r3, r7
 800a606:	bfbf      	itttt	lt
 800a608:	9b07      	ldrlt	r3, [sp, #28]
 800a60a:	9707      	strlt	r7, [sp, #28]
 800a60c:	1afa      	sublt	r2, r7, r3
 800a60e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a610:	bfbb      	ittet	lt
 800a612:	189b      	addlt	r3, r3, r2
 800a614:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a616:	1bdf      	subge	r7, r3, r7
 800a618:	2700      	movlt	r7, #0
 800a61a:	f1b9 0f00 	cmp.w	r9, #0
 800a61e:	bfb5      	itete	lt
 800a620:	9b05      	ldrlt	r3, [sp, #20]
 800a622:	9d05      	ldrge	r5, [sp, #20]
 800a624:	eba3 0509 	sublt.w	r5, r3, r9
 800a628:	464b      	movge	r3, r9
 800a62a:	bfb8      	it	lt
 800a62c:	2300      	movlt	r3, #0
 800a62e:	e77e      	b.n	800a52e <_dtoa_r+0x6fe>
 800a630:	9f07      	ldr	r7, [sp, #28]
 800a632:	9d05      	ldr	r5, [sp, #20]
 800a634:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a636:	e783      	b.n	800a540 <_dtoa_r+0x710>
 800a638:	9a07      	ldr	r2, [sp, #28]
 800a63a:	e7ab      	b.n	800a594 <_dtoa_r+0x764>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e7d4      	b.n	800a5ea <_dtoa_r+0x7ba>
 800a640:	9b00      	ldr	r3, [sp, #0]
 800a642:	e7d2      	b.n	800a5ea <_dtoa_r+0x7ba>
 800a644:	2300      	movs	r3, #0
 800a646:	9307      	str	r3, [sp, #28]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a64e:	6918      	ldr	r0, [r3, #16]
 800a650:	f000 fdc5 	bl	800b1de <__hi0bits>
 800a654:	f1c0 0020 	rsb	r0, r0, #32
 800a658:	4440      	add	r0, r8
 800a65a:	f010 001f 	ands.w	r0, r0, #31
 800a65e:	d047      	beq.n	800a6f0 <_dtoa_r+0x8c0>
 800a660:	f1c0 0320 	rsb	r3, r0, #32
 800a664:	2b04      	cmp	r3, #4
 800a666:	dd3b      	ble.n	800a6e0 <_dtoa_r+0x8b0>
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	f1c0 001c 	rsb	r0, r0, #28
 800a66e:	4403      	add	r3, r0
 800a670:	9305      	str	r3, [sp, #20]
 800a672:	4405      	add	r5, r0
 800a674:	4480      	add	r8, r0
 800a676:	9b05      	ldr	r3, [sp, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dd05      	ble.n	800a688 <_dtoa_r+0x858>
 800a67c:	461a      	mov	r2, r3
 800a67e:	9904      	ldr	r1, [sp, #16]
 800a680:	4620      	mov	r0, r4
 800a682:	f000 fee7 	bl	800b454 <__lshift>
 800a686:	9004      	str	r0, [sp, #16]
 800a688:	f1b8 0f00 	cmp.w	r8, #0
 800a68c:	dd05      	ble.n	800a69a <_dtoa_r+0x86a>
 800a68e:	4639      	mov	r1, r7
 800a690:	4642      	mov	r2, r8
 800a692:	4620      	mov	r0, r4
 800a694:	f000 fede 	bl	800b454 <__lshift>
 800a698:	4607      	mov	r7, r0
 800a69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a69c:	b353      	cbz	r3, 800a6f4 <_dtoa_r+0x8c4>
 800a69e:	4639      	mov	r1, r7
 800a6a0:	9804      	ldr	r0, [sp, #16]
 800a6a2:	f000 ff2b 	bl	800b4fc <__mcmp>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	da24      	bge.n	800a6f4 <_dtoa_r+0x8c4>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	220a      	movs	r2, #10
 800a6ae:	9904      	ldr	r1, [sp, #16]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 fd1b 	bl	800b0ec <__multadd>
 800a6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b8:	9004      	str	r0, [sp, #16]
 800a6ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 814d 	beq.w	800a95e <_dtoa_r+0xb2e>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	220a      	movs	r2, #10
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fd0e 	bl	800b0ec <__multadd>
 800a6d0:	9b02      	ldr	r3, [sp, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	dc4f      	bgt.n	800a778 <_dtoa_r+0x948>
 800a6d8:	9b06      	ldr	r3, [sp, #24]
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	dd4c      	ble.n	800a778 <_dtoa_r+0x948>
 800a6de:	e011      	b.n	800a704 <_dtoa_r+0x8d4>
 800a6e0:	d0c9      	beq.n	800a676 <_dtoa_r+0x846>
 800a6e2:	9a05      	ldr	r2, [sp, #20]
 800a6e4:	331c      	adds	r3, #28
 800a6e6:	441a      	add	r2, r3
 800a6e8:	9205      	str	r2, [sp, #20]
 800a6ea:	441d      	add	r5, r3
 800a6ec:	4498      	add	r8, r3
 800a6ee:	e7c2      	b.n	800a676 <_dtoa_r+0x846>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	e7f6      	b.n	800a6e2 <_dtoa_r+0x8b2>
 800a6f4:	f1b9 0f00 	cmp.w	r9, #0
 800a6f8:	dc38      	bgt.n	800a76c <_dtoa_r+0x93c>
 800a6fa:	9b06      	ldr	r3, [sp, #24]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	dd35      	ble.n	800a76c <_dtoa_r+0x93c>
 800a700:	f8cd 9008 	str.w	r9, [sp, #8]
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	b963      	cbnz	r3, 800a722 <_dtoa_r+0x8f2>
 800a708:	4639      	mov	r1, r7
 800a70a:	2205      	movs	r2, #5
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fced 	bl	800b0ec <__multadd>
 800a712:	4601      	mov	r1, r0
 800a714:	4607      	mov	r7, r0
 800a716:	9804      	ldr	r0, [sp, #16]
 800a718:	f000 fef0 	bl	800b4fc <__mcmp>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f73f adcc 	bgt.w	800a2ba <_dtoa_r+0x48a>
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	465d      	mov	r5, fp
 800a726:	ea6f 0a03 	mvn.w	sl, r3
 800a72a:	f04f 0900 	mov.w	r9, #0
 800a72e:	4639      	mov	r1, r7
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fcc4 	bl	800b0be <_Bfree>
 800a736:	2e00      	cmp	r6, #0
 800a738:	f43f aeb7 	beq.w	800a4aa <_dtoa_r+0x67a>
 800a73c:	f1b9 0f00 	cmp.w	r9, #0
 800a740:	d005      	beq.n	800a74e <_dtoa_r+0x91e>
 800a742:	45b1      	cmp	r9, r6
 800a744:	d003      	beq.n	800a74e <_dtoa_r+0x91e>
 800a746:	4649      	mov	r1, r9
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 fcb8 	bl	800b0be <_Bfree>
 800a74e:	4631      	mov	r1, r6
 800a750:	4620      	mov	r0, r4
 800a752:	f000 fcb4 	bl	800b0be <_Bfree>
 800a756:	e6a8      	b.n	800a4aa <_dtoa_r+0x67a>
 800a758:	2700      	movs	r7, #0
 800a75a:	463e      	mov	r6, r7
 800a75c:	e7e1      	b.n	800a722 <_dtoa_r+0x8f2>
 800a75e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a762:	463e      	mov	r6, r7
 800a764:	e5a9      	b.n	800a2ba <_dtoa_r+0x48a>
 800a766:	bf00      	nop
 800a768:	40240000 	.word	0x40240000
 800a76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 80fa 	beq.w	800a96c <_dtoa_r+0xb3c>
 800a778:	2d00      	cmp	r5, #0
 800a77a:	dd05      	ble.n	800a788 <_dtoa_r+0x958>
 800a77c:	4631      	mov	r1, r6
 800a77e:	462a      	mov	r2, r5
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fe67 	bl	800b454 <__lshift>
 800a786:	4606      	mov	r6, r0
 800a788:	9b07      	ldr	r3, [sp, #28]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d04c      	beq.n	800a828 <_dtoa_r+0x9f8>
 800a78e:	6871      	ldr	r1, [r6, #4]
 800a790:	4620      	mov	r0, r4
 800a792:	f000 fc60 	bl	800b056 <_Balloc>
 800a796:	6932      	ldr	r2, [r6, #16]
 800a798:	3202      	adds	r2, #2
 800a79a:	4605      	mov	r5, r0
 800a79c:	0092      	lsls	r2, r2, #2
 800a79e:	f106 010c 	add.w	r1, r6, #12
 800a7a2:	300c      	adds	r0, #12
 800a7a4:	f000 fc4c 	bl	800b040 <memcpy>
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f000 fe51 	bl	800b454 <__lshift>
 800a7b2:	9b00      	ldr	r3, [sp, #0]
 800a7b4:	f8cd b014 	str.w	fp, [sp, #20]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	46b1      	mov	r9, r6
 800a7be:	9307      	str	r3, [sp, #28]
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	9804      	ldr	r0, [sp, #16]
 800a7c6:	f7ff faa7 	bl	8009d18 <quorem>
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7d2:	9804      	ldr	r0, [sp, #16]
 800a7d4:	f000 fe92 	bl	800b4fc <__mcmp>
 800a7d8:	4632      	mov	r2, r6
 800a7da:	9000      	str	r0, [sp, #0]
 800a7dc:	4639      	mov	r1, r7
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 fea6 	bl	800b530 <__mdiff>
 800a7e4:	68c3      	ldr	r3, [r0, #12]
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	bb03      	cbnz	r3, 800a82c <_dtoa_r+0x9fc>
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	9008      	str	r0, [sp, #32]
 800a7ee:	9804      	ldr	r0, [sp, #16]
 800a7f0:	f000 fe84 	bl	800b4fc <__mcmp>
 800a7f4:	9a08      	ldr	r2, [sp, #32]
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	9308      	str	r3, [sp, #32]
 800a7fe:	f000 fc5e 	bl	800b0be <_Bfree>
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	b9a3      	cbnz	r3, 800a830 <_dtoa_r+0xa00>
 800a806:	9a06      	ldr	r2, [sp, #24]
 800a808:	b992      	cbnz	r2, 800a830 <_dtoa_r+0xa00>
 800a80a:	9a07      	ldr	r2, [sp, #28]
 800a80c:	b982      	cbnz	r2, 800a830 <_dtoa_r+0xa00>
 800a80e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a812:	d029      	beq.n	800a868 <_dtoa_r+0xa38>
 800a814:	9b00      	ldr	r3, [sp, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd01      	ble.n	800a81e <_dtoa_r+0x9ee>
 800a81a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a81e:	9b05      	ldr	r3, [sp, #20]
 800a820:	1c5d      	adds	r5, r3, #1
 800a822:	f883 8000 	strb.w	r8, [r3]
 800a826:	e782      	b.n	800a72e <_dtoa_r+0x8fe>
 800a828:	4630      	mov	r0, r6
 800a82a:	e7c2      	b.n	800a7b2 <_dtoa_r+0x982>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e7e3      	b.n	800a7f8 <_dtoa_r+0x9c8>
 800a830:	9a00      	ldr	r2, [sp, #0]
 800a832:	2a00      	cmp	r2, #0
 800a834:	db04      	blt.n	800a840 <_dtoa_r+0xa10>
 800a836:	d125      	bne.n	800a884 <_dtoa_r+0xa54>
 800a838:	9a06      	ldr	r2, [sp, #24]
 800a83a:	bb1a      	cbnz	r2, 800a884 <_dtoa_r+0xa54>
 800a83c:	9a07      	ldr	r2, [sp, #28]
 800a83e:	bb0a      	cbnz	r2, 800a884 <_dtoa_r+0xa54>
 800a840:	2b00      	cmp	r3, #0
 800a842:	ddec      	ble.n	800a81e <_dtoa_r+0x9ee>
 800a844:	2201      	movs	r2, #1
 800a846:	9904      	ldr	r1, [sp, #16]
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fe03 	bl	800b454 <__lshift>
 800a84e:	4639      	mov	r1, r7
 800a850:	9004      	str	r0, [sp, #16]
 800a852:	f000 fe53 	bl	800b4fc <__mcmp>
 800a856:	2800      	cmp	r0, #0
 800a858:	dc03      	bgt.n	800a862 <_dtoa_r+0xa32>
 800a85a:	d1e0      	bne.n	800a81e <_dtoa_r+0x9ee>
 800a85c:	f018 0f01 	tst.w	r8, #1
 800a860:	d0dd      	beq.n	800a81e <_dtoa_r+0x9ee>
 800a862:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a866:	d1d8      	bne.n	800a81a <_dtoa_r+0x9ea>
 800a868:	9b05      	ldr	r3, [sp, #20]
 800a86a:	9a05      	ldr	r2, [sp, #20]
 800a86c:	1c5d      	adds	r5, r3, #1
 800a86e:	2339      	movs	r3, #57	; 0x39
 800a870:	7013      	strb	r3, [r2, #0]
 800a872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a876:	2b39      	cmp	r3, #57	; 0x39
 800a878:	f105 32ff 	add.w	r2, r5, #4294967295
 800a87c:	d04f      	beq.n	800a91e <_dtoa_r+0xaee>
 800a87e:	3301      	adds	r3, #1
 800a880:	7013      	strb	r3, [r2, #0]
 800a882:	e754      	b.n	800a72e <_dtoa_r+0x8fe>
 800a884:	9a05      	ldr	r2, [sp, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f102 0501 	add.w	r5, r2, #1
 800a88c:	dd06      	ble.n	800a89c <_dtoa_r+0xa6c>
 800a88e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a892:	d0e9      	beq.n	800a868 <_dtoa_r+0xa38>
 800a894:	f108 0801 	add.w	r8, r8, #1
 800a898:	9b05      	ldr	r3, [sp, #20]
 800a89a:	e7c2      	b.n	800a822 <_dtoa_r+0x9f2>
 800a89c:	9a02      	ldr	r2, [sp, #8]
 800a89e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a8a2:	eba5 030b 	sub.w	r3, r5, fp
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d021      	beq.n	800a8ee <_dtoa_r+0xabe>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	9904      	ldr	r1, [sp, #16]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fc1b 	bl	800b0ec <__multadd>
 800a8b6:	45b1      	cmp	r9, r6
 800a8b8:	9004      	str	r0, [sp, #16]
 800a8ba:	f04f 0300 	mov.w	r3, #0
 800a8be:	f04f 020a 	mov.w	r2, #10
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	d105      	bne.n	800a8d4 <_dtoa_r+0xaa4>
 800a8c8:	f000 fc10 	bl	800b0ec <__multadd>
 800a8cc:	4681      	mov	r9, r0
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	9505      	str	r5, [sp, #20]
 800a8d2:	e776      	b.n	800a7c2 <_dtoa_r+0x992>
 800a8d4:	f000 fc0a 	bl	800b0ec <__multadd>
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4681      	mov	r9, r0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	220a      	movs	r2, #10
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fc03 	bl	800b0ec <__multadd>
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	e7f2      	b.n	800a8d0 <_dtoa_r+0xaa0>
 800a8ea:	f04f 0900 	mov.w	r9, #0
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	9904      	ldr	r1, [sp, #16]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 fdae 	bl	800b454 <__lshift>
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	9004      	str	r0, [sp, #16]
 800a8fc:	f000 fdfe 	bl	800b4fc <__mcmp>
 800a900:	2800      	cmp	r0, #0
 800a902:	dcb6      	bgt.n	800a872 <_dtoa_r+0xa42>
 800a904:	d102      	bne.n	800a90c <_dtoa_r+0xadc>
 800a906:	f018 0f01 	tst.w	r8, #1
 800a90a:	d1b2      	bne.n	800a872 <_dtoa_r+0xa42>
 800a90c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a910:	2b30      	cmp	r3, #48	; 0x30
 800a912:	f105 32ff 	add.w	r2, r5, #4294967295
 800a916:	f47f af0a 	bne.w	800a72e <_dtoa_r+0x8fe>
 800a91a:	4615      	mov	r5, r2
 800a91c:	e7f6      	b.n	800a90c <_dtoa_r+0xadc>
 800a91e:	4593      	cmp	fp, r2
 800a920:	d105      	bne.n	800a92e <_dtoa_r+0xafe>
 800a922:	2331      	movs	r3, #49	; 0x31
 800a924:	f10a 0a01 	add.w	sl, sl, #1
 800a928:	f88b 3000 	strb.w	r3, [fp]
 800a92c:	e6ff      	b.n	800a72e <_dtoa_r+0x8fe>
 800a92e:	4615      	mov	r5, r2
 800a930:	e79f      	b.n	800a872 <_dtoa_r+0xa42>
 800a932:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a998 <_dtoa_r+0xb68>
 800a936:	e007      	b.n	800a948 <_dtoa_r+0xb18>
 800a938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a93a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a99c <_dtoa_r+0xb6c>
 800a93e:	b11b      	cbz	r3, 800a948 <_dtoa_r+0xb18>
 800a940:	f10b 0308 	add.w	r3, fp, #8
 800a944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	4658      	mov	r0, fp
 800a94a:	b017      	add	sp, #92	; 0x5c
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	2b01      	cmp	r3, #1
 800a954:	f77f ae35 	ble.w	800a5c2 <_dtoa_r+0x792>
 800a958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a95a:	9307      	str	r3, [sp, #28]
 800a95c:	e649      	b.n	800a5f2 <_dtoa_r+0x7c2>
 800a95e:	9b02      	ldr	r3, [sp, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	dc03      	bgt.n	800a96c <_dtoa_r+0xb3c>
 800a964:	9b06      	ldr	r3, [sp, #24]
 800a966:	2b02      	cmp	r3, #2
 800a968:	f73f aecc 	bgt.w	800a704 <_dtoa_r+0x8d4>
 800a96c:	465d      	mov	r5, fp
 800a96e:	4639      	mov	r1, r7
 800a970:	9804      	ldr	r0, [sp, #16]
 800a972:	f7ff f9d1 	bl	8009d18 <quorem>
 800a976:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a97a:	f805 8b01 	strb.w	r8, [r5], #1
 800a97e:	9a02      	ldr	r2, [sp, #8]
 800a980:	eba5 030b 	sub.w	r3, r5, fp
 800a984:	429a      	cmp	r2, r3
 800a986:	ddb0      	ble.n	800a8ea <_dtoa_r+0xaba>
 800a988:	2300      	movs	r3, #0
 800a98a:	220a      	movs	r2, #10
 800a98c:	9904      	ldr	r1, [sp, #16]
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 fbac 	bl	800b0ec <__multadd>
 800a994:	9004      	str	r0, [sp, #16]
 800a996:	e7ea      	b.n	800a96e <_dtoa_r+0xb3e>
 800a998:	0800d288 	.word	0x0800d288
 800a99c:	0800d300 	.word	0x0800d300

0800a9a0 <rshift>:
 800a9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a2:	6906      	ldr	r6, [r0, #16]
 800a9a4:	114b      	asrs	r3, r1, #5
 800a9a6:	429e      	cmp	r6, r3
 800a9a8:	f100 0414 	add.w	r4, r0, #20
 800a9ac:	dd30      	ble.n	800aa10 <rshift+0x70>
 800a9ae:	f011 011f 	ands.w	r1, r1, #31
 800a9b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a9b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a9ba:	d108      	bne.n	800a9ce <rshift+0x2e>
 800a9bc:	4621      	mov	r1, r4
 800a9be:	42b2      	cmp	r2, r6
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	d211      	bcs.n	800a9e8 <rshift+0x48>
 800a9c4:	f852 3b04 	ldr.w	r3, [r2], #4
 800a9c8:	f841 3b04 	str.w	r3, [r1], #4
 800a9cc:	e7f7      	b.n	800a9be <rshift+0x1e>
 800a9ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a9d2:	f1c1 0c20 	rsb	ip, r1, #32
 800a9d6:	40cd      	lsrs	r5, r1
 800a9d8:	3204      	adds	r2, #4
 800a9da:	4623      	mov	r3, r4
 800a9dc:	42b2      	cmp	r2, r6
 800a9de:	4617      	mov	r7, r2
 800a9e0:	d30c      	bcc.n	800a9fc <rshift+0x5c>
 800a9e2:	601d      	str	r5, [r3, #0]
 800a9e4:	b105      	cbz	r5, 800a9e8 <rshift+0x48>
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	1b1a      	subs	r2, r3, r4
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9f0:	bf08      	it	eq
 800a9f2:	2300      	moveq	r3, #0
 800a9f4:	6102      	str	r2, [r0, #16]
 800a9f6:	bf08      	it	eq
 800a9f8:	6143      	streq	r3, [r0, #20]
 800a9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fc:	683f      	ldr	r7, [r7, #0]
 800a9fe:	fa07 f70c 	lsl.w	r7, r7, ip
 800aa02:	433d      	orrs	r5, r7
 800aa04:	f843 5b04 	str.w	r5, [r3], #4
 800aa08:	f852 5b04 	ldr.w	r5, [r2], #4
 800aa0c:	40cd      	lsrs	r5, r1
 800aa0e:	e7e5      	b.n	800a9dc <rshift+0x3c>
 800aa10:	4623      	mov	r3, r4
 800aa12:	e7e9      	b.n	800a9e8 <rshift+0x48>

0800aa14 <__hexdig_fun>:
 800aa14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa18:	2b09      	cmp	r3, #9
 800aa1a:	d802      	bhi.n	800aa22 <__hexdig_fun+0xe>
 800aa1c:	3820      	subs	r0, #32
 800aa1e:	b2c0      	uxtb	r0, r0
 800aa20:	4770      	bx	lr
 800aa22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa26:	2b05      	cmp	r3, #5
 800aa28:	d801      	bhi.n	800aa2e <__hexdig_fun+0x1a>
 800aa2a:	3847      	subs	r0, #71	; 0x47
 800aa2c:	e7f7      	b.n	800aa1e <__hexdig_fun+0xa>
 800aa2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa32:	2b05      	cmp	r3, #5
 800aa34:	d801      	bhi.n	800aa3a <__hexdig_fun+0x26>
 800aa36:	3827      	subs	r0, #39	; 0x27
 800aa38:	e7f1      	b.n	800aa1e <__hexdig_fun+0xa>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	4770      	bx	lr

0800aa3e <__gethex>:
 800aa3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa42:	b08b      	sub	sp, #44	; 0x2c
 800aa44:	468a      	mov	sl, r1
 800aa46:	9002      	str	r0, [sp, #8]
 800aa48:	9816      	ldr	r0, [sp, #88]	; 0x58
 800aa4a:	9306      	str	r3, [sp, #24]
 800aa4c:	4690      	mov	r8, r2
 800aa4e:	f000 facd 	bl	800afec <__localeconv_l>
 800aa52:	6803      	ldr	r3, [r0, #0]
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7f5 fbba 	bl	80001d0 <strlen>
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	4403      	add	r3, r0
 800aa62:	f04f 0b00 	mov.w	fp, #0
 800aa66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa6a:	9307      	str	r3, [sp, #28]
 800aa6c:	f8da 3000 	ldr.w	r3, [sl]
 800aa70:	3302      	adds	r3, #2
 800aa72:	461f      	mov	r7, r3
 800aa74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa78:	2830      	cmp	r0, #48	; 0x30
 800aa7a:	d06c      	beq.n	800ab56 <__gethex+0x118>
 800aa7c:	f7ff ffca 	bl	800aa14 <__hexdig_fun>
 800aa80:	4604      	mov	r4, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d16a      	bne.n	800ab5c <__gethex+0x11e>
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	9903      	ldr	r1, [sp, #12]
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	f001 f8fa 	bl	800bc84 <strncmp>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d166      	bne.n	800ab62 <__gethex+0x124>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	5cf8      	ldrb	r0, [r7, r3]
 800aa98:	18fe      	adds	r6, r7, r3
 800aa9a:	f7ff ffbb 	bl	800aa14 <__hexdig_fun>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d062      	beq.n	800ab68 <__gethex+0x12a>
 800aaa2:	4633      	mov	r3, r6
 800aaa4:	7818      	ldrb	r0, [r3, #0]
 800aaa6:	2830      	cmp	r0, #48	; 0x30
 800aaa8:	461f      	mov	r7, r3
 800aaaa:	f103 0301 	add.w	r3, r3, #1
 800aaae:	d0f9      	beq.n	800aaa4 <__gethex+0x66>
 800aab0:	f7ff ffb0 	bl	800aa14 <__hexdig_fun>
 800aab4:	fab0 f580 	clz	r5, r0
 800aab8:	096d      	lsrs	r5, r5, #5
 800aaba:	4634      	mov	r4, r6
 800aabc:	f04f 0b01 	mov.w	fp, #1
 800aac0:	463a      	mov	r2, r7
 800aac2:	4616      	mov	r6, r2
 800aac4:	3201      	adds	r2, #1
 800aac6:	7830      	ldrb	r0, [r6, #0]
 800aac8:	f7ff ffa4 	bl	800aa14 <__hexdig_fun>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d1f8      	bne.n	800aac2 <__gethex+0x84>
 800aad0:	9a01      	ldr	r2, [sp, #4]
 800aad2:	9903      	ldr	r1, [sp, #12]
 800aad4:	4630      	mov	r0, r6
 800aad6:	f001 f8d5 	bl	800bc84 <strncmp>
 800aada:	b950      	cbnz	r0, 800aaf2 <__gethex+0xb4>
 800aadc:	b954      	cbnz	r4, 800aaf4 <__gethex+0xb6>
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	18f4      	adds	r4, r6, r3
 800aae2:	4622      	mov	r2, r4
 800aae4:	4616      	mov	r6, r2
 800aae6:	3201      	adds	r2, #1
 800aae8:	7830      	ldrb	r0, [r6, #0]
 800aaea:	f7ff ff93 	bl	800aa14 <__hexdig_fun>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1f8      	bne.n	800aae4 <__gethex+0xa6>
 800aaf2:	b10c      	cbz	r4, 800aaf8 <__gethex+0xba>
 800aaf4:	1ba4      	subs	r4, r4, r6
 800aaf6:	00a4      	lsls	r4, r4, #2
 800aaf8:	7833      	ldrb	r3, [r6, #0]
 800aafa:	2b50      	cmp	r3, #80	; 0x50
 800aafc:	d001      	beq.n	800ab02 <__gethex+0xc4>
 800aafe:	2b70      	cmp	r3, #112	; 0x70
 800ab00:	d140      	bne.n	800ab84 <__gethex+0x146>
 800ab02:	7873      	ldrb	r3, [r6, #1]
 800ab04:	2b2b      	cmp	r3, #43	; 0x2b
 800ab06:	d031      	beq.n	800ab6c <__gethex+0x12e>
 800ab08:	2b2d      	cmp	r3, #45	; 0x2d
 800ab0a:	d033      	beq.n	800ab74 <__gethex+0x136>
 800ab0c:	1c71      	adds	r1, r6, #1
 800ab0e:	f04f 0900 	mov.w	r9, #0
 800ab12:	7808      	ldrb	r0, [r1, #0]
 800ab14:	f7ff ff7e 	bl	800aa14 <__hexdig_fun>
 800ab18:	1e43      	subs	r3, r0, #1
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b18      	cmp	r3, #24
 800ab1e:	d831      	bhi.n	800ab84 <__gethex+0x146>
 800ab20:	f1a0 0210 	sub.w	r2, r0, #16
 800ab24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab28:	f7ff ff74 	bl	800aa14 <__hexdig_fun>
 800ab2c:	1e43      	subs	r3, r0, #1
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b18      	cmp	r3, #24
 800ab32:	d922      	bls.n	800ab7a <__gethex+0x13c>
 800ab34:	f1b9 0f00 	cmp.w	r9, #0
 800ab38:	d000      	beq.n	800ab3c <__gethex+0xfe>
 800ab3a:	4252      	negs	r2, r2
 800ab3c:	4414      	add	r4, r2
 800ab3e:	f8ca 1000 	str.w	r1, [sl]
 800ab42:	b30d      	cbz	r5, 800ab88 <__gethex+0x14a>
 800ab44:	f1bb 0f00 	cmp.w	fp, #0
 800ab48:	bf0c      	ite	eq
 800ab4a:	2706      	moveq	r7, #6
 800ab4c:	2700      	movne	r7, #0
 800ab4e:	4638      	mov	r0, r7
 800ab50:	b00b      	add	sp, #44	; 0x2c
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	f10b 0b01 	add.w	fp, fp, #1
 800ab5a:	e78a      	b.n	800aa72 <__gethex+0x34>
 800ab5c:	2500      	movs	r5, #0
 800ab5e:	462c      	mov	r4, r5
 800ab60:	e7ae      	b.n	800aac0 <__gethex+0x82>
 800ab62:	463e      	mov	r6, r7
 800ab64:	2501      	movs	r5, #1
 800ab66:	e7c7      	b.n	800aaf8 <__gethex+0xba>
 800ab68:	4604      	mov	r4, r0
 800ab6a:	e7fb      	b.n	800ab64 <__gethex+0x126>
 800ab6c:	f04f 0900 	mov.w	r9, #0
 800ab70:	1cb1      	adds	r1, r6, #2
 800ab72:	e7ce      	b.n	800ab12 <__gethex+0xd4>
 800ab74:	f04f 0901 	mov.w	r9, #1
 800ab78:	e7fa      	b.n	800ab70 <__gethex+0x132>
 800ab7a:	230a      	movs	r3, #10
 800ab7c:	fb03 0202 	mla	r2, r3, r2, r0
 800ab80:	3a10      	subs	r2, #16
 800ab82:	e7cf      	b.n	800ab24 <__gethex+0xe6>
 800ab84:	4631      	mov	r1, r6
 800ab86:	e7da      	b.n	800ab3e <__gethex+0x100>
 800ab88:	1bf3      	subs	r3, r6, r7
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	2b07      	cmp	r3, #7
 800ab90:	dc49      	bgt.n	800ac26 <__gethex+0x1e8>
 800ab92:	9802      	ldr	r0, [sp, #8]
 800ab94:	f000 fa5f 	bl	800b056 <_Balloc>
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	f100 0914 	add.w	r9, r0, #20
 800ab9e:	f04f 0b00 	mov.w	fp, #0
 800aba2:	f1c3 0301 	rsb	r3, r3, #1
 800aba6:	4605      	mov	r5, r0
 800aba8:	f8cd 9010 	str.w	r9, [sp, #16]
 800abac:	46da      	mov	sl, fp
 800abae:	9308      	str	r3, [sp, #32]
 800abb0:	42b7      	cmp	r7, r6
 800abb2:	d33b      	bcc.n	800ac2c <__gethex+0x1ee>
 800abb4:	9804      	ldr	r0, [sp, #16]
 800abb6:	f840 ab04 	str.w	sl, [r0], #4
 800abba:	eba0 0009 	sub.w	r0, r0, r9
 800abbe:	1080      	asrs	r0, r0, #2
 800abc0:	6128      	str	r0, [r5, #16]
 800abc2:	0147      	lsls	r7, r0, #5
 800abc4:	4650      	mov	r0, sl
 800abc6:	f000 fb0a 	bl	800b1de <__hi0bits>
 800abca:	f8d8 6000 	ldr.w	r6, [r8]
 800abce:	1a3f      	subs	r7, r7, r0
 800abd0:	42b7      	cmp	r7, r6
 800abd2:	dd64      	ble.n	800ac9e <__gethex+0x260>
 800abd4:	1bbf      	subs	r7, r7, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	4628      	mov	r0, r5
 800abda:	f000 fe19 	bl	800b810 <__any_on>
 800abde:	4682      	mov	sl, r0
 800abe0:	b178      	cbz	r0, 800ac02 <__gethex+0x1c4>
 800abe2:	1e7b      	subs	r3, r7, #1
 800abe4:	1159      	asrs	r1, r3, #5
 800abe6:	f003 021f 	and.w	r2, r3, #31
 800abea:	f04f 0a01 	mov.w	sl, #1
 800abee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800abf2:	fa0a f202 	lsl.w	r2, sl, r2
 800abf6:	420a      	tst	r2, r1
 800abf8:	d003      	beq.n	800ac02 <__gethex+0x1c4>
 800abfa:	4553      	cmp	r3, sl
 800abfc:	dc46      	bgt.n	800ac8c <__gethex+0x24e>
 800abfe:	f04f 0a02 	mov.w	sl, #2
 800ac02:	4639      	mov	r1, r7
 800ac04:	4628      	mov	r0, r5
 800ac06:	f7ff fecb 	bl	800a9a0 <rshift>
 800ac0a:	443c      	add	r4, r7
 800ac0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	da52      	bge.n	800acba <__gethex+0x27c>
 800ac14:	4629      	mov	r1, r5
 800ac16:	9802      	ldr	r0, [sp, #8]
 800ac18:	f000 fa51 	bl	800b0be <_Bfree>
 800ac1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac1e:	2300      	movs	r3, #0
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	27a3      	movs	r7, #163	; 0xa3
 800ac24:	e793      	b.n	800ab4e <__gethex+0x110>
 800ac26:	3101      	adds	r1, #1
 800ac28:	105b      	asrs	r3, r3, #1
 800ac2a:	e7b0      	b.n	800ab8e <__gethex+0x150>
 800ac2c:	1e73      	subs	r3, r6, #1
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	9a07      	ldr	r2, [sp, #28]
 800ac32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d018      	beq.n	800ac6c <__gethex+0x22e>
 800ac3a:	f1bb 0f20 	cmp.w	fp, #32
 800ac3e:	d107      	bne.n	800ac50 <__gethex+0x212>
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	f8c3 a000 	str.w	sl, [r3]
 800ac46:	3304      	adds	r3, #4
 800ac48:	f04f 0a00 	mov.w	sl, #0
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	46d3      	mov	fp, sl
 800ac50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac54:	f7ff fede 	bl	800aa14 <__hexdig_fun>
 800ac58:	f000 000f 	and.w	r0, r0, #15
 800ac5c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac60:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac64:	f10b 0b04 	add.w	fp, fp, #4
 800ac68:	9b05      	ldr	r3, [sp, #20]
 800ac6a:	e00d      	b.n	800ac88 <__gethex+0x24a>
 800ac6c:	9b05      	ldr	r3, [sp, #20]
 800ac6e:	9a08      	ldr	r2, [sp, #32]
 800ac70:	4413      	add	r3, r2
 800ac72:	42bb      	cmp	r3, r7
 800ac74:	d3e1      	bcc.n	800ac3a <__gethex+0x1fc>
 800ac76:	4618      	mov	r0, r3
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	9903      	ldr	r1, [sp, #12]
 800ac7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac7e:	f001 f801 	bl	800bc84 <strncmp>
 800ac82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d1d8      	bne.n	800ac3a <__gethex+0x1fc>
 800ac88:	461e      	mov	r6, r3
 800ac8a:	e791      	b.n	800abb0 <__gethex+0x172>
 800ac8c:	1eb9      	subs	r1, r7, #2
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 fdbe 	bl	800b810 <__any_on>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d0b2      	beq.n	800abfe <__gethex+0x1c0>
 800ac98:	f04f 0a03 	mov.w	sl, #3
 800ac9c:	e7b1      	b.n	800ac02 <__gethex+0x1c4>
 800ac9e:	da09      	bge.n	800acb4 <__gethex+0x276>
 800aca0:	1bf7      	subs	r7, r6, r7
 800aca2:	4629      	mov	r1, r5
 800aca4:	463a      	mov	r2, r7
 800aca6:	9802      	ldr	r0, [sp, #8]
 800aca8:	f000 fbd4 	bl	800b454 <__lshift>
 800acac:	1be4      	subs	r4, r4, r7
 800acae:	4605      	mov	r5, r0
 800acb0:	f100 0914 	add.w	r9, r0, #20
 800acb4:	f04f 0a00 	mov.w	sl, #0
 800acb8:	e7a8      	b.n	800ac0c <__gethex+0x1ce>
 800acba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800acbe:	42a0      	cmp	r0, r4
 800acc0:	dd6a      	ble.n	800ad98 <__gethex+0x35a>
 800acc2:	1b04      	subs	r4, r0, r4
 800acc4:	42a6      	cmp	r6, r4
 800acc6:	dc2e      	bgt.n	800ad26 <__gethex+0x2e8>
 800acc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d022      	beq.n	800ad16 <__gethex+0x2d8>
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d024      	beq.n	800ad1e <__gethex+0x2e0>
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d115      	bne.n	800ad04 <__gethex+0x2c6>
 800acd8:	42a6      	cmp	r6, r4
 800acda:	d113      	bne.n	800ad04 <__gethex+0x2c6>
 800acdc:	2e01      	cmp	r6, #1
 800acde:	dc0b      	bgt.n	800acf8 <__gethex+0x2ba>
 800ace0:	9a06      	ldr	r2, [sp, #24]
 800ace2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	2301      	movs	r3, #1
 800acea:	612b      	str	r3, [r5, #16]
 800acec:	f8c9 3000 	str.w	r3, [r9]
 800acf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acf2:	2762      	movs	r7, #98	; 0x62
 800acf4:	601d      	str	r5, [r3, #0]
 800acf6:	e72a      	b.n	800ab4e <__gethex+0x110>
 800acf8:	1e71      	subs	r1, r6, #1
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 fd88 	bl	800b810 <__any_on>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1ed      	bne.n	800ace0 <__gethex+0x2a2>
 800ad04:	4629      	mov	r1, r5
 800ad06:	9802      	ldr	r0, [sp, #8]
 800ad08:	f000 f9d9 	bl	800b0be <_Bfree>
 800ad0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad0e:	2300      	movs	r3, #0
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	2750      	movs	r7, #80	; 0x50
 800ad14:	e71b      	b.n	800ab4e <__gethex+0x110>
 800ad16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0e1      	beq.n	800ace0 <__gethex+0x2a2>
 800ad1c:	e7f2      	b.n	800ad04 <__gethex+0x2c6>
 800ad1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1dd      	bne.n	800ace0 <__gethex+0x2a2>
 800ad24:	e7ee      	b.n	800ad04 <__gethex+0x2c6>
 800ad26:	1e67      	subs	r7, r4, #1
 800ad28:	f1ba 0f00 	cmp.w	sl, #0
 800ad2c:	d131      	bne.n	800ad92 <__gethex+0x354>
 800ad2e:	b127      	cbz	r7, 800ad3a <__gethex+0x2fc>
 800ad30:	4639      	mov	r1, r7
 800ad32:	4628      	mov	r0, r5
 800ad34:	f000 fd6c 	bl	800b810 <__any_on>
 800ad38:	4682      	mov	sl, r0
 800ad3a:	117a      	asrs	r2, r7, #5
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f007 071f 	and.w	r7, r7, #31
 800ad42:	fa03 f707 	lsl.w	r7, r3, r7
 800ad46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	421f      	tst	r7, r3
 800ad4e:	4628      	mov	r0, r5
 800ad50:	bf18      	it	ne
 800ad52:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad56:	1b36      	subs	r6, r6, r4
 800ad58:	f7ff fe22 	bl	800a9a0 <rshift>
 800ad5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ad60:	2702      	movs	r7, #2
 800ad62:	f1ba 0f00 	cmp.w	sl, #0
 800ad66:	d048      	beq.n	800adfa <__gethex+0x3bc>
 800ad68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d015      	beq.n	800ad9c <__gethex+0x35e>
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d017      	beq.n	800ada4 <__gethex+0x366>
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d109      	bne.n	800ad8c <__gethex+0x34e>
 800ad78:	f01a 0f02 	tst.w	sl, #2
 800ad7c:	d006      	beq.n	800ad8c <__gethex+0x34e>
 800ad7e:	f8d9 3000 	ldr.w	r3, [r9]
 800ad82:	ea4a 0a03 	orr.w	sl, sl, r3
 800ad86:	f01a 0f01 	tst.w	sl, #1
 800ad8a:	d10e      	bne.n	800adaa <__gethex+0x36c>
 800ad8c:	f047 0710 	orr.w	r7, r7, #16
 800ad90:	e033      	b.n	800adfa <__gethex+0x3bc>
 800ad92:	f04f 0a01 	mov.w	sl, #1
 800ad96:	e7d0      	b.n	800ad3a <__gethex+0x2fc>
 800ad98:	2701      	movs	r7, #1
 800ad9a:	e7e2      	b.n	800ad62 <__gethex+0x324>
 800ad9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad9e:	f1c3 0301 	rsb	r3, r3, #1
 800ada2:	9315      	str	r3, [sp, #84]	; 0x54
 800ada4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0f0      	beq.n	800ad8c <__gethex+0x34e>
 800adaa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800adae:	f105 0314 	add.w	r3, r5, #20
 800adb2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800adb6:	eb03 010a 	add.w	r1, r3, sl
 800adba:	f04f 0c00 	mov.w	ip, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adc8:	d01c      	beq.n	800ae04 <__gethex+0x3c6>
 800adca:	3201      	adds	r2, #1
 800adcc:	6002      	str	r2, [r0, #0]
 800adce:	2f02      	cmp	r7, #2
 800add0:	f105 0314 	add.w	r3, r5, #20
 800add4:	d138      	bne.n	800ae48 <__gethex+0x40a>
 800add6:	f8d8 2000 	ldr.w	r2, [r8]
 800adda:	3a01      	subs	r2, #1
 800addc:	42b2      	cmp	r2, r6
 800adde:	d10a      	bne.n	800adf6 <__gethex+0x3b8>
 800ade0:	1171      	asrs	r1, r6, #5
 800ade2:	2201      	movs	r2, #1
 800ade4:	f006 061f 	and.w	r6, r6, #31
 800ade8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adec:	fa02 f606 	lsl.w	r6, r2, r6
 800adf0:	421e      	tst	r6, r3
 800adf2:	bf18      	it	ne
 800adf4:	4617      	movne	r7, r2
 800adf6:	f047 0720 	orr.w	r7, r7, #32
 800adfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adfc:	601d      	str	r5, [r3, #0]
 800adfe:	9b06      	ldr	r3, [sp, #24]
 800ae00:	601c      	str	r4, [r3, #0]
 800ae02:	e6a4      	b.n	800ab4e <__gethex+0x110>
 800ae04:	4299      	cmp	r1, r3
 800ae06:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae0a:	d8d8      	bhi.n	800adbe <__gethex+0x380>
 800ae0c:	68ab      	ldr	r3, [r5, #8]
 800ae0e:	4599      	cmp	r9, r3
 800ae10:	db12      	blt.n	800ae38 <__gethex+0x3fa>
 800ae12:	6869      	ldr	r1, [r5, #4]
 800ae14:	9802      	ldr	r0, [sp, #8]
 800ae16:	3101      	adds	r1, #1
 800ae18:	f000 f91d 	bl	800b056 <_Balloc>
 800ae1c:	692a      	ldr	r2, [r5, #16]
 800ae1e:	3202      	adds	r2, #2
 800ae20:	f105 010c 	add.w	r1, r5, #12
 800ae24:	4683      	mov	fp, r0
 800ae26:	0092      	lsls	r2, r2, #2
 800ae28:	300c      	adds	r0, #12
 800ae2a:	f000 f909 	bl	800b040 <memcpy>
 800ae2e:	4629      	mov	r1, r5
 800ae30:	9802      	ldr	r0, [sp, #8]
 800ae32:	f000 f944 	bl	800b0be <_Bfree>
 800ae36:	465d      	mov	r5, fp
 800ae38:	692b      	ldr	r3, [r5, #16]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ae40:	612a      	str	r2, [r5, #16]
 800ae42:	2201      	movs	r2, #1
 800ae44:	615a      	str	r2, [r3, #20]
 800ae46:	e7c2      	b.n	800adce <__gethex+0x390>
 800ae48:	692a      	ldr	r2, [r5, #16]
 800ae4a:	454a      	cmp	r2, r9
 800ae4c:	dd0b      	ble.n	800ae66 <__gethex+0x428>
 800ae4e:	2101      	movs	r1, #1
 800ae50:	4628      	mov	r0, r5
 800ae52:	f7ff fda5 	bl	800a9a0 <rshift>
 800ae56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae5a:	3401      	adds	r4, #1
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	f6ff aed9 	blt.w	800ac14 <__gethex+0x1d6>
 800ae62:	2701      	movs	r7, #1
 800ae64:	e7c7      	b.n	800adf6 <__gethex+0x3b8>
 800ae66:	f016 061f 	ands.w	r6, r6, #31
 800ae6a:	d0fa      	beq.n	800ae62 <__gethex+0x424>
 800ae6c:	449a      	add	sl, r3
 800ae6e:	f1c6 0620 	rsb	r6, r6, #32
 800ae72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ae76:	f000 f9b2 	bl	800b1de <__hi0bits>
 800ae7a:	42b0      	cmp	r0, r6
 800ae7c:	dbe7      	blt.n	800ae4e <__gethex+0x410>
 800ae7e:	e7f0      	b.n	800ae62 <__gethex+0x424>

0800ae80 <L_shift>:
 800ae80:	f1c2 0208 	rsb	r2, r2, #8
 800ae84:	0092      	lsls	r2, r2, #2
 800ae86:	b570      	push	{r4, r5, r6, lr}
 800ae88:	f1c2 0620 	rsb	r6, r2, #32
 800ae8c:	6843      	ldr	r3, [r0, #4]
 800ae8e:	6804      	ldr	r4, [r0, #0]
 800ae90:	fa03 f506 	lsl.w	r5, r3, r6
 800ae94:	432c      	orrs	r4, r5
 800ae96:	40d3      	lsrs	r3, r2
 800ae98:	6004      	str	r4, [r0, #0]
 800ae9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae9e:	4288      	cmp	r0, r1
 800aea0:	d3f4      	bcc.n	800ae8c <L_shift+0xc>
 800aea2:	bd70      	pop	{r4, r5, r6, pc}

0800aea4 <__match>:
 800aea4:	b530      	push	{r4, r5, lr}
 800aea6:	6803      	ldr	r3, [r0, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeae:	b914      	cbnz	r4, 800aeb6 <__match+0x12>
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	bd30      	pop	{r4, r5, pc}
 800aeb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aebe:	2d19      	cmp	r5, #25
 800aec0:	bf98      	it	ls
 800aec2:	3220      	addls	r2, #32
 800aec4:	42a2      	cmp	r2, r4
 800aec6:	d0f0      	beq.n	800aeaa <__match+0x6>
 800aec8:	2000      	movs	r0, #0
 800aeca:	e7f3      	b.n	800aeb4 <__match+0x10>

0800aecc <__hexnan>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	680b      	ldr	r3, [r1, #0]
 800aed2:	6801      	ldr	r1, [r0, #0]
 800aed4:	115f      	asrs	r7, r3, #5
 800aed6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800aeda:	f013 031f 	ands.w	r3, r3, #31
 800aede:	b087      	sub	sp, #28
 800aee0:	bf18      	it	ne
 800aee2:	3704      	addne	r7, #4
 800aee4:	2500      	movs	r5, #0
 800aee6:	1f3e      	subs	r6, r7, #4
 800aee8:	4682      	mov	sl, r0
 800aeea:	4690      	mov	r8, r2
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	f847 5c04 	str.w	r5, [r7, #-4]
 800aef2:	46b1      	mov	r9, r6
 800aef4:	4634      	mov	r4, r6
 800aef6:	9502      	str	r5, [sp, #8]
 800aef8:	46ab      	mov	fp, r5
 800aefa:	784a      	ldrb	r2, [r1, #1]
 800aefc:	1c4b      	adds	r3, r1, #1
 800aefe:	9303      	str	r3, [sp, #12]
 800af00:	b342      	cbz	r2, 800af54 <__hexnan+0x88>
 800af02:	4610      	mov	r0, r2
 800af04:	9105      	str	r1, [sp, #20]
 800af06:	9204      	str	r2, [sp, #16]
 800af08:	f7ff fd84 	bl	800aa14 <__hexdig_fun>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d143      	bne.n	800af98 <__hexnan+0xcc>
 800af10:	9a04      	ldr	r2, [sp, #16]
 800af12:	9905      	ldr	r1, [sp, #20]
 800af14:	2a20      	cmp	r2, #32
 800af16:	d818      	bhi.n	800af4a <__hexnan+0x7e>
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	459b      	cmp	fp, r3
 800af1c:	dd13      	ble.n	800af46 <__hexnan+0x7a>
 800af1e:	454c      	cmp	r4, r9
 800af20:	d206      	bcs.n	800af30 <__hexnan+0x64>
 800af22:	2d07      	cmp	r5, #7
 800af24:	dc04      	bgt.n	800af30 <__hexnan+0x64>
 800af26:	462a      	mov	r2, r5
 800af28:	4649      	mov	r1, r9
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff ffa8 	bl	800ae80 <L_shift>
 800af30:	4544      	cmp	r4, r8
 800af32:	d944      	bls.n	800afbe <__hexnan+0xf2>
 800af34:	2300      	movs	r3, #0
 800af36:	f1a4 0904 	sub.w	r9, r4, #4
 800af3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af3e:	f8cd b008 	str.w	fp, [sp, #8]
 800af42:	464c      	mov	r4, r9
 800af44:	461d      	mov	r5, r3
 800af46:	9903      	ldr	r1, [sp, #12]
 800af48:	e7d7      	b.n	800aefa <__hexnan+0x2e>
 800af4a:	2a29      	cmp	r2, #41	; 0x29
 800af4c:	d14a      	bne.n	800afe4 <__hexnan+0x118>
 800af4e:	3102      	adds	r1, #2
 800af50:	f8ca 1000 	str.w	r1, [sl]
 800af54:	f1bb 0f00 	cmp.w	fp, #0
 800af58:	d044      	beq.n	800afe4 <__hexnan+0x118>
 800af5a:	454c      	cmp	r4, r9
 800af5c:	d206      	bcs.n	800af6c <__hexnan+0xa0>
 800af5e:	2d07      	cmp	r5, #7
 800af60:	dc04      	bgt.n	800af6c <__hexnan+0xa0>
 800af62:	462a      	mov	r2, r5
 800af64:	4649      	mov	r1, r9
 800af66:	4620      	mov	r0, r4
 800af68:	f7ff ff8a 	bl	800ae80 <L_shift>
 800af6c:	4544      	cmp	r4, r8
 800af6e:	d928      	bls.n	800afc2 <__hexnan+0xf6>
 800af70:	4643      	mov	r3, r8
 800af72:	f854 2b04 	ldr.w	r2, [r4], #4
 800af76:	f843 2b04 	str.w	r2, [r3], #4
 800af7a:	42a6      	cmp	r6, r4
 800af7c:	d2f9      	bcs.n	800af72 <__hexnan+0xa6>
 800af7e:	2200      	movs	r2, #0
 800af80:	f843 2b04 	str.w	r2, [r3], #4
 800af84:	429e      	cmp	r6, r3
 800af86:	d2fb      	bcs.n	800af80 <__hexnan+0xb4>
 800af88:	6833      	ldr	r3, [r6, #0]
 800af8a:	b91b      	cbnz	r3, 800af94 <__hexnan+0xc8>
 800af8c:	4546      	cmp	r6, r8
 800af8e:	d127      	bne.n	800afe0 <__hexnan+0x114>
 800af90:	2301      	movs	r3, #1
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	2005      	movs	r0, #5
 800af96:	e026      	b.n	800afe6 <__hexnan+0x11a>
 800af98:	3501      	adds	r5, #1
 800af9a:	2d08      	cmp	r5, #8
 800af9c:	f10b 0b01 	add.w	fp, fp, #1
 800afa0:	dd06      	ble.n	800afb0 <__hexnan+0xe4>
 800afa2:	4544      	cmp	r4, r8
 800afa4:	d9cf      	bls.n	800af46 <__hexnan+0x7a>
 800afa6:	2300      	movs	r3, #0
 800afa8:	f844 3c04 	str.w	r3, [r4, #-4]
 800afac:	2501      	movs	r5, #1
 800afae:	3c04      	subs	r4, #4
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	f000 000f 	and.w	r0, r0, #15
 800afb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afba:	6020      	str	r0, [r4, #0]
 800afbc:	e7c3      	b.n	800af46 <__hexnan+0x7a>
 800afbe:	2508      	movs	r5, #8
 800afc0:	e7c1      	b.n	800af46 <__hexnan+0x7a>
 800afc2:	9b01      	ldr	r3, [sp, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0df      	beq.n	800af88 <__hexnan+0xbc>
 800afc8:	f04f 32ff 	mov.w	r2, #4294967295
 800afcc:	f1c3 0320 	rsb	r3, r3, #32
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
 800afd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800afd8:	401a      	ands	r2, r3
 800afda:	f847 2c04 	str.w	r2, [r7, #-4]
 800afde:	e7d3      	b.n	800af88 <__hexnan+0xbc>
 800afe0:	3e04      	subs	r6, #4
 800afe2:	e7d1      	b.n	800af88 <__hexnan+0xbc>
 800afe4:	2004      	movs	r0, #4
 800afe6:	b007      	add	sp, #28
 800afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afec <__localeconv_l>:
 800afec:	30f0      	adds	r0, #240	; 0xf0
 800afee:	4770      	bx	lr

0800aff0 <_localeconv_r>:
 800aff0:	4b04      	ldr	r3, [pc, #16]	; (800b004 <_localeconv_r+0x14>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6a18      	ldr	r0, [r3, #32]
 800aff6:	4b04      	ldr	r3, [pc, #16]	; (800b008 <_localeconv_r+0x18>)
 800aff8:	2800      	cmp	r0, #0
 800affa:	bf08      	it	eq
 800affc:	4618      	moveq	r0, r3
 800affe:	30f0      	adds	r0, #240	; 0xf0
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000024 	.word	0x20000024
 800b008:	20000088 	.word	0x20000088

0800b00c <malloc>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	; (800b018 <malloc+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f000 bc7b 	b.w	800b90c <_malloc_r>
 800b016:	bf00      	nop
 800b018:	20000024 	.word	0x20000024

0800b01c <__ascii_mbtowc>:
 800b01c:	b082      	sub	sp, #8
 800b01e:	b901      	cbnz	r1, 800b022 <__ascii_mbtowc+0x6>
 800b020:	a901      	add	r1, sp, #4
 800b022:	b142      	cbz	r2, 800b036 <__ascii_mbtowc+0x1a>
 800b024:	b14b      	cbz	r3, 800b03a <__ascii_mbtowc+0x1e>
 800b026:	7813      	ldrb	r3, [r2, #0]
 800b028:	600b      	str	r3, [r1, #0]
 800b02a:	7812      	ldrb	r2, [r2, #0]
 800b02c:	1c10      	adds	r0, r2, #0
 800b02e:	bf18      	it	ne
 800b030:	2001      	movne	r0, #1
 800b032:	b002      	add	sp, #8
 800b034:	4770      	bx	lr
 800b036:	4610      	mov	r0, r2
 800b038:	e7fb      	b.n	800b032 <__ascii_mbtowc+0x16>
 800b03a:	f06f 0001 	mvn.w	r0, #1
 800b03e:	e7f8      	b.n	800b032 <__ascii_mbtowc+0x16>

0800b040 <memcpy>:
 800b040:	b510      	push	{r4, lr}
 800b042:	1e43      	subs	r3, r0, #1
 800b044:	440a      	add	r2, r1
 800b046:	4291      	cmp	r1, r2
 800b048:	d100      	bne.n	800b04c <memcpy+0xc>
 800b04a:	bd10      	pop	{r4, pc}
 800b04c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b050:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b054:	e7f7      	b.n	800b046 <memcpy+0x6>

0800b056 <_Balloc>:
 800b056:	b570      	push	{r4, r5, r6, lr}
 800b058:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b05a:	4604      	mov	r4, r0
 800b05c:	460e      	mov	r6, r1
 800b05e:	b93d      	cbnz	r5, 800b070 <_Balloc+0x1a>
 800b060:	2010      	movs	r0, #16
 800b062:	f7ff ffd3 	bl	800b00c <malloc>
 800b066:	6260      	str	r0, [r4, #36]	; 0x24
 800b068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b06c:	6005      	str	r5, [r0, #0]
 800b06e:	60c5      	str	r5, [r0, #12]
 800b070:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b072:	68eb      	ldr	r3, [r5, #12]
 800b074:	b183      	cbz	r3, 800b098 <_Balloc+0x42>
 800b076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b07e:	b9b8      	cbnz	r0, 800b0b0 <_Balloc+0x5a>
 800b080:	2101      	movs	r1, #1
 800b082:	fa01 f506 	lsl.w	r5, r1, r6
 800b086:	1d6a      	adds	r2, r5, #5
 800b088:	0092      	lsls	r2, r2, #2
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fbe1 	bl	800b852 <_calloc_r>
 800b090:	b160      	cbz	r0, 800b0ac <_Balloc+0x56>
 800b092:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b096:	e00e      	b.n	800b0b6 <_Balloc+0x60>
 800b098:	2221      	movs	r2, #33	; 0x21
 800b09a:	2104      	movs	r1, #4
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fbd8 	bl	800b852 <_calloc_r>
 800b0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a4:	60e8      	str	r0, [r5, #12]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1e4      	bne.n	800b076 <_Balloc+0x20>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	6802      	ldr	r2, [r0, #0]
 800b0b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0bc:	e7f7      	b.n	800b0ae <_Balloc+0x58>

0800b0be <_Bfree>:
 800b0be:	b570      	push	{r4, r5, r6, lr}
 800b0c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	b93c      	cbnz	r4, 800b0d8 <_Bfree+0x1a>
 800b0c8:	2010      	movs	r0, #16
 800b0ca:	f7ff ff9f 	bl	800b00c <malloc>
 800b0ce:	6270      	str	r0, [r6, #36]	; 0x24
 800b0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d4:	6004      	str	r4, [r0, #0]
 800b0d6:	60c4      	str	r4, [r0, #12]
 800b0d8:	b13d      	cbz	r5, 800b0ea <_Bfree+0x2c>
 800b0da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0dc:	686a      	ldr	r2, [r5, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e4:	6029      	str	r1, [r5, #0]
 800b0e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}

0800b0ec <__multadd>:
 800b0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f0:	690d      	ldr	r5, [r1, #16]
 800b0f2:	461f      	mov	r7, r3
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f101 0c14 	add.w	ip, r1, #20
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f8dc 0000 	ldr.w	r0, [ip]
 800b102:	b281      	uxth	r1, r0
 800b104:	fb02 7101 	mla	r1, r2, r1, r7
 800b108:	0c0f      	lsrs	r7, r1, #16
 800b10a:	0c00      	lsrs	r0, r0, #16
 800b10c:	fb02 7000 	mla	r0, r2, r0, r7
 800b110:	b289      	uxth	r1, r1
 800b112:	3301      	adds	r3, #1
 800b114:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b118:	429d      	cmp	r5, r3
 800b11a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b11e:	f84c 1b04 	str.w	r1, [ip], #4
 800b122:	dcec      	bgt.n	800b0fe <__multadd+0x12>
 800b124:	b1d7      	cbz	r7, 800b15c <__multadd+0x70>
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dc12      	bgt.n	800b152 <__multadd+0x66>
 800b12c:	6861      	ldr	r1, [r4, #4]
 800b12e:	4630      	mov	r0, r6
 800b130:	3101      	adds	r1, #1
 800b132:	f7ff ff90 	bl	800b056 <_Balloc>
 800b136:	6922      	ldr	r2, [r4, #16]
 800b138:	3202      	adds	r2, #2
 800b13a:	f104 010c 	add.w	r1, r4, #12
 800b13e:	4680      	mov	r8, r0
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	300c      	adds	r0, #12
 800b144:	f7ff ff7c 	bl	800b040 <memcpy>
 800b148:	4621      	mov	r1, r4
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7ff ffb7 	bl	800b0be <_Bfree>
 800b150:	4644      	mov	r4, r8
 800b152:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b156:	3501      	adds	r5, #1
 800b158:	615f      	str	r7, [r3, #20]
 800b15a:	6125      	str	r5, [r4, #16]
 800b15c:	4620      	mov	r0, r4
 800b15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b162 <__s2b>:
 800b162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b166:	460c      	mov	r4, r1
 800b168:	4615      	mov	r5, r2
 800b16a:	461f      	mov	r7, r3
 800b16c:	2209      	movs	r2, #9
 800b16e:	3308      	adds	r3, #8
 800b170:	4606      	mov	r6, r0
 800b172:	fb93 f3f2 	sdiv	r3, r3, r2
 800b176:	2100      	movs	r1, #0
 800b178:	2201      	movs	r2, #1
 800b17a:	429a      	cmp	r2, r3
 800b17c:	db20      	blt.n	800b1c0 <__s2b+0x5e>
 800b17e:	4630      	mov	r0, r6
 800b180:	f7ff ff69 	bl	800b056 <_Balloc>
 800b184:	9b08      	ldr	r3, [sp, #32]
 800b186:	6143      	str	r3, [r0, #20]
 800b188:	2d09      	cmp	r5, #9
 800b18a:	f04f 0301 	mov.w	r3, #1
 800b18e:	6103      	str	r3, [r0, #16]
 800b190:	dd19      	ble.n	800b1c6 <__s2b+0x64>
 800b192:	f104 0809 	add.w	r8, r4, #9
 800b196:	46c1      	mov	r9, r8
 800b198:	442c      	add	r4, r5
 800b19a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b19e:	4601      	mov	r1, r0
 800b1a0:	3b30      	subs	r3, #48	; 0x30
 800b1a2:	220a      	movs	r2, #10
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff ffa1 	bl	800b0ec <__multadd>
 800b1aa:	45a1      	cmp	r9, r4
 800b1ac:	d1f5      	bne.n	800b19a <__s2b+0x38>
 800b1ae:	eb08 0405 	add.w	r4, r8, r5
 800b1b2:	3c08      	subs	r4, #8
 800b1b4:	1b2d      	subs	r5, r5, r4
 800b1b6:	1963      	adds	r3, r4, r5
 800b1b8:	42bb      	cmp	r3, r7
 800b1ba:	db07      	blt.n	800b1cc <__s2b+0x6a>
 800b1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1c0:	0052      	lsls	r2, r2, #1
 800b1c2:	3101      	adds	r1, #1
 800b1c4:	e7d9      	b.n	800b17a <__s2b+0x18>
 800b1c6:	340a      	adds	r4, #10
 800b1c8:	2509      	movs	r5, #9
 800b1ca:	e7f3      	b.n	800b1b4 <__s2b+0x52>
 800b1cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1d0:	4601      	mov	r1, r0
 800b1d2:	3b30      	subs	r3, #48	; 0x30
 800b1d4:	220a      	movs	r2, #10
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff ff88 	bl	800b0ec <__multadd>
 800b1dc:	e7eb      	b.n	800b1b6 <__s2b+0x54>

0800b1de <__hi0bits>:
 800b1de:	0c02      	lsrs	r2, r0, #16
 800b1e0:	0412      	lsls	r2, r2, #16
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	b9b2      	cbnz	r2, 800b214 <__hi0bits+0x36>
 800b1e6:	0403      	lsls	r3, r0, #16
 800b1e8:	2010      	movs	r0, #16
 800b1ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b1ee:	bf04      	itt	eq
 800b1f0:	021b      	lsleq	r3, r3, #8
 800b1f2:	3008      	addeq	r0, #8
 800b1f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b1f8:	bf04      	itt	eq
 800b1fa:	011b      	lsleq	r3, r3, #4
 800b1fc:	3004      	addeq	r0, #4
 800b1fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b202:	bf04      	itt	eq
 800b204:	009b      	lsleq	r3, r3, #2
 800b206:	3002      	addeq	r0, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	db06      	blt.n	800b21a <__hi0bits+0x3c>
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	d503      	bpl.n	800b218 <__hi0bits+0x3a>
 800b210:	3001      	adds	r0, #1
 800b212:	4770      	bx	lr
 800b214:	2000      	movs	r0, #0
 800b216:	e7e8      	b.n	800b1ea <__hi0bits+0xc>
 800b218:	2020      	movs	r0, #32
 800b21a:	4770      	bx	lr

0800b21c <__lo0bits>:
 800b21c:	6803      	ldr	r3, [r0, #0]
 800b21e:	f013 0207 	ands.w	r2, r3, #7
 800b222:	4601      	mov	r1, r0
 800b224:	d00b      	beq.n	800b23e <__lo0bits+0x22>
 800b226:	07da      	lsls	r2, r3, #31
 800b228:	d423      	bmi.n	800b272 <__lo0bits+0x56>
 800b22a:	0798      	lsls	r0, r3, #30
 800b22c:	bf49      	itett	mi
 800b22e:	085b      	lsrmi	r3, r3, #1
 800b230:	089b      	lsrpl	r3, r3, #2
 800b232:	2001      	movmi	r0, #1
 800b234:	600b      	strmi	r3, [r1, #0]
 800b236:	bf5c      	itt	pl
 800b238:	600b      	strpl	r3, [r1, #0]
 800b23a:	2002      	movpl	r0, #2
 800b23c:	4770      	bx	lr
 800b23e:	b298      	uxth	r0, r3
 800b240:	b9a8      	cbnz	r0, 800b26e <__lo0bits+0x52>
 800b242:	0c1b      	lsrs	r3, r3, #16
 800b244:	2010      	movs	r0, #16
 800b246:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b24a:	bf04      	itt	eq
 800b24c:	0a1b      	lsreq	r3, r3, #8
 800b24e:	3008      	addeq	r0, #8
 800b250:	071a      	lsls	r2, r3, #28
 800b252:	bf04      	itt	eq
 800b254:	091b      	lsreq	r3, r3, #4
 800b256:	3004      	addeq	r0, #4
 800b258:	079a      	lsls	r2, r3, #30
 800b25a:	bf04      	itt	eq
 800b25c:	089b      	lsreq	r3, r3, #2
 800b25e:	3002      	addeq	r0, #2
 800b260:	07da      	lsls	r2, r3, #31
 800b262:	d402      	bmi.n	800b26a <__lo0bits+0x4e>
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	d006      	beq.n	800b276 <__lo0bits+0x5a>
 800b268:	3001      	adds	r0, #1
 800b26a:	600b      	str	r3, [r1, #0]
 800b26c:	4770      	bx	lr
 800b26e:	4610      	mov	r0, r2
 800b270:	e7e9      	b.n	800b246 <__lo0bits+0x2a>
 800b272:	2000      	movs	r0, #0
 800b274:	4770      	bx	lr
 800b276:	2020      	movs	r0, #32
 800b278:	4770      	bx	lr

0800b27a <__i2b>:
 800b27a:	b510      	push	{r4, lr}
 800b27c:	460c      	mov	r4, r1
 800b27e:	2101      	movs	r1, #1
 800b280:	f7ff fee9 	bl	800b056 <_Balloc>
 800b284:	2201      	movs	r2, #1
 800b286:	6144      	str	r4, [r0, #20]
 800b288:	6102      	str	r2, [r0, #16]
 800b28a:	bd10      	pop	{r4, pc}

0800b28c <__multiply>:
 800b28c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	4614      	mov	r4, r2
 800b292:	690a      	ldr	r2, [r1, #16]
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	429a      	cmp	r2, r3
 800b298:	bfb8      	it	lt
 800b29a:	460b      	movlt	r3, r1
 800b29c:	4688      	mov	r8, r1
 800b29e:	bfbc      	itt	lt
 800b2a0:	46a0      	movlt	r8, r4
 800b2a2:	461c      	movlt	r4, r3
 800b2a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2b4:	eb07 0609 	add.w	r6, r7, r9
 800b2b8:	42b3      	cmp	r3, r6
 800b2ba:	bfb8      	it	lt
 800b2bc:	3101      	addlt	r1, #1
 800b2be:	f7ff feca 	bl	800b056 <_Balloc>
 800b2c2:	f100 0514 	add.w	r5, r0, #20
 800b2c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	4573      	cmp	r3, lr
 800b2d0:	d316      	bcc.n	800b300 <__multiply+0x74>
 800b2d2:	f104 0214 	add.w	r2, r4, #20
 800b2d6:	f108 0114 	add.w	r1, r8, #20
 800b2da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b2de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	9b00      	ldr	r3, [sp, #0]
 800b2e6:	9201      	str	r2, [sp, #4]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d80c      	bhi.n	800b306 <__multiply+0x7a>
 800b2ec:	2e00      	cmp	r6, #0
 800b2ee:	dd03      	ble.n	800b2f8 <__multiply+0x6c>
 800b2f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d05d      	beq.n	800b3b4 <__multiply+0x128>
 800b2f8:	6106      	str	r6, [r0, #16]
 800b2fa:	b003      	add	sp, #12
 800b2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b300:	f843 2b04 	str.w	r2, [r3], #4
 800b304:	e7e3      	b.n	800b2ce <__multiply+0x42>
 800b306:	f8b2 b000 	ldrh.w	fp, [r2]
 800b30a:	f1bb 0f00 	cmp.w	fp, #0
 800b30e:	d023      	beq.n	800b358 <__multiply+0xcc>
 800b310:	4689      	mov	r9, r1
 800b312:	46ac      	mov	ip, r5
 800b314:	f04f 0800 	mov.w	r8, #0
 800b318:	f859 4b04 	ldr.w	r4, [r9], #4
 800b31c:	f8dc a000 	ldr.w	sl, [ip]
 800b320:	b2a3      	uxth	r3, r4
 800b322:	fa1f fa8a 	uxth.w	sl, sl
 800b326:	fb0b a303 	mla	r3, fp, r3, sl
 800b32a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b32e:	f8dc 4000 	ldr.w	r4, [ip]
 800b332:	4443      	add	r3, r8
 800b334:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b338:	fb0b 840a 	mla	r4, fp, sl, r8
 800b33c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b340:	46e2      	mov	sl, ip
 800b342:	b29b      	uxth	r3, r3
 800b344:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b348:	454f      	cmp	r7, r9
 800b34a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b34e:	f84a 3b04 	str.w	r3, [sl], #4
 800b352:	d82b      	bhi.n	800b3ac <__multiply+0x120>
 800b354:	f8cc 8004 	str.w	r8, [ip, #4]
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b35e:	3204      	adds	r2, #4
 800b360:	f1ba 0f00 	cmp.w	sl, #0
 800b364:	d020      	beq.n	800b3a8 <__multiply+0x11c>
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	4689      	mov	r9, r1
 800b36a:	46a8      	mov	r8, r5
 800b36c:	f04f 0b00 	mov.w	fp, #0
 800b370:	f8b9 c000 	ldrh.w	ip, [r9]
 800b374:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b378:	fb0a 440c 	mla	r4, sl, ip, r4
 800b37c:	445c      	add	r4, fp
 800b37e:	46c4      	mov	ip, r8
 800b380:	b29b      	uxth	r3, r3
 800b382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b386:	f84c 3b04 	str.w	r3, [ip], #4
 800b38a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b38e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b392:	0c1b      	lsrs	r3, r3, #16
 800b394:	fb0a b303 	mla	r3, sl, r3, fp
 800b398:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b39c:	454f      	cmp	r7, r9
 800b39e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b3a2:	d805      	bhi.n	800b3b0 <__multiply+0x124>
 800b3a4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b3a8:	3504      	adds	r5, #4
 800b3aa:	e79b      	b.n	800b2e4 <__multiply+0x58>
 800b3ac:	46d4      	mov	ip, sl
 800b3ae:	e7b3      	b.n	800b318 <__multiply+0x8c>
 800b3b0:	46e0      	mov	r8, ip
 800b3b2:	e7dd      	b.n	800b370 <__multiply+0xe4>
 800b3b4:	3e01      	subs	r6, #1
 800b3b6:	e799      	b.n	800b2ec <__multiply+0x60>

0800b3b8 <__pow5mult>:
 800b3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3bc:	4615      	mov	r5, r2
 800b3be:	f012 0203 	ands.w	r2, r2, #3
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	d007      	beq.n	800b3d8 <__pow5mult+0x20>
 800b3c8:	3a01      	subs	r2, #1
 800b3ca:	4c21      	ldr	r4, [pc, #132]	; (800b450 <__pow5mult+0x98>)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3d2:	f7ff fe8b 	bl	800b0ec <__multadd>
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	10ad      	asrs	r5, r5, #2
 800b3da:	d035      	beq.n	800b448 <__pow5mult+0x90>
 800b3dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3de:	b93c      	cbnz	r4, 800b3f0 <__pow5mult+0x38>
 800b3e0:	2010      	movs	r0, #16
 800b3e2:	f7ff fe13 	bl	800b00c <malloc>
 800b3e6:	6270      	str	r0, [r6, #36]	; 0x24
 800b3e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3ec:	6004      	str	r4, [r0, #0]
 800b3ee:	60c4      	str	r4, [r0, #12]
 800b3f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3f8:	b94c      	cbnz	r4, 800b40e <__pow5mult+0x56>
 800b3fa:	f240 2171 	movw	r1, #625	; 0x271
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7ff ff3b 	bl	800b27a <__i2b>
 800b404:	2300      	movs	r3, #0
 800b406:	f8c8 0008 	str.w	r0, [r8, #8]
 800b40a:	4604      	mov	r4, r0
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	f04f 0800 	mov.w	r8, #0
 800b412:	07eb      	lsls	r3, r5, #31
 800b414:	d50a      	bpl.n	800b42c <__pow5mult+0x74>
 800b416:	4639      	mov	r1, r7
 800b418:	4622      	mov	r2, r4
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7ff ff36 	bl	800b28c <__multiply>
 800b420:	4639      	mov	r1, r7
 800b422:	4681      	mov	r9, r0
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff fe4a 	bl	800b0be <_Bfree>
 800b42a:	464f      	mov	r7, r9
 800b42c:	106d      	asrs	r5, r5, #1
 800b42e:	d00b      	beq.n	800b448 <__pow5mult+0x90>
 800b430:	6820      	ldr	r0, [r4, #0]
 800b432:	b938      	cbnz	r0, 800b444 <__pow5mult+0x8c>
 800b434:	4622      	mov	r2, r4
 800b436:	4621      	mov	r1, r4
 800b438:	4630      	mov	r0, r6
 800b43a:	f7ff ff27 	bl	800b28c <__multiply>
 800b43e:	6020      	str	r0, [r4, #0]
 800b440:	f8c0 8000 	str.w	r8, [r0]
 800b444:	4604      	mov	r4, r0
 800b446:	e7e4      	b.n	800b412 <__pow5mult+0x5a>
 800b448:	4638      	mov	r0, r7
 800b44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44e:	bf00      	nop
 800b450:	0800d408 	.word	0x0800d408

0800b454 <__lshift>:
 800b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	6849      	ldr	r1, [r1, #4]
 800b462:	eb0a 0903 	add.w	r9, sl, r3
 800b466:	68a3      	ldr	r3, [r4, #8]
 800b468:	4607      	mov	r7, r0
 800b46a:	4616      	mov	r6, r2
 800b46c:	f109 0501 	add.w	r5, r9, #1
 800b470:	42ab      	cmp	r3, r5
 800b472:	db32      	blt.n	800b4da <__lshift+0x86>
 800b474:	4638      	mov	r0, r7
 800b476:	f7ff fdee 	bl	800b056 <_Balloc>
 800b47a:	2300      	movs	r3, #0
 800b47c:	4680      	mov	r8, r0
 800b47e:	f100 0114 	add.w	r1, r0, #20
 800b482:	461a      	mov	r2, r3
 800b484:	4553      	cmp	r3, sl
 800b486:	db2b      	blt.n	800b4e0 <__lshift+0x8c>
 800b488:	6920      	ldr	r0, [r4, #16]
 800b48a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b48e:	f104 0314 	add.w	r3, r4, #20
 800b492:	f016 021f 	ands.w	r2, r6, #31
 800b496:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b49a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b49e:	d025      	beq.n	800b4ec <__lshift+0x98>
 800b4a0:	f1c2 0e20 	rsb	lr, r2, #32
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	681e      	ldr	r6, [r3, #0]
 800b4a8:	468a      	mov	sl, r1
 800b4aa:	4096      	lsls	r6, r2
 800b4ac:	4330      	orrs	r0, r6
 800b4ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b4b2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b4b6:	459c      	cmp	ip, r3
 800b4b8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b4bc:	d814      	bhi.n	800b4e8 <__lshift+0x94>
 800b4be:	6048      	str	r0, [r1, #4]
 800b4c0:	b108      	cbz	r0, 800b4c6 <__lshift+0x72>
 800b4c2:	f109 0502 	add.w	r5, r9, #2
 800b4c6:	3d01      	subs	r5, #1
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f8c8 5010 	str.w	r5, [r8, #16]
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	f7ff fdf5 	bl	800b0be <_Bfree>
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4da:	3101      	adds	r1, #1
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	e7c7      	b.n	800b470 <__lshift+0x1c>
 800b4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	e7cd      	b.n	800b484 <__lshift+0x30>
 800b4e8:	4651      	mov	r1, sl
 800b4ea:	e7dc      	b.n	800b4a6 <__lshift+0x52>
 800b4ec:	3904      	subs	r1, #4
 800b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f6:	459c      	cmp	ip, r3
 800b4f8:	d8f9      	bhi.n	800b4ee <__lshift+0x9a>
 800b4fa:	e7e4      	b.n	800b4c6 <__lshift+0x72>

0800b4fc <__mcmp>:
 800b4fc:	6903      	ldr	r3, [r0, #16]
 800b4fe:	690a      	ldr	r2, [r1, #16]
 800b500:	1a9b      	subs	r3, r3, r2
 800b502:	b530      	push	{r4, r5, lr}
 800b504:	d10c      	bne.n	800b520 <__mcmp+0x24>
 800b506:	0092      	lsls	r2, r2, #2
 800b508:	3014      	adds	r0, #20
 800b50a:	3114      	adds	r1, #20
 800b50c:	1884      	adds	r4, r0, r2
 800b50e:	4411      	add	r1, r2
 800b510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b518:	4295      	cmp	r5, r2
 800b51a:	d003      	beq.n	800b524 <__mcmp+0x28>
 800b51c:	d305      	bcc.n	800b52a <__mcmp+0x2e>
 800b51e:	2301      	movs	r3, #1
 800b520:	4618      	mov	r0, r3
 800b522:	bd30      	pop	{r4, r5, pc}
 800b524:	42a0      	cmp	r0, r4
 800b526:	d3f3      	bcc.n	800b510 <__mcmp+0x14>
 800b528:	e7fa      	b.n	800b520 <__mcmp+0x24>
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
 800b52e:	e7f7      	b.n	800b520 <__mcmp+0x24>

0800b530 <__mdiff>:
 800b530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	460d      	mov	r5, r1
 800b536:	4607      	mov	r7, r0
 800b538:	4611      	mov	r1, r2
 800b53a:	4628      	mov	r0, r5
 800b53c:	4614      	mov	r4, r2
 800b53e:	f7ff ffdd 	bl	800b4fc <__mcmp>
 800b542:	1e06      	subs	r6, r0, #0
 800b544:	d108      	bne.n	800b558 <__mdiff+0x28>
 800b546:	4631      	mov	r1, r6
 800b548:	4638      	mov	r0, r7
 800b54a:	f7ff fd84 	bl	800b056 <_Balloc>
 800b54e:	2301      	movs	r3, #1
 800b550:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b558:	bfa4      	itt	ge
 800b55a:	4623      	movge	r3, r4
 800b55c:	462c      	movge	r4, r5
 800b55e:	4638      	mov	r0, r7
 800b560:	6861      	ldr	r1, [r4, #4]
 800b562:	bfa6      	itte	ge
 800b564:	461d      	movge	r5, r3
 800b566:	2600      	movge	r6, #0
 800b568:	2601      	movlt	r6, #1
 800b56a:	f7ff fd74 	bl	800b056 <_Balloc>
 800b56e:	692b      	ldr	r3, [r5, #16]
 800b570:	60c6      	str	r6, [r0, #12]
 800b572:	6926      	ldr	r6, [r4, #16]
 800b574:	f105 0914 	add.w	r9, r5, #20
 800b578:	f104 0214 	add.w	r2, r4, #20
 800b57c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b580:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b584:	f100 0514 	add.w	r5, r0, #20
 800b588:	f04f 0e00 	mov.w	lr, #0
 800b58c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b590:	f859 4b04 	ldr.w	r4, [r9], #4
 800b594:	fa1e f18a 	uxtah	r1, lr, sl
 800b598:	b2a3      	uxth	r3, r4
 800b59a:	1ac9      	subs	r1, r1, r3
 800b59c:	0c23      	lsrs	r3, r4, #16
 800b59e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b5a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b5a6:	b289      	uxth	r1, r1
 800b5a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b5ac:	45c8      	cmp	r8, r9
 800b5ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b5b2:	4694      	mov	ip, r2
 800b5b4:	f845 3b04 	str.w	r3, [r5], #4
 800b5b8:	d8e8      	bhi.n	800b58c <__mdiff+0x5c>
 800b5ba:	45bc      	cmp	ip, r7
 800b5bc:	d304      	bcc.n	800b5c8 <__mdiff+0x98>
 800b5be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b5c2:	b183      	cbz	r3, 800b5e6 <__mdiff+0xb6>
 800b5c4:	6106      	str	r6, [r0, #16]
 800b5c6:	e7c5      	b.n	800b554 <__mdiff+0x24>
 800b5c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b5cc:	fa1e f381 	uxtah	r3, lr, r1
 800b5d0:	141a      	asrs	r2, r3, #16
 800b5d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b5e0:	f845 3b04 	str.w	r3, [r5], #4
 800b5e4:	e7e9      	b.n	800b5ba <__mdiff+0x8a>
 800b5e6:	3e01      	subs	r6, #1
 800b5e8:	e7e9      	b.n	800b5be <__mdiff+0x8e>
	...

0800b5ec <__ulp>:
 800b5ec:	4b12      	ldr	r3, [pc, #72]	; (800b638 <__ulp+0x4c>)
 800b5ee:	ee10 2a90 	vmov	r2, s1
 800b5f2:	401a      	ands	r2, r3
 800b5f4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dd04      	ble.n	800b606 <__ulp+0x1a>
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4619      	mov	r1, r3
 800b600:	ec41 0b10 	vmov	d0, r0, r1
 800b604:	4770      	bx	lr
 800b606:	425b      	negs	r3, r3
 800b608:	151b      	asrs	r3, r3, #20
 800b60a:	2b13      	cmp	r3, #19
 800b60c:	f04f 0000 	mov.w	r0, #0
 800b610:	f04f 0100 	mov.w	r1, #0
 800b614:	dc04      	bgt.n	800b620 <__ulp+0x34>
 800b616:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b61a:	fa42 f103 	asr.w	r1, r2, r3
 800b61e:	e7ef      	b.n	800b600 <__ulp+0x14>
 800b620:	3b14      	subs	r3, #20
 800b622:	2b1e      	cmp	r3, #30
 800b624:	f04f 0201 	mov.w	r2, #1
 800b628:	bfda      	itte	le
 800b62a:	f1c3 031f 	rsble	r3, r3, #31
 800b62e:	fa02 f303 	lslle.w	r3, r2, r3
 800b632:	4613      	movgt	r3, r2
 800b634:	4618      	mov	r0, r3
 800b636:	e7e3      	b.n	800b600 <__ulp+0x14>
 800b638:	7ff00000 	.word	0x7ff00000

0800b63c <__b2d>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	6905      	ldr	r5, [r0, #16]
 800b640:	f100 0714 	add.w	r7, r0, #20
 800b644:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b648:	1f2e      	subs	r6, r5, #4
 800b64a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b64e:	4620      	mov	r0, r4
 800b650:	f7ff fdc5 	bl	800b1de <__hi0bits>
 800b654:	f1c0 0320 	rsb	r3, r0, #32
 800b658:	280a      	cmp	r0, #10
 800b65a:	600b      	str	r3, [r1, #0]
 800b65c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b6d4 <__b2d+0x98>
 800b660:	dc14      	bgt.n	800b68c <__b2d+0x50>
 800b662:	f1c0 0e0b 	rsb	lr, r0, #11
 800b666:	fa24 f10e 	lsr.w	r1, r4, lr
 800b66a:	42b7      	cmp	r7, r6
 800b66c:	ea41 030c 	orr.w	r3, r1, ip
 800b670:	bf34      	ite	cc
 800b672:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b676:	2100      	movcs	r1, #0
 800b678:	3015      	adds	r0, #21
 800b67a:	fa04 f000 	lsl.w	r0, r4, r0
 800b67e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b682:	ea40 0201 	orr.w	r2, r0, r1
 800b686:	ec43 2b10 	vmov	d0, r2, r3
 800b68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b68c:	42b7      	cmp	r7, r6
 800b68e:	bf3a      	itte	cc
 800b690:	f1a5 0608 	subcc.w	r6, r5, #8
 800b694:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b698:	2100      	movcs	r1, #0
 800b69a:	380b      	subs	r0, #11
 800b69c:	d015      	beq.n	800b6ca <__b2d+0x8e>
 800b69e:	4084      	lsls	r4, r0
 800b6a0:	f1c0 0520 	rsb	r5, r0, #32
 800b6a4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b6a8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b6ac:	42be      	cmp	r6, r7
 800b6ae:	fa21 fc05 	lsr.w	ip, r1, r5
 800b6b2:	ea44 030c 	orr.w	r3, r4, ip
 800b6b6:	bf8c      	ite	hi
 800b6b8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b6bc:	2400      	movls	r4, #0
 800b6be:	fa01 f000 	lsl.w	r0, r1, r0
 800b6c2:	40ec      	lsrs	r4, r5
 800b6c4:	ea40 0204 	orr.w	r2, r0, r4
 800b6c8:	e7dd      	b.n	800b686 <__b2d+0x4a>
 800b6ca:	ea44 030c 	orr.w	r3, r4, ip
 800b6ce:	460a      	mov	r2, r1
 800b6d0:	e7d9      	b.n	800b686 <__b2d+0x4a>
 800b6d2:	bf00      	nop
 800b6d4:	3ff00000 	.word	0x3ff00000

0800b6d8 <__d2b>:
 800b6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6dc:	460e      	mov	r6, r1
 800b6de:	2101      	movs	r1, #1
 800b6e0:	ec59 8b10 	vmov	r8, r9, d0
 800b6e4:	4615      	mov	r5, r2
 800b6e6:	f7ff fcb6 	bl	800b056 <_Balloc>
 800b6ea:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6f4:	bb34      	cbnz	r4, 800b744 <__d2b+0x6c>
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b6fc:	d027      	beq.n	800b74e <__d2b+0x76>
 800b6fe:	a802      	add	r0, sp, #8
 800b700:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b704:	f7ff fd8a 	bl	800b21c <__lo0bits>
 800b708:	9900      	ldr	r1, [sp, #0]
 800b70a:	b1f0      	cbz	r0, 800b74a <__d2b+0x72>
 800b70c:	9a01      	ldr	r2, [sp, #4]
 800b70e:	f1c0 0320 	rsb	r3, r0, #32
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	430b      	orrs	r3, r1
 800b718:	40c2      	lsrs	r2, r0
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	9201      	str	r2, [sp, #4]
 800b71e:	9b01      	ldr	r3, [sp, #4]
 800b720:	61bb      	str	r3, [r7, #24]
 800b722:	2b00      	cmp	r3, #0
 800b724:	bf14      	ite	ne
 800b726:	2102      	movne	r1, #2
 800b728:	2101      	moveq	r1, #1
 800b72a:	6139      	str	r1, [r7, #16]
 800b72c:	b1c4      	cbz	r4, 800b760 <__d2b+0x88>
 800b72e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b732:	4404      	add	r4, r0
 800b734:	6034      	str	r4, [r6, #0]
 800b736:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b73a:	6028      	str	r0, [r5, #0]
 800b73c:	4638      	mov	r0, r7
 800b73e:	b003      	add	sp, #12
 800b740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b748:	e7d5      	b.n	800b6f6 <__d2b+0x1e>
 800b74a:	6179      	str	r1, [r7, #20]
 800b74c:	e7e7      	b.n	800b71e <__d2b+0x46>
 800b74e:	a801      	add	r0, sp, #4
 800b750:	f7ff fd64 	bl	800b21c <__lo0bits>
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	2101      	movs	r1, #1
 800b75a:	6139      	str	r1, [r7, #16]
 800b75c:	3020      	adds	r0, #32
 800b75e:	e7e5      	b.n	800b72c <__d2b+0x54>
 800b760:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b764:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b768:	6030      	str	r0, [r6, #0]
 800b76a:	6918      	ldr	r0, [r3, #16]
 800b76c:	f7ff fd37 	bl	800b1de <__hi0bits>
 800b770:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b774:	e7e1      	b.n	800b73a <__d2b+0x62>

0800b776 <__ratio>:
 800b776:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77a:	4688      	mov	r8, r1
 800b77c:	4669      	mov	r1, sp
 800b77e:	4681      	mov	r9, r0
 800b780:	f7ff ff5c 	bl	800b63c <__b2d>
 800b784:	a901      	add	r1, sp, #4
 800b786:	4640      	mov	r0, r8
 800b788:	ec57 6b10 	vmov	r6, r7, d0
 800b78c:	f7ff ff56 	bl	800b63c <__b2d>
 800b790:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b794:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b798:	eba3 0c02 	sub.w	ip, r3, r2
 800b79c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b7a0:	1a9b      	subs	r3, r3, r2
 800b7a2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b7a6:	ec5b ab10 	vmov	sl, fp, d0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bfce      	itee	gt
 800b7ae:	463a      	movgt	r2, r7
 800b7b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7b4:	465a      	movle	r2, fp
 800b7b6:	4659      	mov	r1, fp
 800b7b8:	463d      	mov	r5, r7
 800b7ba:	bfd4      	ite	le
 800b7bc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b7c0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	ee10 2a10 	vmov	r2, s0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	f7f5 f83d 	bl	800084c <__aeabi_ddiv>
 800b7d2:	ec41 0b10 	vmov	d0, r0, r1
 800b7d6:	b003      	add	sp, #12
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7dc <__copybits>:
 800b7dc:	3901      	subs	r1, #1
 800b7de:	b510      	push	{r4, lr}
 800b7e0:	1149      	asrs	r1, r1, #5
 800b7e2:	6914      	ldr	r4, [r2, #16]
 800b7e4:	3101      	adds	r1, #1
 800b7e6:	f102 0314 	add.w	r3, r2, #20
 800b7ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7f2:	42a3      	cmp	r3, r4
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	d303      	bcc.n	800b800 <__copybits+0x24>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	428a      	cmp	r2, r1
 800b7fc:	d305      	bcc.n	800b80a <__copybits+0x2e>
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	f853 2b04 	ldr.w	r2, [r3], #4
 800b804:	f840 2b04 	str.w	r2, [r0], #4
 800b808:	e7f3      	b.n	800b7f2 <__copybits+0x16>
 800b80a:	f842 3b04 	str.w	r3, [r2], #4
 800b80e:	e7f4      	b.n	800b7fa <__copybits+0x1e>

0800b810 <__any_on>:
 800b810:	f100 0214 	add.w	r2, r0, #20
 800b814:	6900      	ldr	r0, [r0, #16]
 800b816:	114b      	asrs	r3, r1, #5
 800b818:	4298      	cmp	r0, r3
 800b81a:	b510      	push	{r4, lr}
 800b81c:	db11      	blt.n	800b842 <__any_on+0x32>
 800b81e:	dd0a      	ble.n	800b836 <__any_on+0x26>
 800b820:	f011 011f 	ands.w	r1, r1, #31
 800b824:	d007      	beq.n	800b836 <__any_on+0x26>
 800b826:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b82a:	fa24 f001 	lsr.w	r0, r4, r1
 800b82e:	fa00 f101 	lsl.w	r1, r0, r1
 800b832:	428c      	cmp	r4, r1
 800b834:	d10b      	bne.n	800b84e <__any_on+0x3e>
 800b836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d803      	bhi.n	800b846 <__any_on+0x36>
 800b83e:	2000      	movs	r0, #0
 800b840:	bd10      	pop	{r4, pc}
 800b842:	4603      	mov	r3, r0
 800b844:	e7f7      	b.n	800b836 <__any_on+0x26>
 800b846:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b84a:	2900      	cmp	r1, #0
 800b84c:	d0f5      	beq.n	800b83a <__any_on+0x2a>
 800b84e:	2001      	movs	r0, #1
 800b850:	e7f6      	b.n	800b840 <__any_on+0x30>

0800b852 <_calloc_r>:
 800b852:	b538      	push	{r3, r4, r5, lr}
 800b854:	fb02 f401 	mul.w	r4, r2, r1
 800b858:	4621      	mov	r1, r4
 800b85a:	f000 f857 	bl	800b90c <_malloc_r>
 800b85e:	4605      	mov	r5, r0
 800b860:	b118      	cbz	r0, 800b86a <_calloc_r+0x18>
 800b862:	4622      	mov	r2, r4
 800b864:	2100      	movs	r1, #0
 800b866:	f7fc ffaf 	bl	80087c8 <memset>
 800b86a:	4628      	mov	r0, r5
 800b86c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b870 <_free_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4605      	mov	r5, r0
 800b874:	2900      	cmp	r1, #0
 800b876:	d045      	beq.n	800b904 <_free_r+0x94>
 800b878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87c:	1f0c      	subs	r4, r1, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	bfb8      	it	lt
 800b882:	18e4      	addlt	r4, r4, r3
 800b884:	f000 fa36 	bl	800bcf4 <__malloc_lock>
 800b888:	4a1f      	ldr	r2, [pc, #124]	; (800b908 <_free_r+0x98>)
 800b88a:	6813      	ldr	r3, [r2, #0]
 800b88c:	4610      	mov	r0, r2
 800b88e:	b933      	cbnz	r3, 800b89e <_free_r+0x2e>
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	6014      	str	r4, [r2, #0]
 800b894:	4628      	mov	r0, r5
 800b896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b89a:	f000 ba2c 	b.w	800bcf6 <__malloc_unlock>
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	d90c      	bls.n	800b8bc <_free_r+0x4c>
 800b8a2:	6821      	ldr	r1, [r4, #0]
 800b8a4:	1862      	adds	r2, r4, r1
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bf04      	itt	eq
 800b8aa:	681a      	ldreq	r2, [r3, #0]
 800b8ac:	685b      	ldreq	r3, [r3, #4]
 800b8ae:	6063      	str	r3, [r4, #4]
 800b8b0:	bf04      	itt	eq
 800b8b2:	1852      	addeq	r2, r2, r1
 800b8b4:	6022      	streq	r2, [r4, #0]
 800b8b6:	6004      	str	r4, [r0, #0]
 800b8b8:	e7ec      	b.n	800b894 <_free_r+0x24>
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	b10a      	cbz	r2, 800b8c4 <_free_r+0x54>
 800b8c0:	42a2      	cmp	r2, r4
 800b8c2:	d9fa      	bls.n	800b8ba <_free_r+0x4a>
 800b8c4:	6819      	ldr	r1, [r3, #0]
 800b8c6:	1858      	adds	r0, r3, r1
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d10b      	bne.n	800b8e4 <_free_r+0x74>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	4401      	add	r1, r0
 800b8d0:	1858      	adds	r0, r3, r1
 800b8d2:	4282      	cmp	r2, r0
 800b8d4:	6019      	str	r1, [r3, #0]
 800b8d6:	d1dd      	bne.n	800b894 <_free_r+0x24>
 800b8d8:	6810      	ldr	r0, [r2, #0]
 800b8da:	6852      	ldr	r2, [r2, #4]
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	4401      	add	r1, r0
 800b8e0:	6019      	str	r1, [r3, #0]
 800b8e2:	e7d7      	b.n	800b894 <_free_r+0x24>
 800b8e4:	d902      	bls.n	800b8ec <_free_r+0x7c>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	e7d3      	b.n	800b894 <_free_r+0x24>
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	1821      	adds	r1, r4, r0
 800b8f0:	428a      	cmp	r2, r1
 800b8f2:	bf04      	itt	eq
 800b8f4:	6811      	ldreq	r1, [r2, #0]
 800b8f6:	6852      	ldreq	r2, [r2, #4]
 800b8f8:	6062      	str	r2, [r4, #4]
 800b8fa:	bf04      	itt	eq
 800b8fc:	1809      	addeq	r1, r1, r0
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	605c      	str	r4, [r3, #4]
 800b902:	e7c7      	b.n	800b894 <_free_r+0x24>
 800b904:	bd38      	pop	{r3, r4, r5, pc}
 800b906:	bf00      	nop
 800b908:	200002dc 	.word	0x200002dc

0800b90c <_malloc_r>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	1ccd      	adds	r5, r1, #3
 800b910:	f025 0503 	bic.w	r5, r5, #3
 800b914:	3508      	adds	r5, #8
 800b916:	2d0c      	cmp	r5, #12
 800b918:	bf38      	it	cc
 800b91a:	250c      	movcc	r5, #12
 800b91c:	2d00      	cmp	r5, #0
 800b91e:	4606      	mov	r6, r0
 800b920:	db01      	blt.n	800b926 <_malloc_r+0x1a>
 800b922:	42a9      	cmp	r1, r5
 800b924:	d903      	bls.n	800b92e <_malloc_r+0x22>
 800b926:	230c      	movs	r3, #12
 800b928:	6033      	str	r3, [r6, #0]
 800b92a:	2000      	movs	r0, #0
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
 800b92e:	f000 f9e1 	bl	800bcf4 <__malloc_lock>
 800b932:	4a21      	ldr	r2, [pc, #132]	; (800b9b8 <_malloc_r+0xac>)
 800b934:	6814      	ldr	r4, [r2, #0]
 800b936:	4621      	mov	r1, r4
 800b938:	b991      	cbnz	r1, 800b960 <_malloc_r+0x54>
 800b93a:	4c20      	ldr	r4, [pc, #128]	; (800b9bc <_malloc_r+0xb0>)
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	b91b      	cbnz	r3, 800b948 <_malloc_r+0x3c>
 800b940:	4630      	mov	r0, r6
 800b942:	f000 f98f 	bl	800bc64 <_sbrk_r>
 800b946:	6020      	str	r0, [r4, #0]
 800b948:	4629      	mov	r1, r5
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 f98a 	bl	800bc64 <_sbrk_r>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d124      	bne.n	800b99e <_malloc_r+0x92>
 800b954:	230c      	movs	r3, #12
 800b956:	6033      	str	r3, [r6, #0]
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 f9cc 	bl	800bcf6 <__malloc_unlock>
 800b95e:	e7e4      	b.n	800b92a <_malloc_r+0x1e>
 800b960:	680b      	ldr	r3, [r1, #0]
 800b962:	1b5b      	subs	r3, r3, r5
 800b964:	d418      	bmi.n	800b998 <_malloc_r+0x8c>
 800b966:	2b0b      	cmp	r3, #11
 800b968:	d90f      	bls.n	800b98a <_malloc_r+0x7e>
 800b96a:	600b      	str	r3, [r1, #0]
 800b96c:	50cd      	str	r5, [r1, r3]
 800b96e:	18cc      	adds	r4, r1, r3
 800b970:	4630      	mov	r0, r6
 800b972:	f000 f9c0 	bl	800bcf6 <__malloc_unlock>
 800b976:	f104 000b 	add.w	r0, r4, #11
 800b97a:	1d23      	adds	r3, r4, #4
 800b97c:	f020 0007 	bic.w	r0, r0, #7
 800b980:	1ac3      	subs	r3, r0, r3
 800b982:	d0d3      	beq.n	800b92c <_malloc_r+0x20>
 800b984:	425a      	negs	r2, r3
 800b986:	50e2      	str	r2, [r4, r3]
 800b988:	e7d0      	b.n	800b92c <_malloc_r+0x20>
 800b98a:	428c      	cmp	r4, r1
 800b98c:	684b      	ldr	r3, [r1, #4]
 800b98e:	bf16      	itet	ne
 800b990:	6063      	strne	r3, [r4, #4]
 800b992:	6013      	streq	r3, [r2, #0]
 800b994:	460c      	movne	r4, r1
 800b996:	e7eb      	b.n	800b970 <_malloc_r+0x64>
 800b998:	460c      	mov	r4, r1
 800b99a:	6849      	ldr	r1, [r1, #4]
 800b99c:	e7cc      	b.n	800b938 <_malloc_r+0x2c>
 800b99e:	1cc4      	adds	r4, r0, #3
 800b9a0:	f024 0403 	bic.w	r4, r4, #3
 800b9a4:	42a0      	cmp	r0, r4
 800b9a6:	d005      	beq.n	800b9b4 <_malloc_r+0xa8>
 800b9a8:	1a21      	subs	r1, r4, r0
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f000 f95a 	bl	800bc64 <_sbrk_r>
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d0cf      	beq.n	800b954 <_malloc_r+0x48>
 800b9b4:	6025      	str	r5, [r4, #0]
 800b9b6:	e7db      	b.n	800b970 <_malloc_r+0x64>
 800b9b8:	200002dc 	.word	0x200002dc
 800b9bc:	200002e0 	.word	0x200002e0

0800b9c0 <__ssputs_r>:
 800b9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c4:	688e      	ldr	r6, [r1, #8]
 800b9c6:	429e      	cmp	r6, r3
 800b9c8:	4682      	mov	sl, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	4690      	mov	r8, r2
 800b9ce:	4699      	mov	r9, r3
 800b9d0:	d837      	bhi.n	800ba42 <__ssputs_r+0x82>
 800b9d2:	898a      	ldrh	r2, [r1, #12]
 800b9d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9d8:	d031      	beq.n	800ba3e <__ssputs_r+0x7e>
 800b9da:	6825      	ldr	r5, [r4, #0]
 800b9dc:	6909      	ldr	r1, [r1, #16]
 800b9de:	1a6f      	subs	r7, r5, r1
 800b9e0:	6965      	ldr	r5, [r4, #20]
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b9ec:	f109 0301 	add.w	r3, r9, #1
 800b9f0:	443b      	add	r3, r7
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	bf38      	it	cc
 800b9f6:	461d      	movcc	r5, r3
 800b9f8:	0553      	lsls	r3, r2, #21
 800b9fa:	d530      	bpl.n	800ba5e <__ssputs_r+0x9e>
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	f7ff ff85 	bl	800b90c <_malloc_r>
 800ba02:	4606      	mov	r6, r0
 800ba04:	b950      	cbnz	r0, 800ba1c <__ssputs_r+0x5c>
 800ba06:	230c      	movs	r3, #12
 800ba08:	f8ca 3000 	str.w	r3, [sl]
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba12:	81a3      	strh	r3, [r4, #12]
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1c:	463a      	mov	r2, r7
 800ba1e:	6921      	ldr	r1, [r4, #16]
 800ba20:	f7ff fb0e 	bl	800b040 <memcpy>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	6126      	str	r6, [r4, #16]
 800ba32:	6165      	str	r5, [r4, #20]
 800ba34:	443e      	add	r6, r7
 800ba36:	1bed      	subs	r5, r5, r7
 800ba38:	6026      	str	r6, [r4, #0]
 800ba3a:	60a5      	str	r5, [r4, #8]
 800ba3c:	464e      	mov	r6, r9
 800ba3e:	454e      	cmp	r6, r9
 800ba40:	d900      	bls.n	800ba44 <__ssputs_r+0x84>
 800ba42:	464e      	mov	r6, r9
 800ba44:	4632      	mov	r2, r6
 800ba46:	4641      	mov	r1, r8
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	f000 f93a 	bl	800bcc2 <memmove>
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	60a3      	str	r3, [r4, #8]
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	441e      	add	r6, r3
 800ba58:	6026      	str	r6, [r4, #0]
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e7dc      	b.n	800ba18 <__ssputs_r+0x58>
 800ba5e:	462a      	mov	r2, r5
 800ba60:	f000 f94a 	bl	800bcf8 <_realloc_r>
 800ba64:	4606      	mov	r6, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1e2      	bne.n	800ba30 <__ssputs_r+0x70>
 800ba6a:	6921      	ldr	r1, [r4, #16]
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	f7ff feff 	bl	800b870 <_free_r>
 800ba72:	e7c8      	b.n	800ba06 <__ssputs_r+0x46>

0800ba74 <_svfiprintf_r>:
 800ba74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba78:	461d      	mov	r5, r3
 800ba7a:	898b      	ldrh	r3, [r1, #12]
 800ba7c:	061f      	lsls	r7, r3, #24
 800ba7e:	b09d      	sub	sp, #116	; 0x74
 800ba80:	4680      	mov	r8, r0
 800ba82:	460c      	mov	r4, r1
 800ba84:	4616      	mov	r6, r2
 800ba86:	d50f      	bpl.n	800baa8 <_svfiprintf_r+0x34>
 800ba88:	690b      	ldr	r3, [r1, #16]
 800ba8a:	b96b      	cbnz	r3, 800baa8 <_svfiprintf_r+0x34>
 800ba8c:	2140      	movs	r1, #64	; 0x40
 800ba8e:	f7ff ff3d 	bl	800b90c <_malloc_r>
 800ba92:	6020      	str	r0, [r4, #0]
 800ba94:	6120      	str	r0, [r4, #16]
 800ba96:	b928      	cbnz	r0, 800baa4 <_svfiprintf_r+0x30>
 800ba98:	230c      	movs	r3, #12
 800ba9a:	f8c8 3000 	str.w	r3, [r8]
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295
 800baa2:	e0c8      	b.n	800bc36 <_svfiprintf_r+0x1c2>
 800baa4:	2340      	movs	r3, #64	; 0x40
 800baa6:	6163      	str	r3, [r4, #20]
 800baa8:	2300      	movs	r3, #0
 800baaa:	9309      	str	r3, [sp, #36]	; 0x24
 800baac:	2320      	movs	r3, #32
 800baae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bab2:	2330      	movs	r3, #48	; 0x30
 800bab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bab8:	9503      	str	r5, [sp, #12]
 800baba:	f04f 0b01 	mov.w	fp, #1
 800babe:	4637      	mov	r7, r6
 800bac0:	463d      	mov	r5, r7
 800bac2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bac6:	b10b      	cbz	r3, 800bacc <_svfiprintf_r+0x58>
 800bac8:	2b25      	cmp	r3, #37	; 0x25
 800baca:	d13e      	bne.n	800bb4a <_svfiprintf_r+0xd6>
 800bacc:	ebb7 0a06 	subs.w	sl, r7, r6
 800bad0:	d00b      	beq.n	800baea <_svfiprintf_r+0x76>
 800bad2:	4653      	mov	r3, sl
 800bad4:	4632      	mov	r2, r6
 800bad6:	4621      	mov	r1, r4
 800bad8:	4640      	mov	r0, r8
 800bada:	f7ff ff71 	bl	800b9c0 <__ssputs_r>
 800bade:	3001      	adds	r0, #1
 800bae0:	f000 80a4 	beq.w	800bc2c <_svfiprintf_r+0x1b8>
 800bae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae6:	4453      	add	r3, sl
 800bae8:	9309      	str	r3, [sp, #36]	; 0x24
 800baea:	783b      	ldrb	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 809d 	beq.w	800bc2c <_svfiprintf_r+0x1b8>
 800baf2:	2300      	movs	r3, #0
 800baf4:	f04f 32ff 	mov.w	r2, #4294967295
 800baf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	9307      	str	r3, [sp, #28]
 800bb00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb04:	931a      	str	r3, [sp, #104]	; 0x68
 800bb06:	462f      	mov	r7, r5
 800bb08:	2205      	movs	r2, #5
 800bb0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb0e:	4850      	ldr	r0, [pc, #320]	; (800bc50 <_svfiprintf_r+0x1dc>)
 800bb10:	f7f4 fb66 	bl	80001e0 <memchr>
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	b9d0      	cbnz	r0, 800bb4e <_svfiprintf_r+0xda>
 800bb18:	06d9      	lsls	r1, r3, #27
 800bb1a:	bf44      	itt	mi
 800bb1c:	2220      	movmi	r2, #32
 800bb1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb22:	071a      	lsls	r2, r3, #28
 800bb24:	bf44      	itt	mi
 800bb26:	222b      	movmi	r2, #43	; 0x2b
 800bb28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb2c:	782a      	ldrb	r2, [r5, #0]
 800bb2e:	2a2a      	cmp	r2, #42	; 0x2a
 800bb30:	d015      	beq.n	800bb5e <_svfiprintf_r+0xea>
 800bb32:	9a07      	ldr	r2, [sp, #28]
 800bb34:	462f      	mov	r7, r5
 800bb36:	2000      	movs	r0, #0
 800bb38:	250a      	movs	r5, #10
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb40:	3b30      	subs	r3, #48	; 0x30
 800bb42:	2b09      	cmp	r3, #9
 800bb44:	d94d      	bls.n	800bbe2 <_svfiprintf_r+0x16e>
 800bb46:	b1b8      	cbz	r0, 800bb78 <_svfiprintf_r+0x104>
 800bb48:	e00f      	b.n	800bb6a <_svfiprintf_r+0xf6>
 800bb4a:	462f      	mov	r7, r5
 800bb4c:	e7b8      	b.n	800bac0 <_svfiprintf_r+0x4c>
 800bb4e:	4a40      	ldr	r2, [pc, #256]	; (800bc50 <_svfiprintf_r+0x1dc>)
 800bb50:	1a80      	subs	r0, r0, r2
 800bb52:	fa0b f000 	lsl.w	r0, fp, r0
 800bb56:	4318      	orrs	r0, r3
 800bb58:	9004      	str	r0, [sp, #16]
 800bb5a:	463d      	mov	r5, r7
 800bb5c:	e7d3      	b.n	800bb06 <_svfiprintf_r+0x92>
 800bb5e:	9a03      	ldr	r2, [sp, #12]
 800bb60:	1d11      	adds	r1, r2, #4
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	9103      	str	r1, [sp, #12]
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	db01      	blt.n	800bb6e <_svfiprintf_r+0xfa>
 800bb6a:	9207      	str	r2, [sp, #28]
 800bb6c:	e004      	b.n	800bb78 <_svfiprintf_r+0x104>
 800bb6e:	4252      	negs	r2, r2
 800bb70:	f043 0302 	orr.w	r3, r3, #2
 800bb74:	9207      	str	r2, [sp, #28]
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	783b      	ldrb	r3, [r7, #0]
 800bb7a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb7c:	d10c      	bne.n	800bb98 <_svfiprintf_r+0x124>
 800bb7e:	787b      	ldrb	r3, [r7, #1]
 800bb80:	2b2a      	cmp	r3, #42	; 0x2a
 800bb82:	d133      	bne.n	800bbec <_svfiprintf_r+0x178>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9203      	str	r2, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bfb8      	it	lt
 800bb90:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb94:	3702      	adds	r7, #2
 800bb96:	9305      	str	r3, [sp, #20]
 800bb98:	4d2e      	ldr	r5, [pc, #184]	; (800bc54 <_svfiprintf_r+0x1e0>)
 800bb9a:	7839      	ldrb	r1, [r7, #0]
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7f4 fb1e 	bl	80001e0 <memchr>
 800bba4:	b138      	cbz	r0, 800bbb6 <_svfiprintf_r+0x142>
 800bba6:	2340      	movs	r3, #64	; 0x40
 800bba8:	1b40      	subs	r0, r0, r5
 800bbaa:	fa03 f000 	lsl.w	r0, r3, r0
 800bbae:	9b04      	ldr	r3, [sp, #16]
 800bbb0:	4303      	orrs	r3, r0
 800bbb2:	3701      	adds	r7, #1
 800bbb4:	9304      	str	r3, [sp, #16]
 800bbb6:	7839      	ldrb	r1, [r7, #0]
 800bbb8:	4827      	ldr	r0, [pc, #156]	; (800bc58 <_svfiprintf_r+0x1e4>)
 800bbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbbe:	2206      	movs	r2, #6
 800bbc0:	1c7e      	adds	r6, r7, #1
 800bbc2:	f7f4 fb0d 	bl	80001e0 <memchr>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d038      	beq.n	800bc3c <_svfiprintf_r+0x1c8>
 800bbca:	4b24      	ldr	r3, [pc, #144]	; (800bc5c <_svfiprintf_r+0x1e8>)
 800bbcc:	bb13      	cbnz	r3, 800bc14 <_svfiprintf_r+0x1a0>
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	3307      	adds	r3, #7
 800bbd2:	f023 0307 	bic.w	r3, r3, #7
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbdc:	444b      	add	r3, r9
 800bbde:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe0:	e76d      	b.n	800babe <_svfiprintf_r+0x4a>
 800bbe2:	fb05 3202 	mla	r2, r5, r2, r3
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	460f      	mov	r7, r1
 800bbea:	e7a6      	b.n	800bb3a <_svfiprintf_r+0xc6>
 800bbec:	2300      	movs	r3, #0
 800bbee:	3701      	adds	r7, #1
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	250a      	movs	r5, #10
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbfc:	3a30      	subs	r2, #48	; 0x30
 800bbfe:	2a09      	cmp	r2, #9
 800bc00:	d903      	bls.n	800bc0a <_svfiprintf_r+0x196>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0c8      	beq.n	800bb98 <_svfiprintf_r+0x124>
 800bc06:	9105      	str	r1, [sp, #20]
 800bc08:	e7c6      	b.n	800bb98 <_svfiprintf_r+0x124>
 800bc0a:	fb05 2101 	mla	r1, r5, r1, r2
 800bc0e:	2301      	movs	r3, #1
 800bc10:	4607      	mov	r7, r0
 800bc12:	e7f0      	b.n	800bbf6 <_svfiprintf_r+0x182>
 800bc14:	ab03      	add	r3, sp, #12
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4b11      	ldr	r3, [pc, #68]	; (800bc60 <_svfiprintf_r+0x1ec>)
 800bc1c:	a904      	add	r1, sp, #16
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f7fc fe6e 	bl	8008900 <_printf_float>
 800bc24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc28:	4681      	mov	r9, r0
 800bc2a:	d1d6      	bne.n	800bbda <_svfiprintf_r+0x166>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	065b      	lsls	r3, r3, #25
 800bc30:	f53f af35 	bmi.w	800ba9e <_svfiprintf_r+0x2a>
 800bc34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc36:	b01d      	add	sp, #116	; 0x74
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4622      	mov	r2, r4
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <_svfiprintf_r+0x1ec>)
 800bc44:	a904      	add	r1, sp, #16
 800bc46:	4640      	mov	r0, r8
 800bc48:	f7fd f910 	bl	8008e6c <_printf_i>
 800bc4c:	e7ea      	b.n	800bc24 <_svfiprintf_r+0x1b0>
 800bc4e:	bf00      	nop
 800bc50:	0800d414 	.word	0x0800d414
 800bc54:	0800d41a 	.word	0x0800d41a
 800bc58:	0800d41e 	.word	0x0800d41e
 800bc5c:	08008901 	.word	0x08008901
 800bc60:	0800b9c1 	.word	0x0800b9c1

0800bc64 <_sbrk_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4c06      	ldr	r4, [pc, #24]	; (800bc80 <_sbrk_r+0x1c>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	6023      	str	r3, [r4, #0]
 800bc70:	f7f8 f970 	bl	8003f54 <_sbrk>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_sbrk_r+0x1a>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_sbrk_r+0x1a>
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20000988 	.word	0x20000988

0800bc84 <strncmp>:
 800bc84:	b510      	push	{r4, lr}
 800bc86:	b16a      	cbz	r2, 800bca4 <strncmp+0x20>
 800bc88:	3901      	subs	r1, #1
 800bc8a:	1884      	adds	r4, r0, r2
 800bc8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d103      	bne.n	800bca0 <strncmp+0x1c>
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d001      	beq.n	800bca0 <strncmp+0x1c>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1f5      	bne.n	800bc8c <strncmp+0x8>
 800bca0:	1a98      	subs	r0, r3, r2
 800bca2:	bd10      	pop	{r4, pc}
 800bca4:	4610      	mov	r0, r2
 800bca6:	e7fc      	b.n	800bca2 <strncmp+0x1e>

0800bca8 <__ascii_wctomb>:
 800bca8:	b149      	cbz	r1, 800bcbe <__ascii_wctomb+0x16>
 800bcaa:	2aff      	cmp	r2, #255	; 0xff
 800bcac:	bf85      	ittet	hi
 800bcae:	238a      	movhi	r3, #138	; 0x8a
 800bcb0:	6003      	strhi	r3, [r0, #0]
 800bcb2:	700a      	strbls	r2, [r1, #0]
 800bcb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcb8:	bf98      	it	ls
 800bcba:	2001      	movls	r0, #1
 800bcbc:	4770      	bx	lr
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4770      	bx	lr

0800bcc2 <memmove>:
 800bcc2:	4288      	cmp	r0, r1
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	eb01 0302 	add.w	r3, r1, r2
 800bcca:	d807      	bhi.n	800bcdc <memmove+0x1a>
 800bccc:	1e42      	subs	r2, r0, #1
 800bcce:	4299      	cmp	r1, r3
 800bcd0:	d00a      	beq.n	800bce8 <memmove+0x26>
 800bcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bcda:	e7f8      	b.n	800bcce <memmove+0xc>
 800bcdc:	4283      	cmp	r3, r0
 800bcde:	d9f5      	bls.n	800bccc <memmove+0xa>
 800bce0:	1881      	adds	r1, r0, r2
 800bce2:	1ad2      	subs	r2, r2, r3
 800bce4:	42d3      	cmn	r3, r2
 800bce6:	d100      	bne.n	800bcea <memmove+0x28>
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bcf2:	e7f7      	b.n	800bce4 <memmove+0x22>

0800bcf4 <__malloc_lock>:
 800bcf4:	4770      	bx	lr

0800bcf6 <__malloc_unlock>:
 800bcf6:	4770      	bx	lr

0800bcf8 <_realloc_r>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	4614      	mov	r4, r2
 800bcfe:	460e      	mov	r6, r1
 800bd00:	b921      	cbnz	r1, 800bd0c <_realloc_r+0x14>
 800bd02:	4611      	mov	r1, r2
 800bd04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd08:	f7ff be00 	b.w	800b90c <_malloc_r>
 800bd0c:	b922      	cbnz	r2, 800bd18 <_realloc_r+0x20>
 800bd0e:	f7ff fdaf 	bl	800b870 <_free_r>
 800bd12:	4625      	mov	r5, r4
 800bd14:	4628      	mov	r0, r5
 800bd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd18:	f000 f814 	bl	800bd44 <_malloc_usable_size_r>
 800bd1c:	42a0      	cmp	r0, r4
 800bd1e:	d20f      	bcs.n	800bd40 <_realloc_r+0x48>
 800bd20:	4621      	mov	r1, r4
 800bd22:	4638      	mov	r0, r7
 800bd24:	f7ff fdf2 	bl	800b90c <_malloc_r>
 800bd28:	4605      	mov	r5, r0
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d0f2      	beq.n	800bd14 <_realloc_r+0x1c>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4622      	mov	r2, r4
 800bd32:	f7ff f985 	bl	800b040 <memcpy>
 800bd36:	4631      	mov	r1, r6
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff fd99 	bl	800b870 <_free_r>
 800bd3e:	e7e9      	b.n	800bd14 <_realloc_r+0x1c>
 800bd40:	4635      	mov	r5, r6
 800bd42:	e7e7      	b.n	800bd14 <_realloc_r+0x1c>

0800bd44 <_malloc_usable_size_r>:
 800bd44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd48:	1f18      	subs	r0, r3, #4
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	bfbc      	itt	lt
 800bd4e:	580b      	ldrlt	r3, [r1, r0]
 800bd50:	18c0      	addlt	r0, r0, r3
 800bd52:	4770      	bx	lr
 800bd54:	0000      	movs	r0, r0
	...

0800bd58 <atan>:
 800bd58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	ec55 4b10 	vmov	r4, r5, d0
 800bd60:	4bc3      	ldr	r3, [pc, #780]	; (800c070 <atan+0x318>)
 800bd62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd66:	429e      	cmp	r6, r3
 800bd68:	46ab      	mov	fp, r5
 800bd6a:	dd18      	ble.n	800bd9e <atan+0x46>
 800bd6c:	4bc1      	ldr	r3, [pc, #772]	; (800c074 <atan+0x31c>)
 800bd6e:	429e      	cmp	r6, r3
 800bd70:	dc01      	bgt.n	800bd76 <atan+0x1e>
 800bd72:	d109      	bne.n	800bd88 <atan+0x30>
 800bd74:	b144      	cbz	r4, 800bd88 <atan+0x30>
 800bd76:	4622      	mov	r2, r4
 800bd78:	462b      	mov	r3, r5
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7f4 fa85 	bl	800028c <__adddf3>
 800bd82:	4604      	mov	r4, r0
 800bd84:	460d      	mov	r5, r1
 800bd86:	e006      	b.n	800bd96 <atan+0x3e>
 800bd88:	f1bb 0f00 	cmp.w	fp, #0
 800bd8c:	f340 8131 	ble.w	800bff2 <atan+0x29a>
 800bd90:	a59b      	add	r5, pc, #620	; (adr r5, 800c000 <atan+0x2a8>)
 800bd92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd96:	ec45 4b10 	vmov	d0, r4, r5
 800bd9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9e:	4bb6      	ldr	r3, [pc, #728]	; (800c078 <atan+0x320>)
 800bda0:	429e      	cmp	r6, r3
 800bda2:	dc14      	bgt.n	800bdce <atan+0x76>
 800bda4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bda8:	429e      	cmp	r6, r3
 800bdaa:	dc0d      	bgt.n	800bdc8 <atan+0x70>
 800bdac:	a396      	add	r3, pc, #600	; (adr r3, 800c008 <atan+0x2b0>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	ee10 0a10 	vmov	r0, s0
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4baf      	ldr	r3, [pc, #700]	; (800c07c <atan+0x324>)
 800bdc0:	f7f4 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d1e6      	bne.n	800bd96 <atan+0x3e>
 800bdc8:	f04f 3aff 	mov.w	sl, #4294967295
 800bdcc:	e02b      	b.n	800be26 <atan+0xce>
 800bdce:	f000 f963 	bl	800c098 <fabs>
 800bdd2:	4bab      	ldr	r3, [pc, #684]	; (800c080 <atan+0x328>)
 800bdd4:	429e      	cmp	r6, r3
 800bdd6:	ec55 4b10 	vmov	r4, r5, d0
 800bdda:	f300 80bf 	bgt.w	800bf5c <atan+0x204>
 800bdde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bde2:	429e      	cmp	r6, r3
 800bde4:	f300 80a0 	bgt.w	800bf28 <atan+0x1d0>
 800bde8:	ee10 2a10 	vmov	r2, s0
 800bdec:	ee10 0a10 	vmov	r0, s0
 800bdf0:	462b      	mov	r3, r5
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fa4a 	bl	800028c <__adddf3>
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4ba0      	ldr	r3, [pc, #640]	; (800c07c <atan+0x324>)
 800bdfc:	f7f4 fa44 	bl	8000288 <__aeabi_dsub>
 800be00:	2200      	movs	r2, #0
 800be02:	4606      	mov	r6, r0
 800be04:	460f      	mov	r7, r1
 800be06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be0a:	4620      	mov	r0, r4
 800be0c:	4629      	mov	r1, r5
 800be0e:	f7f4 fa3d 	bl	800028c <__adddf3>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4630      	mov	r0, r6
 800be18:	4639      	mov	r1, r7
 800be1a:	f7f4 fd17 	bl	800084c <__aeabi_ddiv>
 800be1e:	f04f 0a00 	mov.w	sl, #0
 800be22:	4604      	mov	r4, r0
 800be24:	460d      	mov	r5, r1
 800be26:	4622      	mov	r2, r4
 800be28:	462b      	mov	r3, r5
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	f7f4 fbe3 	bl	80005f8 <__aeabi_dmul>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4680      	mov	r8, r0
 800be38:	4689      	mov	r9, r1
 800be3a:	f7f4 fbdd 	bl	80005f8 <__aeabi_dmul>
 800be3e:	a374      	add	r3, pc, #464	; (adr r3, 800c010 <atan+0x2b8>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	4606      	mov	r6, r0
 800be46:	460f      	mov	r7, r1
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	a372      	add	r3, pc, #456	; (adr r3, 800c018 <atan+0x2c0>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fa1b 	bl	800028c <__adddf3>
 800be56:	4632      	mov	r2, r6
 800be58:	463b      	mov	r3, r7
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	a370      	add	r3, pc, #448	; (adr r3, 800c020 <atan+0x2c8>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fa12 	bl	800028c <__adddf3>
 800be68:	4632      	mov	r2, r6
 800be6a:	463b      	mov	r3, r7
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	a36d      	add	r3, pc, #436	; (adr r3, 800c028 <atan+0x2d0>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 fa09 	bl	800028c <__adddf3>
 800be7a:	4632      	mov	r2, r6
 800be7c:	463b      	mov	r3, r7
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	a36b      	add	r3, pc, #428	; (adr r3, 800c030 <atan+0x2d8>)
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f7f4 fa00 	bl	800028c <__adddf3>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	f7f4 fbb2 	bl	80005f8 <__aeabi_dmul>
 800be94:	a368      	add	r3, pc, #416	; (adr r3, 800c038 <atan+0x2e0>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 f9f7 	bl	800028c <__adddf3>
 800be9e:	4642      	mov	r2, r8
 800bea0:	464b      	mov	r3, r9
 800bea2:	f7f4 fba9 	bl	80005f8 <__aeabi_dmul>
 800bea6:	a366      	add	r3, pc, #408	; (adr r3, 800c040 <atan+0x2e8>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4680      	mov	r8, r0
 800beae:	4689      	mov	r9, r1
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	a363      	add	r3, pc, #396	; (adr r3, 800c048 <atan+0x2f0>)
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	f7f4 f9e3 	bl	8000288 <__aeabi_dsub>
 800bec2:	4632      	mov	r2, r6
 800bec4:	463b      	mov	r3, r7
 800bec6:	f7f4 fb97 	bl	80005f8 <__aeabi_dmul>
 800beca:	a361      	add	r3, pc, #388	; (adr r3, 800c050 <atan+0x2f8>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 f9da 	bl	8000288 <__aeabi_dsub>
 800bed4:	4632      	mov	r2, r6
 800bed6:	463b      	mov	r3, r7
 800bed8:	f7f4 fb8e 	bl	80005f8 <__aeabi_dmul>
 800bedc:	a35e      	add	r3, pc, #376	; (adr r3, 800c058 <atan+0x300>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f9d1 	bl	8000288 <__aeabi_dsub>
 800bee6:	4632      	mov	r2, r6
 800bee8:	463b      	mov	r3, r7
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	a35c      	add	r3, pc, #368	; (adr r3, 800c060 <atan+0x308>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7f4 f9c8 	bl	8000288 <__aeabi_dsub>
 800bef8:	4632      	mov	r2, r6
 800befa:	463b      	mov	r3, r7
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4640      	mov	r0, r8
 800bf06:	4649      	mov	r1, r9
 800bf08:	f7f4 f9c0 	bl	800028c <__adddf3>
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	462b      	mov	r3, r5
 800bf10:	f7f4 fb72 	bl	80005f8 <__aeabi_dmul>
 800bf14:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	d14b      	bne.n	800bfb6 <atan+0x25e>
 800bf1e:	4620      	mov	r0, r4
 800bf20:	4629      	mov	r1, r5
 800bf22:	f7f4 f9b1 	bl	8000288 <__aeabi_dsub>
 800bf26:	e72c      	b.n	800bd82 <atan+0x2a>
 800bf28:	ee10 0a10 	vmov	r0, s0
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4b53      	ldr	r3, [pc, #332]	; (800c07c <atan+0x324>)
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f9a9 	bl	8000288 <__aeabi_dsub>
 800bf36:	2200      	movs	r2, #0
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	4b4f      	ldr	r3, [pc, #316]	; (800c07c <atan+0x324>)
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 f9a3 	bl	800028c <__adddf3>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	f7f4 fc7d 	bl	800084c <__aeabi_ddiv>
 800bf52:	f04f 0a01 	mov.w	sl, #1
 800bf56:	4604      	mov	r4, r0
 800bf58:	460d      	mov	r5, r1
 800bf5a:	e764      	b.n	800be26 <atan+0xce>
 800bf5c:	4b49      	ldr	r3, [pc, #292]	; (800c084 <atan+0x32c>)
 800bf5e:	429e      	cmp	r6, r3
 800bf60:	dc1d      	bgt.n	800bf9e <atan+0x246>
 800bf62:	ee10 0a10 	vmov	r0, s0
 800bf66:	2200      	movs	r2, #0
 800bf68:	4b47      	ldr	r3, [pc, #284]	; (800c088 <atan+0x330>)
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	f7f4 f98c 	bl	8000288 <__aeabi_dsub>
 800bf70:	2200      	movs	r2, #0
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	4b44      	ldr	r3, [pc, #272]	; (800c088 <atan+0x330>)
 800bf78:	4620      	mov	r0, r4
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	2200      	movs	r2, #0
 800bf82:	4b3e      	ldr	r3, [pc, #248]	; (800c07c <atan+0x324>)
 800bf84:	f7f4 f982 	bl	800028c <__adddf3>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 fc5c 	bl	800084c <__aeabi_ddiv>
 800bf94:	f04f 0a02 	mov.w	sl, #2
 800bf98:	4604      	mov	r4, r0
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	e743      	b.n	800be26 <atan+0xce>
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	ee10 2a10 	vmov	r2, s0
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	4939      	ldr	r1, [pc, #228]	; (800c08c <atan+0x334>)
 800bfa8:	f7f4 fc50 	bl	800084c <__aeabi_ddiv>
 800bfac:	f04f 0a03 	mov.w	sl, #3
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	460d      	mov	r5, r1
 800bfb4:	e737      	b.n	800be26 <atan+0xce>
 800bfb6:	4b36      	ldr	r3, [pc, #216]	; (800c090 <atan+0x338>)
 800bfb8:	4e36      	ldr	r6, [pc, #216]	; (800c094 <atan+0x33c>)
 800bfba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bfbe:	4456      	add	r6, sl
 800bfc0:	449a      	add	sl, r3
 800bfc2:	e9da 2300 	ldrd	r2, r3, [sl]
 800bfc6:	f7f4 f95f 	bl	8000288 <__aeabi_dsub>
 800bfca:	4622      	mov	r2, r4
 800bfcc:	462b      	mov	r3, r5
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bfda:	f7f4 f955 	bl	8000288 <__aeabi_dsub>
 800bfde:	f1bb 0f00 	cmp.w	fp, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	460d      	mov	r5, r1
 800bfe6:	f6bf aed6 	bge.w	800bd96 <atan+0x3e>
 800bfea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfee:	461d      	mov	r5, r3
 800bff0:	e6d1      	b.n	800bd96 <atan+0x3e>
 800bff2:	a51d      	add	r5, pc, #116	; (adr r5, 800c068 <atan+0x310>)
 800bff4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bff8:	e6cd      	b.n	800bd96 <atan+0x3e>
 800bffa:	bf00      	nop
 800bffc:	f3af 8000 	nop.w
 800c000:	54442d18 	.word	0x54442d18
 800c004:	3ff921fb 	.word	0x3ff921fb
 800c008:	8800759c 	.word	0x8800759c
 800c00c:	7e37e43c 	.word	0x7e37e43c
 800c010:	e322da11 	.word	0xe322da11
 800c014:	3f90ad3a 	.word	0x3f90ad3a
 800c018:	24760deb 	.word	0x24760deb
 800c01c:	3fa97b4b 	.word	0x3fa97b4b
 800c020:	a0d03d51 	.word	0xa0d03d51
 800c024:	3fb10d66 	.word	0x3fb10d66
 800c028:	c54c206e 	.word	0xc54c206e
 800c02c:	3fb745cd 	.word	0x3fb745cd
 800c030:	920083ff 	.word	0x920083ff
 800c034:	3fc24924 	.word	0x3fc24924
 800c038:	5555550d 	.word	0x5555550d
 800c03c:	3fd55555 	.word	0x3fd55555
 800c040:	2c6a6c2f 	.word	0x2c6a6c2f
 800c044:	bfa2b444 	.word	0xbfa2b444
 800c048:	52defd9a 	.word	0x52defd9a
 800c04c:	3fadde2d 	.word	0x3fadde2d
 800c050:	af749a6d 	.word	0xaf749a6d
 800c054:	3fb3b0f2 	.word	0x3fb3b0f2
 800c058:	fe231671 	.word	0xfe231671
 800c05c:	3fbc71c6 	.word	0x3fbc71c6
 800c060:	9998ebc4 	.word	0x9998ebc4
 800c064:	3fc99999 	.word	0x3fc99999
 800c068:	54442d18 	.word	0x54442d18
 800c06c:	bff921fb 	.word	0xbff921fb
 800c070:	440fffff 	.word	0x440fffff
 800c074:	7ff00000 	.word	0x7ff00000
 800c078:	3fdbffff 	.word	0x3fdbffff
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	3ff2ffff 	.word	0x3ff2ffff
 800c084:	40037fff 	.word	0x40037fff
 800c088:	3ff80000 	.word	0x3ff80000
 800c08c:	bff00000 	.word	0xbff00000
 800c090:	0800d548 	.word	0x0800d548
 800c094:	0800d528 	.word	0x0800d528

0800c098 <fabs>:
 800c098:	ec51 0b10 	vmov	r0, r1, d0
 800c09c:	ee10 2a10 	vmov	r2, s0
 800c0a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0a4:	ec43 2b10 	vmov	d0, r2, r3
 800c0a8:	4770      	bx	lr
	...

0800c0ac <pow>:
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	ed2d 8b04 	vpush	{d8-d9}
 800c0b4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c388 <pow+0x2dc>
 800c0b8:	b08d      	sub	sp, #52	; 0x34
 800c0ba:	ec57 6b10 	vmov	r6, r7, d0
 800c0be:	ec55 4b11 	vmov	r4, r5, d1
 800c0c2:	f000 f9bd 	bl	800c440 <__ieee754_pow>
 800c0c6:	f999 3000 	ldrsb.w	r3, [r9]
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800c0d2:	eef0 8a60 	vmov.f32	s17, s1
 800c0d6:	46c8      	mov	r8, r9
 800c0d8:	d05f      	beq.n	800c19a <pow+0xee>
 800c0da:	4622      	mov	r2, r4
 800c0dc:	462b      	mov	r3, r5
 800c0de:	4620      	mov	r0, r4
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7f4 fd23 	bl	8000b2c <__aeabi_dcmpun>
 800c0e6:	4683      	mov	fp, r0
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d156      	bne.n	800c19a <pow+0xee>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	f7f4 fd1a 	bl	8000b2c <__aeabi_dcmpun>
 800c0f8:	9001      	str	r0, [sp, #4]
 800c0fa:	b1e8      	cbz	r0, 800c138 <pow+0x8c>
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2300      	movs	r3, #0
 800c100:	4620      	mov	r0, r4
 800c102:	4629      	mov	r1, r5
 800c104:	f7f4 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d046      	beq.n	800c19a <pow+0xee>
 800c10c:	2301      	movs	r3, #1
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	4b96      	ldr	r3, [pc, #600]	; (800c36c <pow+0x2c0>)
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	4b96      	ldr	r3, [pc, #600]	; (800c370 <pow+0x2c4>)
 800c116:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c11a:	2200      	movs	r2, #0
 800c11c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	2b02      	cmp	r3, #2
 800c124:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c128:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c12c:	d033      	beq.n	800c196 <pow+0xea>
 800c12e:	a802      	add	r0, sp, #8
 800c130:	f000 ff4c 	bl	800cfcc <matherr>
 800c134:	bb48      	cbnz	r0, 800c18a <pow+0xde>
 800c136:	e05d      	b.n	800c1f4 <pow+0x148>
 800c138:	f04f 0a00 	mov.w	sl, #0
 800c13c:	f04f 0b00 	mov.w	fp, #0
 800c140:	4652      	mov	r2, sl
 800c142:	465b      	mov	r3, fp
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	f7f4 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c14c:	ec4b ab19 	vmov	d9, sl, fp
 800c150:	2800      	cmp	r0, #0
 800c152:	d054      	beq.n	800c1fe <pow+0x152>
 800c154:	4652      	mov	r2, sl
 800c156:	465b      	mov	r3, fp
 800c158:	4620      	mov	r0, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7f4 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c160:	4680      	mov	r8, r0
 800c162:	b318      	cbz	r0, 800c1ac <pow+0x100>
 800c164:	2301      	movs	r3, #1
 800c166:	9302      	str	r3, [sp, #8]
 800c168:	4b80      	ldr	r3, [pc, #512]	; (800c36c <pow+0x2c0>)
 800c16a:	9303      	str	r3, [sp, #12]
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	930a      	str	r3, [sp, #40]	; 0x28
 800c170:	9b00      	ldr	r3, [sp, #0]
 800c172:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c176:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c17a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0d5      	beq.n	800c12e <pow+0x82>
 800c182:	4b7b      	ldr	r3, [pc, #492]	; (800c370 <pow+0x2c4>)
 800c184:	2200      	movs	r2, #0
 800c186:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c18c:	b11b      	cbz	r3, 800c196 <pow+0xea>
 800c18e:	f7fc faf1 	bl	8008774 <__errno>
 800c192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c194:	6003      	str	r3, [r0, #0]
 800c196:	ed9d 8b08 	vldr	d8, [sp, #32]
 800c19a:	eeb0 0a48 	vmov.f32	s0, s16
 800c19e:	eef0 0a68 	vmov.f32	s1, s17
 800c1a2:	b00d      	add	sp, #52	; 0x34
 800c1a4:	ecbd 8b04 	vpop	{d8-d9}
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ac:	ec45 4b10 	vmov	d0, r4, r5
 800c1b0:	f000 ff04 	bl	800cfbc <finite>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d0f0      	beq.n	800c19a <pow+0xee>
 800c1b8:	4652      	mov	r2, sl
 800c1ba:	465b      	mov	r3, fp
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d0e8      	beq.n	800c19a <pow+0xee>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	9302      	str	r3, [sp, #8]
 800c1cc:	4b67      	ldr	r3, [pc, #412]	; (800c36c <pow+0x2c0>)
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	f999 3000 	ldrsb.w	r3, [r9]
 800c1d4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c1d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c1dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c1e0:	b913      	cbnz	r3, 800c1e8 <pow+0x13c>
 800c1e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c1e6:	e7a2      	b.n	800c12e <pow+0x82>
 800c1e8:	4962      	ldr	r1, [pc, #392]	; (800c374 <pow+0x2c8>)
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d19c      	bne.n	800c12e <pow+0x82>
 800c1f4:	f7fc fabe 	bl	8008774 <__errno>
 800c1f8:	2321      	movs	r3, #33	; 0x21
 800c1fa:	6003      	str	r3, [r0, #0]
 800c1fc:	e7c5      	b.n	800c18a <pow+0xde>
 800c1fe:	eeb0 0a48 	vmov.f32	s0, s16
 800c202:	eef0 0a68 	vmov.f32	s1, s17
 800c206:	f000 fed9 	bl	800cfbc <finite>
 800c20a:	9000      	str	r0, [sp, #0]
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f040 8081 	bne.w	800c314 <pow+0x268>
 800c212:	ec47 6b10 	vmov	d0, r6, r7
 800c216:	f000 fed1 	bl	800cfbc <finite>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d07a      	beq.n	800c314 <pow+0x268>
 800c21e:	ec45 4b10 	vmov	d0, r4, r5
 800c222:	f000 fecb 	bl	800cfbc <finite>
 800c226:	2800      	cmp	r0, #0
 800c228:	d074      	beq.n	800c314 <pow+0x268>
 800c22a:	ec53 2b18 	vmov	r2, r3, d8
 800c22e:	ee18 0a10 	vmov	r0, s16
 800c232:	4619      	mov	r1, r3
 800c234:	f7f4 fc7a 	bl	8000b2c <__aeabi_dcmpun>
 800c238:	f999 9000 	ldrsb.w	r9, [r9]
 800c23c:	4b4b      	ldr	r3, [pc, #300]	; (800c36c <pow+0x2c0>)
 800c23e:	b1b0      	cbz	r0, 800c26e <pow+0x1c2>
 800c240:	2201      	movs	r2, #1
 800c242:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	930a      	str	r3, [sp, #40]	; 0x28
 800c24a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c24e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c252:	f1b9 0f00 	cmp.w	r9, #0
 800c256:	d0c4      	beq.n	800c1e2 <pow+0x136>
 800c258:	4652      	mov	r2, sl
 800c25a:	465b      	mov	r3, fp
 800c25c:	4650      	mov	r0, sl
 800c25e:	4659      	mov	r1, fp
 800c260:	f7f4 faf4 	bl	800084c <__aeabi_ddiv>
 800c264:	f1b9 0f02 	cmp.w	r9, #2
 800c268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c26c:	e7c1      	b.n	800c1f2 <pow+0x146>
 800c26e:	2203      	movs	r2, #3
 800c270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c274:	900a      	str	r0, [sp, #40]	; 0x28
 800c276:	4629      	mov	r1, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	2200      	movs	r2, #0
 800c27c:	4b3e      	ldr	r3, [pc, #248]	; (800c378 <pow+0x2cc>)
 800c27e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c282:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	4604      	mov	r4, r0
 800c28c:	460d      	mov	r5, r1
 800c28e:	f1b9 0f00 	cmp.w	r9, #0
 800c292:	d124      	bne.n	800c2de <pow+0x232>
 800c294:	4b39      	ldr	r3, [pc, #228]	; (800c37c <pow+0x2d0>)
 800c296:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c29a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	465b      	mov	r3, fp
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	f7f4 fc19 	bl	8000adc <__aeabi_dcmplt>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d056      	beq.n	800c35c <pow+0x2b0>
 800c2ae:	ec45 4b10 	vmov	d0, r4, r5
 800c2b2:	f000 fe95 	bl	800cfe0 <rint>
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	ec51 0b10 	vmov	r0, r1, d0
 800c2be:	f7f4 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2c2:	b920      	cbnz	r0, 800c2ce <pow+0x222>
 800c2c4:	4b2e      	ldr	r3, [pc, #184]	; (800c380 <pow+0x2d4>)
 800c2c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c2ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2ce:	f998 3000 	ldrsb.w	r3, [r8]
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d142      	bne.n	800c35c <pow+0x2b0>
 800c2d6:	f7fc fa4d 	bl	8008774 <__errno>
 800c2da:	2322      	movs	r3, #34	; 0x22
 800c2dc:	e78d      	b.n	800c1fa <pow+0x14e>
 800c2de:	4b29      	ldr	r3, [pc, #164]	; (800c384 <pow+0x2d8>)
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	4652      	mov	r2, sl
 800c2ea:	465b      	mov	r3, fp
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	f7f4 fbf5 	bl	8000adc <__aeabi_dcmplt>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d0eb      	beq.n	800c2ce <pow+0x222>
 800c2f6:	ec45 4b10 	vmov	d0, r4, r5
 800c2fa:	f000 fe71 	bl	800cfe0 <rint>
 800c2fe:	4622      	mov	r2, r4
 800c300:	462b      	mov	r3, r5
 800c302:	ec51 0b10 	vmov	r0, r1, d0
 800c306:	f7f4 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d1df      	bne.n	800c2ce <pow+0x222>
 800c30e:	2200      	movs	r2, #0
 800c310:	4b18      	ldr	r3, [pc, #96]	; (800c374 <pow+0x2c8>)
 800c312:	e7da      	b.n	800c2ca <pow+0x21e>
 800c314:	2200      	movs	r2, #0
 800c316:	2300      	movs	r3, #0
 800c318:	ec51 0b18 	vmov	r0, r1, d8
 800c31c:	f7f4 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c320:	2800      	cmp	r0, #0
 800c322:	f43f af3a 	beq.w	800c19a <pow+0xee>
 800c326:	ec47 6b10 	vmov	d0, r6, r7
 800c32a:	f000 fe47 	bl	800cfbc <finite>
 800c32e:	2800      	cmp	r0, #0
 800c330:	f43f af33 	beq.w	800c19a <pow+0xee>
 800c334:	ec45 4b10 	vmov	d0, r4, r5
 800c338:	f000 fe40 	bl	800cfbc <finite>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f43f af2c 	beq.w	800c19a <pow+0xee>
 800c342:	2304      	movs	r3, #4
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <pow+0x2c0>)
 800c348:	9303      	str	r3, [sp, #12]
 800c34a:	2300      	movs	r3, #0
 800c34c:	930a      	str	r3, [sp, #40]	; 0x28
 800c34e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c352:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c356:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c35a:	e7b8      	b.n	800c2ce <pow+0x222>
 800c35c:	a802      	add	r0, sp, #8
 800c35e:	f000 fe35 	bl	800cfcc <matherr>
 800c362:	2800      	cmp	r0, #0
 800c364:	f47f af11 	bne.w	800c18a <pow+0xde>
 800c368:	e7b5      	b.n	800c2d6 <pow+0x22a>
 800c36a:	bf00      	nop
 800c36c:	0800d568 	.word	0x0800d568
 800c370:	3ff00000 	.word	0x3ff00000
 800c374:	fff00000 	.word	0xfff00000
 800c378:	3fe00000 	.word	0x3fe00000
 800c37c:	47efffff 	.word	0x47efffff
 800c380:	c7efffff 	.word	0xc7efffff
 800c384:	7ff00000 	.word	0x7ff00000
 800c388:	200001f4 	.word	0x200001f4

0800c38c <sqrt>:
 800c38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c390:	ed2d 8b02 	vpush	{d8}
 800c394:	b08b      	sub	sp, #44	; 0x2c
 800c396:	ec55 4b10 	vmov	r4, r5, d0
 800c39a:	f000 fd5f 	bl	800ce5c <__ieee754_sqrt>
 800c39e:	4b26      	ldr	r3, [pc, #152]	; (800c438 <sqrt+0xac>)
 800c3a0:	eeb0 8a40 	vmov.f32	s16, s0
 800c3a4:	eef0 8a60 	vmov.f32	s17, s1
 800c3a8:	f993 6000 	ldrsb.w	r6, [r3]
 800c3ac:	1c73      	adds	r3, r6, #1
 800c3ae:	d02a      	beq.n	800c406 <sqrt+0x7a>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	462b      	mov	r3, r5
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f7f4 fbb8 	bl	8000b2c <__aeabi_dcmpun>
 800c3bc:	4607      	mov	r7, r0
 800c3be:	bb10      	cbnz	r0, 800c406 <sqrt+0x7a>
 800c3c0:	f04f 0800 	mov.w	r8, #0
 800c3c4:	f04f 0900 	mov.w	r9, #0
 800c3c8:	4642      	mov	r2, r8
 800c3ca:	464b      	mov	r3, r9
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 fb84 	bl	8000adc <__aeabi_dcmplt>
 800c3d4:	b1b8      	cbz	r0, 800c406 <sqrt+0x7a>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	4b18      	ldr	r3, [pc, #96]	; (800c43c <sqrt+0xb0>)
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	9708      	str	r7, [sp, #32]
 800c3e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c3e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c3e8:	b9b6      	cbnz	r6, 800c418 <sqrt+0x8c>
 800c3ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c3ee:	4668      	mov	r0, sp
 800c3f0:	f000 fdec 	bl	800cfcc <matherr>
 800c3f4:	b1d0      	cbz	r0, 800c42c <sqrt+0xa0>
 800c3f6:	9b08      	ldr	r3, [sp, #32]
 800c3f8:	b11b      	cbz	r3, 800c402 <sqrt+0x76>
 800c3fa:	f7fc f9bb 	bl	8008774 <__errno>
 800c3fe:	9b08      	ldr	r3, [sp, #32]
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c406:	eeb0 0a48 	vmov.f32	s0, s16
 800c40a:	eef0 0a68 	vmov.f32	s1, s17
 800c40e:	b00b      	add	sp, #44	; 0x2c
 800c410:	ecbd 8b02 	vpop	{d8}
 800c414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c418:	4642      	mov	r2, r8
 800c41a:	464b      	mov	r3, r9
 800c41c:	4640      	mov	r0, r8
 800c41e:	4649      	mov	r1, r9
 800c420:	f7f4 fa14 	bl	800084c <__aeabi_ddiv>
 800c424:	2e02      	cmp	r6, #2
 800c426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c42a:	d1e0      	bne.n	800c3ee <sqrt+0x62>
 800c42c:	f7fc f9a2 	bl	8008774 <__errno>
 800c430:	2321      	movs	r3, #33	; 0x21
 800c432:	6003      	str	r3, [r0, #0]
 800c434:	e7df      	b.n	800c3f6 <sqrt+0x6a>
 800c436:	bf00      	nop
 800c438:	200001f4 	.word	0x200001f4
 800c43c:	0800d56c 	.word	0x0800d56c

0800c440 <__ieee754_pow>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	b091      	sub	sp, #68	; 0x44
 800c446:	ed8d 1b00 	vstr	d1, [sp]
 800c44a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c44e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c452:	ea58 0302 	orrs.w	r3, r8, r2
 800c456:	ec57 6b10 	vmov	r6, r7, d0
 800c45a:	f000 84be 	beq.w	800cdda <__ieee754_pow+0x99a>
 800c45e:	4b7a      	ldr	r3, [pc, #488]	; (800c648 <__ieee754_pow+0x208>)
 800c460:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c464:	429c      	cmp	r4, r3
 800c466:	463d      	mov	r5, r7
 800c468:	ee10 aa10 	vmov	sl, s0
 800c46c:	dc09      	bgt.n	800c482 <__ieee754_pow+0x42>
 800c46e:	d103      	bne.n	800c478 <__ieee754_pow+0x38>
 800c470:	b93e      	cbnz	r6, 800c482 <__ieee754_pow+0x42>
 800c472:	45a0      	cmp	r8, r4
 800c474:	dc0d      	bgt.n	800c492 <__ieee754_pow+0x52>
 800c476:	e001      	b.n	800c47c <__ieee754_pow+0x3c>
 800c478:	4598      	cmp	r8, r3
 800c47a:	dc02      	bgt.n	800c482 <__ieee754_pow+0x42>
 800c47c:	4598      	cmp	r8, r3
 800c47e:	d10e      	bne.n	800c49e <__ieee754_pow+0x5e>
 800c480:	b16a      	cbz	r2, 800c49e <__ieee754_pow+0x5e>
 800c482:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c486:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c48a:	ea54 030a 	orrs.w	r3, r4, sl
 800c48e:	f000 84a4 	beq.w	800cdda <__ieee754_pow+0x99a>
 800c492:	486e      	ldr	r0, [pc, #440]	; (800c64c <__ieee754_pow+0x20c>)
 800c494:	b011      	add	sp, #68	; 0x44
 800c496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f000 bd99 	b.w	800cfd0 <nan>
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	da53      	bge.n	800c54a <__ieee754_pow+0x10a>
 800c4a2:	4b6b      	ldr	r3, [pc, #428]	; (800c650 <__ieee754_pow+0x210>)
 800c4a4:	4598      	cmp	r8, r3
 800c4a6:	dc4d      	bgt.n	800c544 <__ieee754_pow+0x104>
 800c4a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c4ac:	4598      	cmp	r8, r3
 800c4ae:	dd4c      	ble.n	800c54a <__ieee754_pow+0x10a>
 800c4b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c4b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4b8:	2b14      	cmp	r3, #20
 800c4ba:	dd26      	ble.n	800c50a <__ieee754_pow+0xca>
 800c4bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c4c0:	fa22 f103 	lsr.w	r1, r2, r3
 800c4c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d13e      	bne.n	800c54a <__ieee754_pow+0x10a>
 800c4cc:	f001 0101 	and.w	r1, r1, #1
 800c4d0:	f1c1 0b02 	rsb	fp, r1, #2
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	d15b      	bne.n	800c590 <__ieee754_pow+0x150>
 800c4d8:	4b5b      	ldr	r3, [pc, #364]	; (800c648 <__ieee754_pow+0x208>)
 800c4da:	4598      	cmp	r8, r3
 800c4dc:	d124      	bne.n	800c528 <__ieee754_pow+0xe8>
 800c4de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c4e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c4e6:	ea53 030a 	orrs.w	r3, r3, sl
 800c4ea:	f000 8476 	beq.w	800cdda <__ieee754_pow+0x99a>
 800c4ee:	4b59      	ldr	r3, [pc, #356]	; (800c654 <__ieee754_pow+0x214>)
 800c4f0:	429c      	cmp	r4, r3
 800c4f2:	dd2d      	ble.n	800c550 <__ieee754_pow+0x110>
 800c4f4:	f1b9 0f00 	cmp.w	r9, #0
 800c4f8:	f280 8473 	bge.w	800cde2 <__ieee754_pow+0x9a2>
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	2100      	movs	r1, #0
 800c500:	ec41 0b10 	vmov	d0, r0, r1
 800c504:	b011      	add	sp, #68	; 0x44
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	2a00      	cmp	r2, #0
 800c50c:	d13e      	bne.n	800c58c <__ieee754_pow+0x14c>
 800c50e:	f1c3 0314 	rsb	r3, r3, #20
 800c512:	fa48 f103 	asr.w	r1, r8, r3
 800c516:	fa01 f303 	lsl.w	r3, r1, r3
 800c51a:	4543      	cmp	r3, r8
 800c51c:	f040 8469 	bne.w	800cdf2 <__ieee754_pow+0x9b2>
 800c520:	f001 0101 	and.w	r1, r1, #1
 800c524:	f1c1 0b02 	rsb	fp, r1, #2
 800c528:	4b4b      	ldr	r3, [pc, #300]	; (800c658 <__ieee754_pow+0x218>)
 800c52a:	4598      	cmp	r8, r3
 800c52c:	d118      	bne.n	800c560 <__ieee754_pow+0x120>
 800c52e:	f1b9 0f00 	cmp.w	r9, #0
 800c532:	f280 845a 	bge.w	800cdea <__ieee754_pow+0x9aa>
 800c536:	4948      	ldr	r1, [pc, #288]	; (800c658 <__ieee754_pow+0x218>)
 800c538:	4632      	mov	r2, r6
 800c53a:	463b      	mov	r3, r7
 800c53c:	2000      	movs	r0, #0
 800c53e:	f7f4 f985 	bl	800084c <__aeabi_ddiv>
 800c542:	e7dd      	b.n	800c500 <__ieee754_pow+0xc0>
 800c544:	f04f 0b02 	mov.w	fp, #2
 800c548:	e7c4      	b.n	800c4d4 <__ieee754_pow+0x94>
 800c54a:	f04f 0b00 	mov.w	fp, #0
 800c54e:	e7c1      	b.n	800c4d4 <__ieee754_pow+0x94>
 800c550:	f1b9 0f00 	cmp.w	r9, #0
 800c554:	dad2      	bge.n	800c4fc <__ieee754_pow+0xbc>
 800c556:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c55a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c55e:	e7cf      	b.n	800c500 <__ieee754_pow+0xc0>
 800c560:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c564:	d106      	bne.n	800c574 <__ieee754_pow+0x134>
 800c566:	4632      	mov	r2, r6
 800c568:	463b      	mov	r3, r7
 800c56a:	4610      	mov	r0, r2
 800c56c:	4619      	mov	r1, r3
 800c56e:	f7f4 f843 	bl	80005f8 <__aeabi_dmul>
 800c572:	e7c5      	b.n	800c500 <__ieee754_pow+0xc0>
 800c574:	4b39      	ldr	r3, [pc, #228]	; (800c65c <__ieee754_pow+0x21c>)
 800c576:	4599      	cmp	r9, r3
 800c578:	d10a      	bne.n	800c590 <__ieee754_pow+0x150>
 800c57a:	2d00      	cmp	r5, #0
 800c57c:	db08      	blt.n	800c590 <__ieee754_pow+0x150>
 800c57e:	ec47 6b10 	vmov	d0, r6, r7
 800c582:	b011      	add	sp, #68	; 0x44
 800c584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c588:	f000 bc68 	b.w	800ce5c <__ieee754_sqrt>
 800c58c:	f04f 0b00 	mov.w	fp, #0
 800c590:	ec47 6b10 	vmov	d0, r6, r7
 800c594:	f7ff fd80 	bl	800c098 <fabs>
 800c598:	ec51 0b10 	vmov	r0, r1, d0
 800c59c:	f1ba 0f00 	cmp.w	sl, #0
 800c5a0:	d127      	bne.n	800c5f2 <__ieee754_pow+0x1b2>
 800c5a2:	b124      	cbz	r4, 800c5ae <__ieee754_pow+0x16e>
 800c5a4:	4b2c      	ldr	r3, [pc, #176]	; (800c658 <__ieee754_pow+0x218>)
 800c5a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d121      	bne.n	800c5f2 <__ieee754_pow+0x1b2>
 800c5ae:	f1b9 0f00 	cmp.w	r9, #0
 800c5b2:	da05      	bge.n	800c5c0 <__ieee754_pow+0x180>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	4927      	ldr	r1, [pc, #156]	; (800c658 <__ieee754_pow+0x218>)
 800c5bc:	f7f4 f946 	bl	800084c <__aeabi_ddiv>
 800c5c0:	2d00      	cmp	r5, #0
 800c5c2:	da9d      	bge.n	800c500 <__ieee754_pow+0xc0>
 800c5c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c5c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c5cc:	ea54 030b 	orrs.w	r3, r4, fp
 800c5d0:	d108      	bne.n	800c5e4 <__ieee754_pow+0x1a4>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	4619      	mov	r1, r3
 800c5da:	f7f3 fe55 	bl	8000288 <__aeabi_dsub>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	e7ac      	b.n	800c53e <__ieee754_pow+0xfe>
 800c5e4:	f1bb 0f01 	cmp.w	fp, #1
 800c5e8:	d18a      	bne.n	800c500 <__ieee754_pow+0xc0>
 800c5ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	e786      	b.n	800c500 <__ieee754_pow+0xc0>
 800c5f2:	0fed      	lsrs	r5, r5, #31
 800c5f4:	1e6b      	subs	r3, r5, #1
 800c5f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c5f8:	ea5b 0303 	orrs.w	r3, fp, r3
 800c5fc:	d102      	bne.n	800c604 <__ieee754_pow+0x1c4>
 800c5fe:	4632      	mov	r2, r6
 800c600:	463b      	mov	r3, r7
 800c602:	e7e8      	b.n	800c5d6 <__ieee754_pow+0x196>
 800c604:	4b16      	ldr	r3, [pc, #88]	; (800c660 <__ieee754_pow+0x220>)
 800c606:	4598      	cmp	r8, r3
 800c608:	f340 80fe 	ble.w	800c808 <__ieee754_pow+0x3c8>
 800c60c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c610:	4598      	cmp	r8, r3
 800c612:	dd0a      	ble.n	800c62a <__ieee754_pow+0x1ea>
 800c614:	4b0f      	ldr	r3, [pc, #60]	; (800c654 <__ieee754_pow+0x214>)
 800c616:	429c      	cmp	r4, r3
 800c618:	dc0d      	bgt.n	800c636 <__ieee754_pow+0x1f6>
 800c61a:	f1b9 0f00 	cmp.w	r9, #0
 800c61e:	f6bf af6d 	bge.w	800c4fc <__ieee754_pow+0xbc>
 800c622:	a307      	add	r3, pc, #28	; (adr r3, 800c640 <__ieee754_pow+0x200>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	e79f      	b.n	800c56a <__ieee754_pow+0x12a>
 800c62a:	4b0e      	ldr	r3, [pc, #56]	; (800c664 <__ieee754_pow+0x224>)
 800c62c:	429c      	cmp	r4, r3
 800c62e:	ddf4      	ble.n	800c61a <__ieee754_pow+0x1da>
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <__ieee754_pow+0x218>)
 800c632:	429c      	cmp	r4, r3
 800c634:	dd18      	ble.n	800c668 <__ieee754_pow+0x228>
 800c636:	f1b9 0f00 	cmp.w	r9, #0
 800c63a:	dcf2      	bgt.n	800c622 <__ieee754_pow+0x1e2>
 800c63c:	e75e      	b.n	800c4fc <__ieee754_pow+0xbc>
 800c63e:	bf00      	nop
 800c640:	8800759c 	.word	0x8800759c
 800c644:	7e37e43c 	.word	0x7e37e43c
 800c648:	7ff00000 	.word	0x7ff00000
 800c64c:	0800d419 	.word	0x0800d419
 800c650:	433fffff 	.word	0x433fffff
 800c654:	3fefffff 	.word	0x3fefffff
 800c658:	3ff00000 	.word	0x3ff00000
 800c65c:	3fe00000 	.word	0x3fe00000
 800c660:	41e00000 	.word	0x41e00000
 800c664:	3feffffe 	.word	0x3feffffe
 800c668:	2200      	movs	r2, #0
 800c66a:	4b63      	ldr	r3, [pc, #396]	; (800c7f8 <__ieee754_pow+0x3b8>)
 800c66c:	f7f3 fe0c 	bl	8000288 <__aeabi_dsub>
 800c670:	a355      	add	r3, pc, #340	; (adr r3, 800c7c8 <__ieee754_pow+0x388>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	4604      	mov	r4, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	f7f3 ffbd 	bl	80005f8 <__aeabi_dmul>
 800c67e:	a354      	add	r3, pc, #336	; (adr r3, 800c7d0 <__ieee754_pow+0x390>)
 800c680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7f3 ffb4 	bl	80005f8 <__aeabi_dmul>
 800c690:	2200      	movs	r2, #0
 800c692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c696:	4b59      	ldr	r3, [pc, #356]	; (800c7fc <__ieee754_pow+0x3bc>)
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	a14c      	add	r1, pc, #304	; (adr r1, 800c7d8 <__ieee754_pow+0x398>)
 800c6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6aa:	f7f3 fded 	bl	8000288 <__aeabi_dsub>
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	462b      	mov	r3, r5
 800c6b2:	f7f3 ffa1 	bl	80005f8 <__aeabi_dmul>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	4950      	ldr	r1, [pc, #320]	; (800c800 <__ieee754_pow+0x3c0>)
 800c6be:	f7f3 fde3 	bl	8000288 <__aeabi_dsub>
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	462b      	mov	r3, r5
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	4689      	mov	r9, r1
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	f7f3 ff93 	bl	80005f8 <__aeabi_dmul>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	4649      	mov	r1, r9
 800c6da:	f7f3 ff8d 	bl	80005f8 <__aeabi_dmul>
 800c6de:	a340      	add	r3, pc, #256	; (adr r3, 800c7e0 <__ieee754_pow+0x3a0>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 ff88 	bl	80005f8 <__aeabi_dmul>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6f0:	f7f3 fdca 	bl	8000288 <__aeabi_dsub>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	4639      	mov	r1, r7
 800c700:	f7f3 fdc4 	bl	800028c <__adddf3>
 800c704:	2000      	movs	r0, #0
 800c706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c70a:	4632      	mov	r2, r6
 800c70c:	463b      	mov	r3, r7
 800c70e:	f7f3 fdbb 	bl	8000288 <__aeabi_dsub>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4620      	mov	r0, r4
 800c718:	4629      	mov	r1, r5
 800c71a:	f7f3 fdb5 	bl	8000288 <__aeabi_dsub>
 800c71e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c720:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c724:	4313      	orrs	r3, r2
 800c726:	4606      	mov	r6, r0
 800c728:	460f      	mov	r7, r1
 800c72a:	f040 81eb 	bne.w	800cb04 <__ieee754_pow+0x6c4>
 800c72e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c7e8 <__ieee754_pow+0x3a8>
 800c732:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c736:	2400      	movs	r4, #0
 800c738:	4622      	mov	r2, r4
 800c73a:	462b      	mov	r3, r5
 800c73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c740:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c744:	f7f3 fda0 	bl	8000288 <__aeabi_dsub>
 800c748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c74c:	f7f3 ff54 	bl	80005f8 <__aeabi_dmul>
 800c750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c754:	4680      	mov	r8, r0
 800c756:	4689      	mov	r9, r1
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4640      	mov	r0, r8
 800c766:	4649      	mov	r1, r9
 800c768:	f7f3 fd90 	bl	800028c <__adddf3>
 800c76c:	4622      	mov	r2, r4
 800c76e:	462b      	mov	r3, r5
 800c770:	4680      	mov	r8, r0
 800c772:	4689      	mov	r9, r1
 800c774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c778:	f7f3 ff3e 	bl	80005f8 <__aeabi_dmul>
 800c77c:	460b      	mov	r3, r1
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	4602      	mov	r2, r0
 800c784:	4649      	mov	r1, r9
 800c786:	4640      	mov	r0, r8
 800c788:	e9cd 4500 	strd	r4, r5, [sp]
 800c78c:	f7f3 fd7e 	bl	800028c <__adddf3>
 800c790:	4b1c      	ldr	r3, [pc, #112]	; (800c804 <__ieee754_pow+0x3c4>)
 800c792:	4299      	cmp	r1, r3
 800c794:	4606      	mov	r6, r0
 800c796:	460f      	mov	r7, r1
 800c798:	468b      	mov	fp, r1
 800c79a:	f340 82f7 	ble.w	800cd8c <__ieee754_pow+0x94c>
 800c79e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c7a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c7a6:	4303      	orrs	r3, r0
 800c7a8:	f000 81ea 	beq.w	800cb80 <__ieee754_pow+0x740>
 800c7ac:	a310      	add	r3, pc, #64	; (adr r3, 800c7f0 <__ieee754_pow+0x3b0>)
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7b6:	f7f3 ff1f 	bl	80005f8 <__aeabi_dmul>
 800c7ba:	a30d      	add	r3, pc, #52	; (adr r3, 800c7f0 <__ieee754_pow+0x3b0>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	e6d5      	b.n	800c56e <__ieee754_pow+0x12e>
 800c7c2:	bf00      	nop
 800c7c4:	f3af 8000 	nop.w
 800c7c8:	60000000 	.word	0x60000000
 800c7cc:	3ff71547 	.word	0x3ff71547
 800c7d0:	f85ddf44 	.word	0xf85ddf44
 800c7d4:	3e54ae0b 	.word	0x3e54ae0b
 800c7d8:	55555555 	.word	0x55555555
 800c7dc:	3fd55555 	.word	0x3fd55555
 800c7e0:	652b82fe 	.word	0x652b82fe
 800c7e4:	3ff71547 	.word	0x3ff71547
 800c7e8:	00000000 	.word	0x00000000
 800c7ec:	bff00000 	.word	0xbff00000
 800c7f0:	8800759c 	.word	0x8800759c
 800c7f4:	7e37e43c 	.word	0x7e37e43c
 800c7f8:	3ff00000 	.word	0x3ff00000
 800c7fc:	3fd00000 	.word	0x3fd00000
 800c800:	3fe00000 	.word	0x3fe00000
 800c804:	408fffff 	.word	0x408fffff
 800c808:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c80c:	f04f 0200 	mov.w	r2, #0
 800c810:	da05      	bge.n	800c81e <__ieee754_pow+0x3de>
 800c812:	4bd3      	ldr	r3, [pc, #844]	; (800cb60 <__ieee754_pow+0x720>)
 800c814:	f7f3 fef0 	bl	80005f8 <__aeabi_dmul>
 800c818:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c81c:	460c      	mov	r4, r1
 800c81e:	1523      	asrs	r3, r4, #20
 800c820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c824:	4413      	add	r3, r2
 800c826:	9309      	str	r3, [sp, #36]	; 0x24
 800c828:	4bce      	ldr	r3, [pc, #824]	; (800cb64 <__ieee754_pow+0x724>)
 800c82a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c82e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c832:	429c      	cmp	r4, r3
 800c834:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c838:	dd08      	ble.n	800c84c <__ieee754_pow+0x40c>
 800c83a:	4bcb      	ldr	r3, [pc, #812]	; (800cb68 <__ieee754_pow+0x728>)
 800c83c:	429c      	cmp	r4, r3
 800c83e:	f340 815e 	ble.w	800cafe <__ieee754_pow+0x6be>
 800c842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c844:	3301      	adds	r3, #1
 800c846:	9309      	str	r3, [sp, #36]	; 0x24
 800c848:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c84c:	f04f 0a00 	mov.w	sl, #0
 800c850:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c854:	930c      	str	r3, [sp, #48]	; 0x30
 800c856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c858:	4bc4      	ldr	r3, [pc, #784]	; (800cb6c <__ieee754_pow+0x72c>)
 800c85a:	4413      	add	r3, r2
 800c85c:	ed93 7b00 	vldr	d7, [r3]
 800c860:	4629      	mov	r1, r5
 800c862:	ec53 2b17 	vmov	r2, r3, d7
 800c866:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c86a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c86e:	f7f3 fd0b 	bl	8000288 <__aeabi_dsub>
 800c872:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c87e:	f7f3 fd05 	bl	800028c <__adddf3>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	2000      	movs	r0, #0
 800c888:	49b9      	ldr	r1, [pc, #740]	; (800cb70 <__ieee754_pow+0x730>)
 800c88a:	f7f3 ffdf 	bl	800084c <__aeabi_ddiv>
 800c88e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f3 fead 	bl	80005f8 <__aeabi_dmul>
 800c89e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c8a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9302      	str	r3, [sp, #8]
 800c8ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c8b2:	106d      	asrs	r5, r5, #1
 800c8b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c8b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c8bc:	2200      	movs	r2, #0
 800c8be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	4614      	mov	r4, r2
 800c8c8:	461d      	mov	r5, r3
 800c8ca:	f7f3 fe95 	bl	80005f8 <__aeabi_dmul>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 fcd7 	bl	8000288 <__aeabi_dsub>
 800c8da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7f3 fccf 	bl	8000288 <__aeabi_dsub>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8f2:	f7f3 fcc9 	bl	8000288 <__aeabi_dsub>
 800c8f6:	4642      	mov	r2, r8
 800c8f8:	464b      	mov	r3, r9
 800c8fa:	f7f3 fe7d 	bl	80005f8 <__aeabi_dmul>
 800c8fe:	4602      	mov	r2, r0
 800c900:	460b      	mov	r3, r1
 800c902:	4630      	mov	r0, r6
 800c904:	4639      	mov	r1, r7
 800c906:	f7f3 fcbf 	bl	8000288 <__aeabi_dsub>
 800c90a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c916:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c91a:	4610      	mov	r0, r2
 800c91c:	4619      	mov	r1, r3
 800c91e:	f7f3 fe6b 	bl	80005f8 <__aeabi_dmul>
 800c922:	a37b      	add	r3, pc, #492	; (adr r3, 800cb10 <__ieee754_pow+0x6d0>)
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	4604      	mov	r4, r0
 800c92a:	460d      	mov	r5, r1
 800c92c:	f7f3 fe64 	bl	80005f8 <__aeabi_dmul>
 800c930:	a379      	add	r3, pc, #484	; (adr r3, 800cb18 <__ieee754_pow+0x6d8>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fca9 	bl	800028c <__adddf3>
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f7f3 fe5b 	bl	80005f8 <__aeabi_dmul>
 800c942:	a377      	add	r3, pc, #476	; (adr r3, 800cb20 <__ieee754_pow+0x6e0>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fca0 	bl	800028c <__adddf3>
 800c94c:	4622      	mov	r2, r4
 800c94e:	462b      	mov	r3, r5
 800c950:	f7f3 fe52 	bl	80005f8 <__aeabi_dmul>
 800c954:	a374      	add	r3, pc, #464	; (adr r3, 800cb28 <__ieee754_pow+0x6e8>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fc97 	bl	800028c <__adddf3>
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f7f3 fe49 	bl	80005f8 <__aeabi_dmul>
 800c966:	a372      	add	r3, pc, #456	; (adr r3, 800cb30 <__ieee754_pow+0x6f0>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc8e 	bl	800028c <__adddf3>
 800c970:	4622      	mov	r2, r4
 800c972:	462b      	mov	r3, r5
 800c974:	f7f3 fe40 	bl	80005f8 <__aeabi_dmul>
 800c978:	a36f      	add	r3, pc, #444	; (adr r3, 800cb38 <__ieee754_pow+0x6f8>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc85 	bl	800028c <__adddf3>
 800c982:	4622      	mov	r2, r4
 800c984:	4606      	mov	r6, r0
 800c986:	460f      	mov	r7, r1
 800c988:	462b      	mov	r3, r5
 800c98a:	4620      	mov	r0, r4
 800c98c:	4629      	mov	r1, r5
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4630      	mov	r0, r6
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f3 fe2d 	bl	80005f8 <__aeabi_dmul>
 800c99e:	4642      	mov	r2, r8
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	464b      	mov	r3, r9
 800c9a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9aa:	f7f3 fc6f 	bl	800028c <__adddf3>
 800c9ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9b2:	f7f3 fe21 	bl	80005f8 <__aeabi_dmul>
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	f7f3 fc67 	bl	800028c <__adddf3>
 800c9be:	4642      	mov	r2, r8
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	460f      	mov	r7, r1
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	4649      	mov	r1, r9
 800c9ca:	f7f3 fe15 	bl	80005f8 <__aeabi_dmul>
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	4b68      	ldr	r3, [pc, #416]	; (800cb74 <__ieee754_pow+0x734>)
 800c9d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c9d6:	f7f3 fc59 	bl	800028c <__adddf3>
 800c9da:	4632      	mov	r2, r6
 800c9dc:	463b      	mov	r3, r7
 800c9de:	f7f3 fc55 	bl	800028c <__adddf3>
 800c9e2:	9802      	ldr	r0, [sp, #8]
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	f7f3 fe02 	bl	80005f8 <__aeabi_dmul>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4689      	mov	r9, r1
 800c9fa:	4b5e      	ldr	r3, [pc, #376]	; (800cb74 <__ieee754_pow+0x734>)
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	4629      	mov	r1, r5
 800ca00:	f7f3 fc42 	bl	8000288 <__aeabi_dsub>
 800ca04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca08:	f7f3 fc3e 	bl	8000288 <__aeabi_dsub>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4630      	mov	r0, r6
 800ca12:	4639      	mov	r1, r7
 800ca14:	f7f3 fc38 	bl	8000288 <__aeabi_dsub>
 800ca18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca1c:	f7f3 fdec 	bl	80005f8 <__aeabi_dmul>
 800ca20:	4622      	mov	r2, r4
 800ca22:	4606      	mov	r6, r0
 800ca24:	460f      	mov	r7, r1
 800ca26:	462b      	mov	r3, r5
 800ca28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca2c:	f7f3 fde4 	bl	80005f8 <__aeabi_dmul>
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4630      	mov	r0, r6
 800ca36:	4639      	mov	r1, r7
 800ca38:	f7f3 fc28 	bl	800028c <__adddf3>
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	460f      	mov	r7, r1
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4640      	mov	r0, r8
 800ca46:	4649      	mov	r1, r9
 800ca48:	f7f3 fc20 	bl	800028c <__adddf3>
 800ca4c:	9802      	ldr	r0, [sp, #8]
 800ca4e:	a33c      	add	r3, pc, #240	; (adr r3, 800cb40 <__ieee754_pow+0x700>)
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	4604      	mov	r4, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	f7f3 fdce 	bl	80005f8 <__aeabi_dmul>
 800ca5c:	4642      	mov	r2, r8
 800ca5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca62:	464b      	mov	r3, r9
 800ca64:	4620      	mov	r0, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f3 fc0e 	bl	8000288 <__aeabi_dsub>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4630      	mov	r0, r6
 800ca72:	4639      	mov	r1, r7
 800ca74:	f7f3 fc08 	bl	8000288 <__aeabi_dsub>
 800ca78:	a333      	add	r3, pc, #204	; (adr r3, 800cb48 <__ieee754_pow+0x708>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f3 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ca82:	a333      	add	r3, pc, #204	; (adr r3, 800cb50 <__ieee754_pow+0x710>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	4606      	mov	r6, r0
 800ca8a:	460f      	mov	r7, r1
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4629      	mov	r1, r5
 800ca90:	f7f3 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	4630      	mov	r0, r6
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	f7f3 fbf6 	bl	800028c <__adddf3>
 800caa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caa2:	4b35      	ldr	r3, [pc, #212]	; (800cb78 <__ieee754_pow+0x738>)
 800caa4:	4413      	add	r3, r2
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fbef 	bl	800028c <__adddf3>
 800caae:	4604      	mov	r4, r0
 800cab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cab2:	460d      	mov	r5, r1
 800cab4:	f7f3 fd36 	bl	8000524 <__aeabi_i2d>
 800cab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caba:	4b30      	ldr	r3, [pc, #192]	; (800cb7c <__ieee754_pow+0x73c>)
 800cabc:	4413      	add	r3, r2
 800cabe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cac2:	4606      	mov	r6, r0
 800cac4:	460f      	mov	r7, r1
 800cac6:	4622      	mov	r2, r4
 800cac8:	462b      	mov	r3, r5
 800caca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cace:	f7f3 fbdd 	bl	800028c <__adddf3>
 800cad2:	4642      	mov	r2, r8
 800cad4:	464b      	mov	r3, r9
 800cad6:	f7f3 fbd9 	bl	800028c <__adddf3>
 800cada:	4632      	mov	r2, r6
 800cadc:	463b      	mov	r3, r7
 800cade:	f7f3 fbd5 	bl	800028c <__adddf3>
 800cae2:	9802      	ldr	r0, [sp, #8]
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caec:	f7f3 fbcc 	bl	8000288 <__aeabi_dsub>
 800caf0:	4642      	mov	r2, r8
 800caf2:	464b      	mov	r3, r9
 800caf4:	f7f3 fbc8 	bl	8000288 <__aeabi_dsub>
 800caf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cafc:	e607      	b.n	800c70e <__ieee754_pow+0x2ce>
 800cafe:	f04f 0a01 	mov.w	sl, #1
 800cb02:	e6a5      	b.n	800c850 <__ieee754_pow+0x410>
 800cb04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800cb58 <__ieee754_pow+0x718>
 800cb08:	e613      	b.n	800c732 <__ieee754_pow+0x2f2>
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w
 800cb10:	4a454eef 	.word	0x4a454eef
 800cb14:	3fca7e28 	.word	0x3fca7e28
 800cb18:	93c9db65 	.word	0x93c9db65
 800cb1c:	3fcd864a 	.word	0x3fcd864a
 800cb20:	a91d4101 	.word	0xa91d4101
 800cb24:	3fd17460 	.word	0x3fd17460
 800cb28:	518f264d 	.word	0x518f264d
 800cb2c:	3fd55555 	.word	0x3fd55555
 800cb30:	db6fabff 	.word	0xdb6fabff
 800cb34:	3fdb6db6 	.word	0x3fdb6db6
 800cb38:	33333303 	.word	0x33333303
 800cb3c:	3fe33333 	.word	0x3fe33333
 800cb40:	e0000000 	.word	0xe0000000
 800cb44:	3feec709 	.word	0x3feec709
 800cb48:	dc3a03fd 	.word	0xdc3a03fd
 800cb4c:	3feec709 	.word	0x3feec709
 800cb50:	145b01f5 	.word	0x145b01f5
 800cb54:	be3e2fe0 	.word	0xbe3e2fe0
 800cb58:	00000000 	.word	0x00000000
 800cb5c:	3ff00000 	.word	0x3ff00000
 800cb60:	43400000 	.word	0x43400000
 800cb64:	0003988e 	.word	0x0003988e
 800cb68:	000bb679 	.word	0x000bb679
 800cb6c:	0800d578 	.word	0x0800d578
 800cb70:	3ff00000 	.word	0x3ff00000
 800cb74:	40080000 	.word	0x40080000
 800cb78:	0800d598 	.word	0x0800d598
 800cb7c:	0800d588 	.word	0x0800d588
 800cb80:	a3b4      	add	r3, pc, #720	; (adr r3, 800ce54 <__ieee754_pow+0xa14>)
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	4640      	mov	r0, r8
 800cb88:	4649      	mov	r1, r9
 800cb8a:	f7f3 fb7f 	bl	800028c <__adddf3>
 800cb8e:	4622      	mov	r2, r4
 800cb90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb94:	462b      	mov	r3, r5
 800cb96:	4630      	mov	r0, r6
 800cb98:	4639      	mov	r1, r7
 800cb9a:	f7f3 fb75 	bl	8000288 <__aeabi_dsub>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cba6:	f7f3 ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	f47f adfe 	bne.w	800c7ac <__ieee754_pow+0x36c>
 800cbb0:	4aa3      	ldr	r2, [pc, #652]	; (800ce40 <__ieee754_pow+0xa00>)
 800cbb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	f340 810a 	ble.w	800cdd0 <__ieee754_pow+0x990>
 800cbbc:	151b      	asrs	r3, r3, #20
 800cbbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cbc2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cbc6:	fa4a f303 	asr.w	r3, sl, r3
 800cbca:	445b      	add	r3, fp
 800cbcc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cbd0:	4e9c      	ldr	r6, [pc, #624]	; (800ce44 <__ieee754_pow+0xa04>)
 800cbd2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cbd6:	4116      	asrs	r6, r2
 800cbd8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cbdc:	2000      	movs	r0, #0
 800cbde:	ea23 0106 	bic.w	r1, r3, r6
 800cbe2:	f1c2 0214 	rsb	r2, r2, #20
 800cbe6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cbea:	fa4a fa02 	asr.w	sl, sl, r2
 800cbee:	f1bb 0f00 	cmp.w	fp, #0
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	bfb8      	it	lt
 800cbfc:	f1ca 0a00 	rsblt	sl, sl, #0
 800cc00:	f7f3 fb42 	bl	8000288 <__aeabi_dsub>
 800cc04:	e9cd 0100 	strd	r0, r1, [sp]
 800cc08:	4642      	mov	r2, r8
 800cc0a:	464b      	mov	r3, r9
 800cc0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc10:	f7f3 fb3c 	bl	800028c <__adddf3>
 800cc14:	2000      	movs	r0, #0
 800cc16:	a378      	add	r3, pc, #480	; (adr r3, 800cdf8 <__ieee754_pow+0x9b8>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	f7f3 fcea 	bl	80005f8 <__aeabi_dmul>
 800cc24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc28:	4606      	mov	r6, r0
 800cc2a:	460f      	mov	r7, r1
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	4629      	mov	r1, r5
 800cc30:	f7f3 fb2a 	bl	8000288 <__aeabi_dsub>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4640      	mov	r0, r8
 800cc3a:	4649      	mov	r1, r9
 800cc3c:	f7f3 fb24 	bl	8000288 <__aeabi_dsub>
 800cc40:	a36f      	add	r3, pc, #444	; (adr r3, 800ce00 <__ieee754_pow+0x9c0>)
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	f7f3 fcd7 	bl	80005f8 <__aeabi_dmul>
 800cc4a:	a36f      	add	r3, pc, #444	; (adr r3, 800ce08 <__ieee754_pow+0x9c8>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	4680      	mov	r8, r0
 800cc52:	4689      	mov	r9, r1
 800cc54:	4620      	mov	r0, r4
 800cc56:	4629      	mov	r1, r5
 800cc58:	f7f3 fcce 	bl	80005f8 <__aeabi_dmul>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4640      	mov	r0, r8
 800cc62:	4649      	mov	r1, r9
 800cc64:	f7f3 fb12 	bl	800028c <__adddf3>
 800cc68:	4604      	mov	r4, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4630      	mov	r0, r6
 800cc72:	4639      	mov	r1, r7
 800cc74:	f7f3 fb0a 	bl	800028c <__adddf3>
 800cc78:	4632      	mov	r2, r6
 800cc7a:	463b      	mov	r3, r7
 800cc7c:	4680      	mov	r8, r0
 800cc7e:	4689      	mov	r9, r1
 800cc80:	f7f3 fb02 	bl	8000288 <__aeabi_dsub>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4620      	mov	r0, r4
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	f7f3 fafc 	bl	8000288 <__aeabi_dsub>
 800cc90:	4642      	mov	r2, r8
 800cc92:	4606      	mov	r6, r0
 800cc94:	460f      	mov	r7, r1
 800cc96:	464b      	mov	r3, r9
 800cc98:	4640      	mov	r0, r8
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	f7f3 fcac 	bl	80005f8 <__aeabi_dmul>
 800cca0:	a35b      	add	r3, pc, #364	; (adr r3, 800ce10 <__ieee754_pow+0x9d0>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	f7f3 fca5 	bl	80005f8 <__aeabi_dmul>
 800ccae:	a35a      	add	r3, pc, #360	; (adr r3, 800ce18 <__ieee754_pow+0x9d8>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 fae8 	bl	8000288 <__aeabi_dsub>
 800ccb8:	4622      	mov	r2, r4
 800ccba:	462b      	mov	r3, r5
 800ccbc:	f7f3 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ccc0:	a357      	add	r3, pc, #348	; (adr r3, 800ce20 <__ieee754_pow+0x9e0>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7f3 fae1 	bl	800028c <__adddf3>
 800ccca:	4622      	mov	r2, r4
 800cccc:	462b      	mov	r3, r5
 800ccce:	f7f3 fc93 	bl	80005f8 <__aeabi_dmul>
 800ccd2:	a355      	add	r3, pc, #340	; (adr r3, 800ce28 <__ieee754_pow+0x9e8>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fad6 	bl	8000288 <__aeabi_dsub>
 800ccdc:	4622      	mov	r2, r4
 800ccde:	462b      	mov	r3, r5
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	a352      	add	r3, pc, #328	; (adr r3, 800ce30 <__ieee754_pow+0x9f0>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f3 facf 	bl	800028c <__adddf3>
 800ccee:	4622      	mov	r2, r4
 800ccf0:	462b      	mov	r3, r5
 800ccf2:	f7f3 fc81 	bl	80005f8 <__aeabi_dmul>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	f7f3 fac3 	bl	8000288 <__aeabi_dsub>
 800cd02:	4604      	mov	r4, r0
 800cd04:	460d      	mov	r5, r1
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	f7f3 fc73 	bl	80005f8 <__aeabi_dmul>
 800cd12:	2200      	movs	r2, #0
 800cd14:	e9cd 0100 	strd	r0, r1, [sp]
 800cd18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	4629      	mov	r1, r5
 800cd20:	f7f3 fab2 	bl	8000288 <__aeabi_dsub>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd2c:	f7f3 fd8e 	bl	800084c <__aeabi_ddiv>
 800cd30:	4632      	mov	r2, r6
 800cd32:	4604      	mov	r4, r0
 800cd34:	460d      	mov	r5, r1
 800cd36:	463b      	mov	r3, r7
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 fc5c 	bl	80005f8 <__aeabi_dmul>
 800cd40:	4632      	mov	r2, r6
 800cd42:	463b      	mov	r3, r7
 800cd44:	f7f3 faa2 	bl	800028c <__adddf3>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f7f3 fa9a 	bl	8000288 <__aeabi_dsub>
 800cd54:	4642      	mov	r2, r8
 800cd56:	464b      	mov	r3, r9
 800cd58:	f7f3 fa96 	bl	8000288 <__aeabi_dsub>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	460b      	mov	r3, r1
 800cd60:	2000      	movs	r0, #0
 800cd62:	4939      	ldr	r1, [pc, #228]	; (800ce48 <__ieee754_pow+0xa08>)
 800cd64:	f7f3 fa90 	bl	8000288 <__aeabi_dsub>
 800cd68:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cd6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	da2f      	bge.n	800cdd6 <__ieee754_pow+0x996>
 800cd76:	4650      	mov	r0, sl
 800cd78:	ec43 2b10 	vmov	d0, r2, r3
 800cd7c:	f000 f9b4 	bl	800d0e8 <scalbn>
 800cd80:	ec51 0b10 	vmov	r0, r1, d0
 800cd84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd88:	f7ff bbf1 	b.w	800c56e <__ieee754_pow+0x12e>
 800cd8c:	4b2f      	ldr	r3, [pc, #188]	; (800ce4c <__ieee754_pow+0xa0c>)
 800cd8e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cd92:	429e      	cmp	r6, r3
 800cd94:	f77f af0c 	ble.w	800cbb0 <__ieee754_pow+0x770>
 800cd98:	4b2d      	ldr	r3, [pc, #180]	; (800ce50 <__ieee754_pow+0xa10>)
 800cd9a:	440b      	add	r3, r1
 800cd9c:	4303      	orrs	r3, r0
 800cd9e:	d00b      	beq.n	800cdb8 <__ieee754_pow+0x978>
 800cda0:	a325      	add	r3, pc, #148	; (adr r3, 800ce38 <__ieee754_pow+0x9f8>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdaa:	f7f3 fc25 	bl	80005f8 <__aeabi_dmul>
 800cdae:	a322      	add	r3, pc, #136	; (adr r3, 800ce38 <__ieee754_pow+0x9f8>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7ff bbdb 	b.w	800c56e <__ieee754_pow+0x12e>
 800cdb8:	4622      	mov	r2, r4
 800cdba:	462b      	mov	r3, r5
 800cdbc:	f7f3 fa64 	bl	8000288 <__aeabi_dsub>
 800cdc0:	4642      	mov	r2, r8
 800cdc2:	464b      	mov	r3, r9
 800cdc4:	f7f3 fe9e 	bl	8000b04 <__aeabi_dcmpge>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f aef1 	beq.w	800cbb0 <__ieee754_pow+0x770>
 800cdce:	e7e7      	b.n	800cda0 <__ieee754_pow+0x960>
 800cdd0:	f04f 0a00 	mov.w	sl, #0
 800cdd4:	e718      	b.n	800cc08 <__ieee754_pow+0x7c8>
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	e7d4      	b.n	800cd84 <__ieee754_pow+0x944>
 800cdda:	2000      	movs	r0, #0
 800cddc:	491a      	ldr	r1, [pc, #104]	; (800ce48 <__ieee754_pow+0xa08>)
 800cdde:	f7ff bb8f 	b.w	800c500 <__ieee754_pow+0xc0>
 800cde2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cde6:	f7ff bb8b 	b.w	800c500 <__ieee754_pow+0xc0>
 800cdea:	4630      	mov	r0, r6
 800cdec:	4639      	mov	r1, r7
 800cdee:	f7ff bb87 	b.w	800c500 <__ieee754_pow+0xc0>
 800cdf2:	4693      	mov	fp, r2
 800cdf4:	f7ff bb98 	b.w	800c528 <__ieee754_pow+0xe8>
 800cdf8:	00000000 	.word	0x00000000
 800cdfc:	3fe62e43 	.word	0x3fe62e43
 800ce00:	fefa39ef 	.word	0xfefa39ef
 800ce04:	3fe62e42 	.word	0x3fe62e42
 800ce08:	0ca86c39 	.word	0x0ca86c39
 800ce0c:	be205c61 	.word	0xbe205c61
 800ce10:	72bea4d0 	.word	0x72bea4d0
 800ce14:	3e663769 	.word	0x3e663769
 800ce18:	c5d26bf1 	.word	0xc5d26bf1
 800ce1c:	3ebbbd41 	.word	0x3ebbbd41
 800ce20:	af25de2c 	.word	0xaf25de2c
 800ce24:	3f11566a 	.word	0x3f11566a
 800ce28:	16bebd93 	.word	0x16bebd93
 800ce2c:	3f66c16c 	.word	0x3f66c16c
 800ce30:	5555553e 	.word	0x5555553e
 800ce34:	3fc55555 	.word	0x3fc55555
 800ce38:	c2f8f359 	.word	0xc2f8f359
 800ce3c:	01a56e1f 	.word	0x01a56e1f
 800ce40:	3fe00000 	.word	0x3fe00000
 800ce44:	000fffff 	.word	0x000fffff
 800ce48:	3ff00000 	.word	0x3ff00000
 800ce4c:	4090cbff 	.word	0x4090cbff
 800ce50:	3f6f3400 	.word	0x3f6f3400
 800ce54:	652b82fe 	.word	0x652b82fe
 800ce58:	3c971547 	.word	0x3c971547

0800ce5c <__ieee754_sqrt>:
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	4955      	ldr	r1, [pc, #340]	; (800cfb8 <__ieee754_sqrt+0x15c>)
 800ce62:	ec55 4b10 	vmov	r4, r5, d0
 800ce66:	43a9      	bics	r1, r5
 800ce68:	462b      	mov	r3, r5
 800ce6a:	462a      	mov	r2, r5
 800ce6c:	d112      	bne.n	800ce94 <__ieee754_sqrt+0x38>
 800ce6e:	ee10 2a10 	vmov	r2, s0
 800ce72:	ee10 0a10 	vmov	r0, s0
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 fbbe 	bl	80005f8 <__aeabi_dmul>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	4620      	mov	r0, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	f7f3 fa02 	bl	800028c <__adddf3>
 800ce88:	4604      	mov	r4, r0
 800ce8a:	460d      	mov	r5, r1
 800ce8c:	ec45 4b10 	vmov	d0, r4, r5
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	2d00      	cmp	r5, #0
 800ce96:	ee10 0a10 	vmov	r0, s0
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	dc0f      	bgt.n	800cebe <__ieee754_sqrt+0x62>
 800ce9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cea2:	4330      	orrs	r0, r6
 800cea4:	d0f2      	beq.n	800ce8c <__ieee754_sqrt+0x30>
 800cea6:	b155      	cbz	r5, 800cebe <__ieee754_sqrt+0x62>
 800cea8:	ee10 2a10 	vmov	r2, s0
 800ceac:	4620      	mov	r0, r4
 800ceae:	4629      	mov	r1, r5
 800ceb0:	f7f3 f9ea 	bl	8000288 <__aeabi_dsub>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	f7f3 fcc8 	bl	800084c <__aeabi_ddiv>
 800cebc:	e7e4      	b.n	800ce88 <__ieee754_sqrt+0x2c>
 800cebe:	151b      	asrs	r3, r3, #20
 800cec0:	d073      	beq.n	800cfaa <__ieee754_sqrt+0x14e>
 800cec2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cec6:	07dd      	lsls	r5, r3, #31
 800cec8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cecc:	bf48      	it	mi
 800cece:	0fc8      	lsrmi	r0, r1, #31
 800ced0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ced4:	bf44      	itt	mi
 800ced6:	0049      	lslmi	r1, r1, #1
 800ced8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800cedc:	2500      	movs	r5, #0
 800cede:	1058      	asrs	r0, r3, #1
 800cee0:	0fcb      	lsrs	r3, r1, #31
 800cee2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cee6:	0049      	lsls	r1, r1, #1
 800cee8:	2316      	movs	r3, #22
 800ceea:	462c      	mov	r4, r5
 800ceec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cef0:	19a7      	adds	r7, r4, r6
 800cef2:	4297      	cmp	r7, r2
 800cef4:	bfde      	ittt	le
 800cef6:	19bc      	addle	r4, r7, r6
 800cef8:	1bd2      	suble	r2, r2, r7
 800cefa:	19ad      	addle	r5, r5, r6
 800cefc:	0fcf      	lsrs	r7, r1, #31
 800cefe:	3b01      	subs	r3, #1
 800cf00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800cf04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cf08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cf0c:	d1f0      	bne.n	800cef0 <__ieee754_sqrt+0x94>
 800cf0e:	f04f 0c20 	mov.w	ip, #32
 800cf12:	469e      	mov	lr, r3
 800cf14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cf18:	42a2      	cmp	r2, r4
 800cf1a:	eb06 070e 	add.w	r7, r6, lr
 800cf1e:	dc02      	bgt.n	800cf26 <__ieee754_sqrt+0xca>
 800cf20:	d112      	bne.n	800cf48 <__ieee754_sqrt+0xec>
 800cf22:	428f      	cmp	r7, r1
 800cf24:	d810      	bhi.n	800cf48 <__ieee754_sqrt+0xec>
 800cf26:	2f00      	cmp	r7, #0
 800cf28:	eb07 0e06 	add.w	lr, r7, r6
 800cf2c:	da42      	bge.n	800cfb4 <__ieee754_sqrt+0x158>
 800cf2e:	f1be 0f00 	cmp.w	lr, #0
 800cf32:	db3f      	blt.n	800cfb4 <__ieee754_sqrt+0x158>
 800cf34:	f104 0801 	add.w	r8, r4, #1
 800cf38:	1b12      	subs	r2, r2, r4
 800cf3a:	428f      	cmp	r7, r1
 800cf3c:	bf88      	it	hi
 800cf3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cf42:	1bc9      	subs	r1, r1, r7
 800cf44:	4433      	add	r3, r6
 800cf46:	4644      	mov	r4, r8
 800cf48:	0052      	lsls	r2, r2, #1
 800cf4a:	f1bc 0c01 	subs.w	ip, ip, #1
 800cf4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800cf52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cf56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cf5a:	d1dd      	bne.n	800cf18 <__ieee754_sqrt+0xbc>
 800cf5c:	430a      	orrs	r2, r1
 800cf5e:	d006      	beq.n	800cf6e <__ieee754_sqrt+0x112>
 800cf60:	1c5c      	adds	r4, r3, #1
 800cf62:	bf13      	iteet	ne
 800cf64:	3301      	addne	r3, #1
 800cf66:	3501      	addeq	r5, #1
 800cf68:	4663      	moveq	r3, ip
 800cf6a:	f023 0301 	bicne.w	r3, r3, #1
 800cf6e:	106a      	asrs	r2, r5, #1
 800cf70:	085b      	lsrs	r3, r3, #1
 800cf72:	07e9      	lsls	r1, r5, #31
 800cf74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cf78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cf7c:	bf48      	it	mi
 800cf7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cf82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800cf86:	461c      	mov	r4, r3
 800cf88:	e780      	b.n	800ce8c <__ieee754_sqrt+0x30>
 800cf8a:	0aca      	lsrs	r2, r1, #11
 800cf8c:	3815      	subs	r0, #21
 800cf8e:	0549      	lsls	r1, r1, #21
 800cf90:	2a00      	cmp	r2, #0
 800cf92:	d0fa      	beq.n	800cf8a <__ieee754_sqrt+0x12e>
 800cf94:	02d6      	lsls	r6, r2, #11
 800cf96:	d50a      	bpl.n	800cfae <__ieee754_sqrt+0x152>
 800cf98:	f1c3 0420 	rsb	r4, r3, #32
 800cf9c:	fa21 f404 	lsr.w	r4, r1, r4
 800cfa0:	1e5d      	subs	r5, r3, #1
 800cfa2:	4099      	lsls	r1, r3
 800cfa4:	4322      	orrs	r2, r4
 800cfa6:	1b43      	subs	r3, r0, r5
 800cfa8:	e78b      	b.n	800cec2 <__ieee754_sqrt+0x66>
 800cfaa:	4618      	mov	r0, r3
 800cfac:	e7f0      	b.n	800cf90 <__ieee754_sqrt+0x134>
 800cfae:	0052      	lsls	r2, r2, #1
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	e7ef      	b.n	800cf94 <__ieee754_sqrt+0x138>
 800cfb4:	46a0      	mov	r8, r4
 800cfb6:	e7bf      	b.n	800cf38 <__ieee754_sqrt+0xdc>
 800cfb8:	7ff00000 	.word	0x7ff00000

0800cfbc <finite>:
 800cfbc:	ee10 3a90 	vmov	r3, s1
 800cfc0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800cfc4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cfc8:	0fc0      	lsrs	r0, r0, #31
 800cfca:	4770      	bx	lr

0800cfcc <matherr>:
 800cfcc:	2000      	movs	r0, #0
 800cfce:	4770      	bx	lr

0800cfd0 <nan>:
 800cfd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfd8 <nan+0x8>
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	00000000 	.word	0x00000000
 800cfdc:	7ff80000 	.word	0x7ff80000

0800cfe0 <rint>:
 800cfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfe2:	ec51 0b10 	vmov	r0, r1, d0
 800cfe6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cfee:	2e13      	cmp	r6, #19
 800cff0:	460b      	mov	r3, r1
 800cff2:	ee10 4a10 	vmov	r4, s0
 800cff6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cffa:	dc56      	bgt.n	800d0aa <rint+0xca>
 800cffc:	2e00      	cmp	r6, #0
 800cffe:	da2b      	bge.n	800d058 <rint+0x78>
 800d000:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d004:	4302      	orrs	r2, r0
 800d006:	d023      	beq.n	800d050 <rint+0x70>
 800d008:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d00c:	4302      	orrs	r2, r0
 800d00e:	4254      	negs	r4, r2
 800d010:	4314      	orrs	r4, r2
 800d012:	0c4b      	lsrs	r3, r1, #17
 800d014:	0b24      	lsrs	r4, r4, #12
 800d016:	045b      	lsls	r3, r3, #17
 800d018:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d01c:	ea44 0103 	orr.w	r1, r4, r3
 800d020:	460b      	mov	r3, r1
 800d022:	492f      	ldr	r1, [pc, #188]	; (800d0e0 <rint+0x100>)
 800d024:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800d028:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d02c:	4602      	mov	r2, r0
 800d02e:	4639      	mov	r1, r7
 800d030:	4630      	mov	r0, r6
 800d032:	f7f3 f92b 	bl	800028c <__adddf3>
 800d036:	e9cd 0100 	strd	r0, r1, [sp]
 800d03a:	463b      	mov	r3, r7
 800d03c:	4632      	mov	r2, r6
 800d03e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d042:	f7f3 f921 	bl	8000288 <__aeabi_dsub>
 800d046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d04a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d04e:	4639      	mov	r1, r7
 800d050:	ec41 0b10 	vmov	d0, r0, r1
 800d054:	b003      	add	sp, #12
 800d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d058:	4a22      	ldr	r2, [pc, #136]	; (800d0e4 <rint+0x104>)
 800d05a:	4132      	asrs	r2, r6
 800d05c:	ea01 0702 	and.w	r7, r1, r2
 800d060:	4307      	orrs	r7, r0
 800d062:	d0f5      	beq.n	800d050 <rint+0x70>
 800d064:	0852      	lsrs	r2, r2, #1
 800d066:	4011      	ands	r1, r2
 800d068:	430c      	orrs	r4, r1
 800d06a:	d00b      	beq.n	800d084 <rint+0xa4>
 800d06c:	ea23 0202 	bic.w	r2, r3, r2
 800d070:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d074:	2e13      	cmp	r6, #19
 800d076:	fa43 f306 	asr.w	r3, r3, r6
 800d07a:	bf0c      	ite	eq
 800d07c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d080:	2400      	movne	r4, #0
 800d082:	4313      	orrs	r3, r2
 800d084:	4916      	ldr	r1, [pc, #88]	; (800d0e0 <rint+0x100>)
 800d086:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d08a:	4622      	mov	r2, r4
 800d08c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d090:	4620      	mov	r0, r4
 800d092:	4629      	mov	r1, r5
 800d094:	f7f3 f8fa 	bl	800028c <__adddf3>
 800d098:	e9cd 0100 	strd	r0, r1, [sp]
 800d09c:	4622      	mov	r2, r4
 800d09e:	462b      	mov	r3, r5
 800d0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0a4:	f7f3 f8f0 	bl	8000288 <__aeabi_dsub>
 800d0a8:	e7d2      	b.n	800d050 <rint+0x70>
 800d0aa:	2e33      	cmp	r6, #51	; 0x33
 800d0ac:	dd07      	ble.n	800d0be <rint+0xde>
 800d0ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d0b2:	d1cd      	bne.n	800d050 <rint+0x70>
 800d0b4:	ee10 2a10 	vmov	r2, s0
 800d0b8:	f7f3 f8e8 	bl	800028c <__adddf3>
 800d0bc:	e7c8      	b.n	800d050 <rint+0x70>
 800d0be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800d0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c6:	40f2      	lsrs	r2, r6
 800d0c8:	4210      	tst	r0, r2
 800d0ca:	d0c1      	beq.n	800d050 <rint+0x70>
 800d0cc:	0852      	lsrs	r2, r2, #1
 800d0ce:	4210      	tst	r0, r2
 800d0d0:	bf1f      	itttt	ne
 800d0d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d0d6:	ea20 0202 	bicne.w	r2, r0, r2
 800d0da:	4134      	asrne	r4, r6
 800d0dc:	4314      	orrne	r4, r2
 800d0de:	e7d1      	b.n	800d084 <rint+0xa4>
 800d0e0:	0800d5a8 	.word	0x0800d5a8
 800d0e4:	000fffff 	.word	0x000fffff

0800d0e8 <scalbn>:
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	ec55 4b10 	vmov	r4, r5, d0
 800d0ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	462b      	mov	r3, r5
 800d0f6:	b9aa      	cbnz	r2, 800d124 <scalbn+0x3c>
 800d0f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d0fc:	4323      	orrs	r3, r4
 800d0fe:	d03b      	beq.n	800d178 <scalbn+0x90>
 800d100:	4b31      	ldr	r3, [pc, #196]	; (800d1c8 <scalbn+0xe0>)
 800d102:	4629      	mov	r1, r5
 800d104:	2200      	movs	r2, #0
 800d106:	ee10 0a10 	vmov	r0, s0
 800d10a:	f7f3 fa75 	bl	80005f8 <__aeabi_dmul>
 800d10e:	4b2f      	ldr	r3, [pc, #188]	; (800d1cc <scalbn+0xe4>)
 800d110:	429e      	cmp	r6, r3
 800d112:	4604      	mov	r4, r0
 800d114:	460d      	mov	r5, r1
 800d116:	da12      	bge.n	800d13e <scalbn+0x56>
 800d118:	a327      	add	r3, pc, #156	; (adr r3, 800d1b8 <scalbn+0xd0>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	f7f3 fa6b 	bl	80005f8 <__aeabi_dmul>
 800d122:	e009      	b.n	800d138 <scalbn+0x50>
 800d124:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d128:	428a      	cmp	r2, r1
 800d12a:	d10c      	bne.n	800d146 <scalbn+0x5e>
 800d12c:	ee10 2a10 	vmov	r2, s0
 800d130:	4620      	mov	r0, r4
 800d132:	4629      	mov	r1, r5
 800d134:	f7f3 f8aa 	bl	800028c <__adddf3>
 800d138:	4604      	mov	r4, r0
 800d13a:	460d      	mov	r5, r1
 800d13c:	e01c      	b.n	800d178 <scalbn+0x90>
 800d13e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d142:	460b      	mov	r3, r1
 800d144:	3a36      	subs	r2, #54	; 0x36
 800d146:	4432      	add	r2, r6
 800d148:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d14c:	428a      	cmp	r2, r1
 800d14e:	dd0b      	ble.n	800d168 <scalbn+0x80>
 800d150:	ec45 4b11 	vmov	d1, r4, r5
 800d154:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d1c0 <scalbn+0xd8>
 800d158:	f000 f83c 	bl	800d1d4 <copysign>
 800d15c:	a318      	add	r3, pc, #96	; (adr r3, 800d1c0 <scalbn+0xd8>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	ec51 0b10 	vmov	r0, r1, d0
 800d166:	e7da      	b.n	800d11e <scalbn+0x36>
 800d168:	2a00      	cmp	r2, #0
 800d16a:	dd08      	ble.n	800d17e <scalbn+0x96>
 800d16c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d170:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d174:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d178:	ec45 4b10 	vmov	d0, r4, r5
 800d17c:	bd70      	pop	{r4, r5, r6, pc}
 800d17e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d182:	da0d      	bge.n	800d1a0 <scalbn+0xb8>
 800d184:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d188:	429e      	cmp	r6, r3
 800d18a:	ec45 4b11 	vmov	d1, r4, r5
 800d18e:	dce1      	bgt.n	800d154 <scalbn+0x6c>
 800d190:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d1b8 <scalbn+0xd0>
 800d194:	f000 f81e 	bl	800d1d4 <copysign>
 800d198:	a307      	add	r3, pc, #28	; (adr r3, 800d1b8 <scalbn+0xd0>)
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	e7e0      	b.n	800d162 <scalbn+0x7a>
 800d1a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1a4:	3236      	adds	r2, #54	; 0x36
 800d1a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4b06      	ldr	r3, [pc, #24]	; (800d1d0 <scalbn+0xe8>)
 800d1b6:	e7b2      	b.n	800d11e <scalbn+0x36>
 800d1b8:	c2f8f359 	.word	0xc2f8f359
 800d1bc:	01a56e1f 	.word	0x01a56e1f
 800d1c0:	8800759c 	.word	0x8800759c
 800d1c4:	7e37e43c 	.word	0x7e37e43c
 800d1c8:	43500000 	.word	0x43500000
 800d1cc:	ffff3cb0 	.word	0xffff3cb0
 800d1d0:	3c900000 	.word	0x3c900000

0800d1d4 <copysign>:
 800d1d4:	ec51 0b10 	vmov	r0, r1, d0
 800d1d8:	ee11 0a90 	vmov	r0, s3
 800d1dc:	ee10 2a10 	vmov	r2, s0
 800d1e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d1e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d1e8:	ea41 0300 	orr.w	r3, r1, r0
 800d1ec:	ec43 2b10 	vmov	d0, r2, r3
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <_init>:
 800d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f6:	bf00      	nop
 800d1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1fa:	bc08      	pop	{r3}
 800d1fc:	469e      	mov	lr, r3
 800d1fe:	4770      	bx	lr

0800d200 <_fini>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	bf00      	nop
 800d204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d206:	bc08      	pop	{r3}
 800d208:	469e      	mov	lr, r3
 800d20a:	4770      	bx	lr
